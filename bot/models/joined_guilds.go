// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"emperror.dev/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// JoinedGuild is an object representing the database table.
type JoinedGuild struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	JoinedAt    time.Time `boil:"joined_at" json:"joined_at" toml:"joined_at" yaml:"joined_at"`
	LeftAt      null.Time `boil:"left_at" json:"left_at,omitempty" toml:"left_at" yaml:"left_at,omitempty"`
	MemberCount int64     `boil:"member_count" json:"member_count" toml:"member_count" yaml:"member_count"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	OwnerID     int64     `boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	Avatar      string    `boil:"avatar" json:"avatar" toml:"avatar" yaml:"avatar"`

	R *joinedGuildR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L joinedGuildL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var JoinedGuildColumns = struct {
	ID          string
	JoinedAt    string
	LeftAt      string
	MemberCount string
	Name        string
	OwnerID     string
	Avatar      string
}{
	ID:          "id",
	JoinedAt:    "joined_at",
	LeftAt:      "left_at",
	MemberCount: "member_count",
	Name:        "name",
	OwnerID:     "owner_id",
	Avatar:      "avatar",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var JoinedGuildWhere = struct {
	ID          whereHelperint64
	JoinedAt    whereHelpertime_Time
	LeftAt      whereHelpernull_Time
	MemberCount whereHelperint64
	Name        whereHelperstring
	OwnerID     whereHelperint64
	Avatar      whereHelperstring
}{
	ID:          whereHelperint64{field: "\"joined_guilds\".\"id\""},
	JoinedAt:    whereHelpertime_Time{field: "\"joined_guilds\".\"joined_at\""},
	LeftAt:      whereHelpernull_Time{field: "\"joined_guilds\".\"left_at\""},
	MemberCount: whereHelperint64{field: "\"joined_guilds\".\"member_count\""},
	Name:        whereHelperstring{field: "\"joined_guilds\".\"name\""},
	OwnerID:     whereHelperint64{field: "\"joined_guilds\".\"owner_id\""},
	Avatar:      whereHelperstring{field: "\"joined_guilds\".\"avatar\""},
}

// JoinedGuildRels is where relationship names are stored.
var JoinedGuildRels = struct {
}{}

// joinedGuildR is where relationships are stored.
type joinedGuildR struct {
}

// NewStruct creates a new relationship struct
func (*joinedGuildR) NewStruct() *joinedGuildR {
	return &joinedGuildR{}
}

// joinedGuildL is where Load methods for each relationship are stored.
type joinedGuildL struct{}

var (
	joinedGuildAllColumns            = []string{"id", "joined_at", "left_at", "member_count", "name", "owner_id", "avatar"}
	joinedGuildColumnsWithoutDefault = []string{"id", "joined_at", "left_at", "member_count", "name", "owner_id", "avatar"}
	joinedGuildColumnsWithDefault    = []string{}
	joinedGuildPrimaryKeyColumns     = []string{"id"}
)

type (
	// JoinedGuildSlice is an alias for a slice of pointers to JoinedGuild.
	// This should generally be used opposed to []JoinedGuild.
	JoinedGuildSlice []*JoinedGuild

	joinedGuildQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	joinedGuildType                 = reflect.TypeOf(&JoinedGuild{})
	joinedGuildMapping              = queries.MakeStructMapping(joinedGuildType)
	joinedGuildPrimaryKeyMapping, _ = queries.BindMapping(joinedGuildType, joinedGuildMapping, joinedGuildPrimaryKeyColumns)
	joinedGuildInsertCacheMut       sync.RWMutex
	joinedGuildInsertCache          = make(map[string]insertCache)
	joinedGuildUpdateCacheMut       sync.RWMutex
	joinedGuildUpdateCache          = make(map[string]updateCache)
	joinedGuildUpsertCacheMut       sync.RWMutex
	joinedGuildUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single joinedGuild record from the query using the global executor.
func (q joinedGuildQuery) OneG(ctx context.Context) (*JoinedGuild, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single joinedGuild record from the query.
func (q joinedGuildQuery) One(ctx context.Context, exec boil.ContextExecutor) (*JoinedGuild, error) {
	o := &JoinedGuild{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.WrapIf(err, "models: failed to execute a one query for joined_guilds")
	}

	return o, nil
}

// AllG returns all JoinedGuild records from the query using the global executor.
func (q joinedGuildQuery) AllG(ctx context.Context) (JoinedGuildSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all JoinedGuild records from the query.
func (q joinedGuildQuery) All(ctx context.Context, exec boil.ContextExecutor) (JoinedGuildSlice, error) {
	var o []*JoinedGuild

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.WrapIf(err, "models: failed to assign all query results to JoinedGuild slice")
	}

	return o, nil
}

// CountG returns the count of all JoinedGuild records in the query, and panics on error.
func (q joinedGuildQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all JoinedGuild records in the query.
func (q joinedGuildQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to count joined_guilds rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q joinedGuildQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q joinedGuildQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.WrapIf(err, "models: failed to check if joined_guilds exists")
	}

	return count > 0, nil
}

// JoinedGuilds retrieves all the records using an executor.
func JoinedGuilds(mods ...qm.QueryMod) joinedGuildQuery {
	mods = append(mods, qm.From("\"joined_guilds\""))
	return joinedGuildQuery{NewQuery(mods...)}
}

// FindJoinedGuildG retrieves a single record by ID.
func FindJoinedGuildG(ctx context.Context, iD int64, selectCols ...string) (*JoinedGuild, error) {
	return FindJoinedGuild(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindJoinedGuild retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindJoinedGuild(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*JoinedGuild, error) {
	joinedGuildObj := &JoinedGuild{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"joined_guilds\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, joinedGuildObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.WrapIf(err, "models: unable to select from joined_guilds")
	}

	return joinedGuildObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *JoinedGuild) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *JoinedGuild) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no joined_guilds provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(joinedGuildColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	joinedGuildInsertCacheMut.RLock()
	cache, cached := joinedGuildInsertCache[key]
	joinedGuildInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			joinedGuildAllColumns,
			joinedGuildColumnsWithDefault,
			joinedGuildColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(joinedGuildType, joinedGuildMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(joinedGuildType, joinedGuildMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"joined_guilds\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"joined_guilds\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.WrapIf(err, "models: unable to insert into joined_guilds")
	}

	if !cached {
		joinedGuildInsertCacheMut.Lock()
		joinedGuildInsertCache[key] = cache
		joinedGuildInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single JoinedGuild record using the global executor.
// See Update for more documentation.
func (o *JoinedGuild) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the JoinedGuild.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *JoinedGuild) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	joinedGuildUpdateCacheMut.RLock()
	cache, cached := joinedGuildUpdateCache[key]
	joinedGuildUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			joinedGuildAllColumns,
			joinedGuildPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update joined_guilds, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"joined_guilds\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, joinedGuildPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(joinedGuildType, joinedGuildMapping, append(wl, joinedGuildPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to update joined_guilds row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to get rows affected by update for joined_guilds")
	}

	if !cached {
		joinedGuildUpdateCacheMut.Lock()
		joinedGuildUpdateCache[key] = cache
		joinedGuildUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q joinedGuildQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q joinedGuildQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to update all for joined_guilds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to retrieve rows affected for joined_guilds")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o JoinedGuildSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o JoinedGuildSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), joinedGuildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"joined_guilds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, joinedGuildPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to update all in joinedGuild slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to retrieve rows affected all in update all joinedGuild")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *JoinedGuild) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *JoinedGuild) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no joined_guilds provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(joinedGuildColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	joinedGuildUpsertCacheMut.RLock()
	cache, cached := joinedGuildUpsertCache[key]
	joinedGuildUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			joinedGuildAllColumns,
			joinedGuildColumnsWithDefault,
			joinedGuildColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			joinedGuildAllColumns,
			joinedGuildPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert joined_guilds, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(joinedGuildPrimaryKeyColumns))
			copy(conflict, joinedGuildPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"joined_guilds\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(joinedGuildType, joinedGuildMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(joinedGuildType, joinedGuildMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.WrapIf(err, "models: unable to upsert joined_guilds")
	}

	if !cached {
		joinedGuildUpsertCacheMut.Lock()
		joinedGuildUpsertCache[key] = cache
		joinedGuildUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single JoinedGuild record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *JoinedGuild) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single JoinedGuild record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *JoinedGuild) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no JoinedGuild provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), joinedGuildPrimaryKeyMapping)
	sql := "DELETE FROM \"joined_guilds\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to delete from joined_guilds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to get rows affected by delete for joined_guilds")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q joinedGuildQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no joinedGuildQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to delete all from joined_guilds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to get rows affected by deleteall for joined_guilds")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o JoinedGuildSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o JoinedGuildSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), joinedGuildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"joined_guilds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, joinedGuildPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to delete all from joinedGuild slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to get rows affected by deleteall for joined_guilds")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *JoinedGuild) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no JoinedGuild provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *JoinedGuild) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindJoinedGuild(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JoinedGuildSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty JoinedGuildSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JoinedGuildSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := JoinedGuildSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), joinedGuildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"joined_guilds\".* FROM \"joined_guilds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, joinedGuildPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.WrapIf(err, "models: unable to reload all in JoinedGuildSlice")
	}

	*o = slice

	return nil
}

// JoinedGuildExistsG checks if the JoinedGuild row exists.
func JoinedGuildExistsG(ctx context.Context, iD int64) (bool, error) {
	return JoinedGuildExists(ctx, boil.GetContextDB(), iD)
}

// JoinedGuildExists checks if the JoinedGuild row exists.
func JoinedGuildExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"joined_guilds\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.WrapIf(err, "models: unable to check if joined_guilds exists")
	}

	return exists, nil
}
