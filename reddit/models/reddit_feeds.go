// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"emperror.dev/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// RedditFeed is an object representing the database table.
type RedditFeed struct {
	ID         int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	GuildID    int64  `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	ChannelID  int64  `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	Subreddit  string `boil:"subreddit" json:"subreddit" toml:"subreddit" yaml:"subreddit"`
	FilterNSFW int    `boil:"filter_nsfw" json:"filter_nsfw" toml:"filter_nsfw" yaml:"filter_nsfw"`
	MinUpvotes int    `boil:"min_upvotes" json:"min_upvotes" toml:"min_upvotes" yaml:"min_upvotes"`
	UseEmbeds  bool   `boil:"use_embeds" json:"use_embeds" toml:"use_embeds" yaml:"use_embeds"`
	Slow       bool   `boil:"slow" json:"slow" toml:"slow" yaml:"slow"`
	Disabled   bool   `boil:"disabled" json:"disabled" toml:"disabled" yaml:"disabled"`

	R *redditFeedR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L redditFeedL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RedditFeedColumns = struct {
	ID         string
	GuildID    string
	ChannelID  string
	Subreddit  string
	FilterNSFW string
	MinUpvotes string
	UseEmbeds  string
	Slow       string
	Disabled   string
}{
	ID:         "id",
	GuildID:    "guild_id",
	ChannelID:  "channel_id",
	Subreddit:  "subreddit",
	FilterNSFW: "filter_nsfw",
	MinUpvotes: "min_upvotes",
	UseEmbeds:  "use_embeds",
	Slow:       "slow",
	Disabled:   "disabled",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var RedditFeedWhere = struct {
	ID         whereHelperint64
	GuildID    whereHelperint64
	ChannelID  whereHelperint64
	Subreddit  whereHelperstring
	FilterNSFW whereHelperint
	MinUpvotes whereHelperint
	UseEmbeds  whereHelperbool
	Slow       whereHelperbool
	Disabled   whereHelperbool
}{
	ID:         whereHelperint64{field: "\"reddit_feeds\".\"id\""},
	GuildID:    whereHelperint64{field: "\"reddit_feeds\".\"guild_id\""},
	ChannelID:  whereHelperint64{field: "\"reddit_feeds\".\"channel_id\""},
	Subreddit:  whereHelperstring{field: "\"reddit_feeds\".\"subreddit\""},
	FilterNSFW: whereHelperint{field: "\"reddit_feeds\".\"filter_nsfw\""},
	MinUpvotes: whereHelperint{field: "\"reddit_feeds\".\"min_upvotes\""},
	UseEmbeds:  whereHelperbool{field: "\"reddit_feeds\".\"use_embeds\""},
	Slow:       whereHelperbool{field: "\"reddit_feeds\".\"slow\""},
	Disabled:   whereHelperbool{field: "\"reddit_feeds\".\"disabled\""},
}

// RedditFeedRels is where relationship names are stored.
var RedditFeedRels = struct {
}{}

// redditFeedR is where relationships are stored.
type redditFeedR struct {
}

// NewStruct creates a new relationship struct
func (*redditFeedR) NewStruct() *redditFeedR {
	return &redditFeedR{}
}

// redditFeedL is where Load methods for each relationship are stored.
type redditFeedL struct{}

var (
	redditFeedAllColumns            = []string{"id", "guild_id", "channel_id", "subreddit", "filter_nsfw", "min_upvotes", "use_embeds", "slow", "disabled"}
	redditFeedColumnsWithoutDefault = []string{"guild_id", "channel_id", "subreddit", "filter_nsfw", "min_upvotes", "use_embeds", "slow"}
	redditFeedColumnsWithDefault    = []string{"id", "disabled"}
	redditFeedPrimaryKeyColumns     = []string{"id"}
)

type (
	// RedditFeedSlice is an alias for a slice of pointers to RedditFeed.
	// This should generally be used opposed to []RedditFeed.
	RedditFeedSlice []*RedditFeed

	redditFeedQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	redditFeedType                 = reflect.TypeOf(&RedditFeed{})
	redditFeedMapping              = queries.MakeStructMapping(redditFeedType)
	redditFeedPrimaryKeyMapping, _ = queries.BindMapping(redditFeedType, redditFeedMapping, redditFeedPrimaryKeyColumns)
	redditFeedInsertCacheMut       sync.RWMutex
	redditFeedInsertCache          = make(map[string]insertCache)
	redditFeedUpdateCacheMut       sync.RWMutex
	redditFeedUpdateCache          = make(map[string]updateCache)
	redditFeedUpsertCacheMut       sync.RWMutex
	redditFeedUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single redditFeed record from the query using the global executor.
func (q redditFeedQuery) OneG(ctx context.Context) (*RedditFeed, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single redditFeed record from the query.
func (q redditFeedQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RedditFeed, error) {
	o := &RedditFeed{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.WrapIf(err, "models: failed to execute a one query for reddit_feeds")
	}

	return o, nil
}

// AllG returns all RedditFeed records from the query using the global executor.
func (q redditFeedQuery) AllG(ctx context.Context) (RedditFeedSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all RedditFeed records from the query.
func (q redditFeedQuery) All(ctx context.Context, exec boil.ContextExecutor) (RedditFeedSlice, error) {
	var o []*RedditFeed

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.WrapIf(err, "models: failed to assign all query results to RedditFeed slice")
	}

	return o, nil
}

// CountG returns the count of all RedditFeed records in the query, and panics on error.
func (q redditFeedQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all RedditFeed records in the query.
func (q redditFeedQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to count reddit_feeds rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q redditFeedQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q redditFeedQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.WrapIf(err, "models: failed to check if reddit_feeds exists")
	}

	return count > 0, nil
}

// RedditFeeds retrieves all the records using an executor.
func RedditFeeds(mods ...qm.QueryMod) redditFeedQuery {
	mods = append(mods, qm.From("\"reddit_feeds\""))
	return redditFeedQuery{NewQuery(mods...)}
}

// FindRedditFeedG retrieves a single record by ID.
func FindRedditFeedG(ctx context.Context, iD int64, selectCols ...string) (*RedditFeed, error) {
	return FindRedditFeed(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRedditFeed retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRedditFeed(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*RedditFeed, error) {
	redditFeedObj := &RedditFeed{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"reddit_feeds\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, redditFeedObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.WrapIf(err, "models: unable to select from reddit_feeds")
	}

	return redditFeedObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RedditFeed) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RedditFeed) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reddit_feeds provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(redditFeedColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	redditFeedInsertCacheMut.RLock()
	cache, cached := redditFeedInsertCache[key]
	redditFeedInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			redditFeedAllColumns,
			redditFeedColumnsWithDefault,
			redditFeedColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(redditFeedType, redditFeedMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(redditFeedType, redditFeedMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"reddit_feeds\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"reddit_feeds\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.WrapIf(err, "models: unable to insert into reddit_feeds")
	}

	if !cached {
		redditFeedInsertCacheMut.Lock()
		redditFeedInsertCache[key] = cache
		redditFeedInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single RedditFeed record using the global executor.
// See Update for more documentation.
func (o *RedditFeed) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the RedditFeed.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RedditFeed) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	redditFeedUpdateCacheMut.RLock()
	cache, cached := redditFeedUpdateCache[key]
	redditFeedUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			redditFeedAllColumns,
			redditFeedPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update reddit_feeds, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"reddit_feeds\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, redditFeedPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(redditFeedType, redditFeedMapping, append(wl, redditFeedPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to update reddit_feeds row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to get rows affected by update for reddit_feeds")
	}

	if !cached {
		redditFeedUpdateCacheMut.Lock()
		redditFeedUpdateCache[key] = cache
		redditFeedUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q redditFeedQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q redditFeedQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to update all for reddit_feeds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to retrieve rows affected for reddit_feeds")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RedditFeedSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RedditFeedSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), redditFeedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"reddit_feeds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, redditFeedPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to update all in redditFeed slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to retrieve rows affected all in update all redditFeed")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RedditFeed) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RedditFeed) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reddit_feeds provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(redditFeedColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	redditFeedUpsertCacheMut.RLock()
	cache, cached := redditFeedUpsertCache[key]
	redditFeedUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			redditFeedAllColumns,
			redditFeedColumnsWithDefault,
			redditFeedColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			redditFeedAllColumns,
			redditFeedPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert reddit_feeds, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(redditFeedPrimaryKeyColumns))
			copy(conflict, redditFeedPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"reddit_feeds\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(redditFeedType, redditFeedMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(redditFeedType, redditFeedMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.WrapIf(err, "models: unable to upsert reddit_feeds")
	}

	if !cached {
		redditFeedUpsertCacheMut.Lock()
		redditFeedUpsertCache[key] = cache
		redditFeedUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single RedditFeed record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RedditFeed) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single RedditFeed record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RedditFeed) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RedditFeed provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), redditFeedPrimaryKeyMapping)
	sql := "DELETE FROM \"reddit_feeds\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to delete from reddit_feeds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to get rows affected by delete for reddit_feeds")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q redditFeedQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no redditFeedQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to delete all from reddit_feeds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to get rows affected by deleteall for reddit_feeds")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RedditFeedSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RedditFeedSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), redditFeedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"reddit_feeds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, redditFeedPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to delete all from redditFeed slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to get rows affected by deleteall for reddit_feeds")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RedditFeed) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no RedditFeed provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RedditFeed) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRedditFeed(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RedditFeedSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty RedditFeedSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RedditFeedSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RedditFeedSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), redditFeedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"reddit_feeds\".* FROM \"reddit_feeds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, redditFeedPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.WrapIf(err, "models: unable to reload all in RedditFeedSlice")
	}

	*o = slice

	return nil
}

// RedditFeedExistsG checks if the RedditFeed row exists.
func RedditFeedExistsG(ctx context.Context, iD int64) (bool, error) {
	return RedditFeedExists(ctx, boil.GetContextDB(), iD)
}

// RedditFeedExists checks if the RedditFeed row exists.
func RedditFeedExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"reddit_feeds\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.WrapIf(err, "models: unable to check if reddit_feeds exists")
	}

	return exists, nil
}
