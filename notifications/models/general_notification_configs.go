// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GeneralNotificationConfig is an object representing the database table.
type GeneralNotificationConfig struct {
	GuildID           int64       `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	CreatedAt         time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	JoinServerEnabled null.Bool   `boil:"join_server_enabled" json:"join_server_enabled,omitempty" toml:"join_server_enabled" yaml:"join_server_enabled,omitempty"`
	JoinServerChannel null.String `boil:"join_server_channel" json:"join_server_channel,omitempty" toml:"join_server_channel" yaml:"join_server_channel,omitempty"`
	JoinServerMsgs    null.String `boil:"join_server_msgs" json:"join_server_msgs,omitempty" toml:"join_server_msgs" yaml:"join_server_msgs,omitempty"`
	JoinDMEnabled     null.Bool   `boil:"join_dm_enabled" json:"join_dm_enabled,omitempty" toml:"join_dm_enabled" yaml:"join_dm_enabled,omitempty"`
	JoinDMMsg         null.String `boil:"join_dm_msg" json:"join_dm_msg,omitempty" toml:"join_dm_msg" yaml:"join_dm_msg,omitempty"`
	LeaveEnabled      null.Bool   `boil:"leave_enabled" json:"leave_enabled,omitempty" toml:"leave_enabled" yaml:"leave_enabled,omitempty"`
	LeaveChannel      null.String `boil:"leave_channel" json:"leave_channel,omitempty" toml:"leave_channel" yaml:"leave_channel,omitempty"`
	LeaveMsgs         null.String `boil:"leave_msgs" json:"leave_msgs,omitempty" toml:"leave_msgs" yaml:"leave_msgs,omitempty"`
	TopicEnabled      null.Bool   `boil:"topic_enabled" json:"topic_enabled,omitempty" toml:"topic_enabled" yaml:"topic_enabled,omitempty"`
	TopicChannel      null.String `boil:"topic_channel" json:"topic_channel,omitempty" toml:"topic_channel" yaml:"topic_channel,omitempty"`
	CensorInvites     null.Bool   `boil:"censor_invites" json:"censor_invites,omitempty" toml:"censor_invites" yaml:"censor_invites,omitempty"`

	R *generalNotificationConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L generalNotificationConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GeneralNotificationConfigColumns = struct {
	GuildID           string
	CreatedAt         string
	UpdatedAt         string
	JoinServerEnabled string
	JoinServerChannel string
	JoinServerMsgs    string
	JoinDMEnabled     string
	JoinDMMsg         string
	LeaveEnabled      string
	LeaveChannel      string
	LeaveMsgs         string
	TopicEnabled      string
	TopicChannel      string
	CensorInvites     string
}{
	GuildID:           "guild_id",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	JoinServerEnabled: "join_server_enabled",
	JoinServerChannel: "join_server_channel",
	JoinServerMsgs:    "join_server_msgs",
	JoinDMEnabled:     "join_dm_enabled",
	JoinDMMsg:         "join_dm_msg",
	LeaveEnabled:      "leave_enabled",
	LeaveChannel:      "leave_channel",
	LeaveMsgs:         "leave_msgs",
	TopicEnabled:      "topic_enabled",
	TopicChannel:      "topic_channel",
	CensorInvites:     "censor_invites",
}

var GeneralNotificationConfigTableColumns = struct {
	GuildID           string
	CreatedAt         string
	UpdatedAt         string
	JoinServerEnabled string
	JoinServerChannel string
	JoinServerMsgs    string
	JoinDMEnabled     string
	JoinDMMsg         string
	LeaveEnabled      string
	LeaveChannel      string
	LeaveMsgs         string
	TopicEnabled      string
	TopicChannel      string
	CensorInvites     string
}{
	GuildID:           "general_notification_configs.guild_id",
	CreatedAt:         "general_notification_configs.created_at",
	UpdatedAt:         "general_notification_configs.updated_at",
	JoinServerEnabled: "general_notification_configs.join_server_enabled",
	JoinServerChannel: "general_notification_configs.join_server_channel",
	JoinServerMsgs:    "general_notification_configs.join_server_msgs",
	JoinDMEnabled:     "general_notification_configs.join_dm_enabled",
	JoinDMMsg:         "general_notification_configs.join_dm_msg",
	LeaveEnabled:      "general_notification_configs.leave_enabled",
	LeaveChannel:      "general_notification_configs.leave_channel",
	LeaveMsgs:         "general_notification_configs.leave_msgs",
	TopicEnabled:      "general_notification_configs.topic_enabled",
	TopicChannel:      "general_notification_configs.topic_channel",
	CensorInvites:     "general_notification_configs.censor_invites",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var GeneralNotificationConfigWhere = struct {
	GuildID           whereHelperint64
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
	JoinServerEnabled whereHelpernull_Bool
	JoinServerChannel whereHelpernull_String
	JoinServerMsgs    whereHelpernull_String
	JoinDMEnabled     whereHelpernull_Bool
	JoinDMMsg         whereHelpernull_String
	LeaveEnabled      whereHelpernull_Bool
	LeaveChannel      whereHelpernull_String
	LeaveMsgs         whereHelpernull_String
	TopicEnabled      whereHelpernull_Bool
	TopicChannel      whereHelpernull_String
	CensorInvites     whereHelpernull_Bool
}{
	GuildID:           whereHelperint64{field: "\"general_notification_configs\".\"guild_id\""},
	CreatedAt:         whereHelpertime_Time{field: "\"general_notification_configs\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"general_notification_configs\".\"updated_at\""},
	JoinServerEnabled: whereHelpernull_Bool{field: "\"general_notification_configs\".\"join_server_enabled\""},
	JoinServerChannel: whereHelpernull_String{field: "\"general_notification_configs\".\"join_server_channel\""},
	JoinServerMsgs:    whereHelpernull_String{field: "\"general_notification_configs\".\"join_server_msgs\""},
	JoinDMEnabled:     whereHelpernull_Bool{field: "\"general_notification_configs\".\"join_dm_enabled\""},
	JoinDMMsg:         whereHelpernull_String{field: "\"general_notification_configs\".\"join_dm_msg\""},
	LeaveEnabled:      whereHelpernull_Bool{field: "\"general_notification_configs\".\"leave_enabled\""},
	LeaveChannel:      whereHelpernull_String{field: "\"general_notification_configs\".\"leave_channel\""},
	LeaveMsgs:         whereHelpernull_String{field: "\"general_notification_configs\".\"leave_msgs\""},
	TopicEnabled:      whereHelpernull_Bool{field: "\"general_notification_configs\".\"topic_enabled\""},
	TopicChannel:      whereHelpernull_String{field: "\"general_notification_configs\".\"topic_channel\""},
	CensorInvites:     whereHelpernull_Bool{field: "\"general_notification_configs\".\"censor_invites\""},
}

// GeneralNotificationConfigRels is where relationship names are stored.
var GeneralNotificationConfigRels = struct {
}{}

// generalNotificationConfigR is where relationships are stored.
type generalNotificationConfigR struct {
}

// NewStruct creates a new relationship struct
func (*generalNotificationConfigR) NewStruct() *generalNotificationConfigR {
	return &generalNotificationConfigR{}
}

// generalNotificationConfigL is where Load methods for each relationship are stored.
type generalNotificationConfigL struct{}

var (
	generalNotificationConfigAllColumns            = []string{"guild_id", "created_at", "updated_at", "join_server_enabled", "join_server_channel", "join_server_msgs", "join_dm_enabled", "join_dm_msg", "leave_enabled", "leave_channel", "leave_msgs", "topic_enabled", "topic_channel", "censor_invites"}
	generalNotificationConfigColumnsWithoutDefault = []string{"guild_id", "created_at", "updated_at"}
	generalNotificationConfigColumnsWithDefault    = []string{"join_server_enabled", "join_server_channel", "join_server_msgs", "join_dm_enabled", "join_dm_msg", "leave_enabled", "leave_channel", "leave_msgs", "topic_enabled", "topic_channel", "censor_invites"}
	generalNotificationConfigPrimaryKeyColumns     = []string{"guild_id"}
	generalNotificationConfigGeneratedColumns      = []string{}
)

type (
	// GeneralNotificationConfigSlice is an alias for a slice of pointers to GeneralNotificationConfig.
	// This should almost always be used instead of []GeneralNotificationConfig.
	GeneralNotificationConfigSlice []*GeneralNotificationConfig

	generalNotificationConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	generalNotificationConfigType                 = reflect.TypeOf(&GeneralNotificationConfig{})
	generalNotificationConfigMapping              = queries.MakeStructMapping(generalNotificationConfigType)
	generalNotificationConfigPrimaryKeyMapping, _ = queries.BindMapping(generalNotificationConfigType, generalNotificationConfigMapping, generalNotificationConfigPrimaryKeyColumns)
	generalNotificationConfigInsertCacheMut       sync.RWMutex
	generalNotificationConfigInsertCache          = make(map[string]insertCache)
	generalNotificationConfigUpdateCacheMut       sync.RWMutex
	generalNotificationConfigUpdateCache          = make(map[string]updateCache)
	generalNotificationConfigUpsertCacheMut       sync.RWMutex
	generalNotificationConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single generalNotificationConfig record from the query using the global executor.
func (q generalNotificationConfigQuery) OneG(ctx context.Context) (*GeneralNotificationConfig, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single generalNotificationConfig record from the query.
func (q generalNotificationConfigQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GeneralNotificationConfig, error) {
	o := &GeneralNotificationConfig{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for general_notification_configs")
	}

	return o, nil
}

// AllG returns all GeneralNotificationConfig records from the query using the global executor.
func (q generalNotificationConfigQuery) AllG(ctx context.Context) (GeneralNotificationConfigSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all GeneralNotificationConfig records from the query.
func (q generalNotificationConfigQuery) All(ctx context.Context, exec boil.ContextExecutor) (GeneralNotificationConfigSlice, error) {
	var o []*GeneralNotificationConfig

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GeneralNotificationConfig slice")
	}

	return o, nil
}

// CountG returns the count of all GeneralNotificationConfig records in the query using the global executor
func (q generalNotificationConfigQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all GeneralNotificationConfig records in the query.
func (q generalNotificationConfigQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count general_notification_configs rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q generalNotificationConfigQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q generalNotificationConfigQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if general_notification_configs exists")
	}

	return count > 0, nil
}

// GeneralNotificationConfigs retrieves all the records using an executor.
func GeneralNotificationConfigs(mods ...qm.QueryMod) generalNotificationConfigQuery {
	mods = append(mods, qm.From("\"general_notification_configs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"general_notification_configs\".*"})
	}

	return generalNotificationConfigQuery{q}
}

// FindGeneralNotificationConfigG retrieves a single record by ID.
func FindGeneralNotificationConfigG(ctx context.Context, guildID int64, selectCols ...string) (*GeneralNotificationConfig, error) {
	return FindGeneralNotificationConfig(ctx, boil.GetContextDB(), guildID, selectCols...)
}

// FindGeneralNotificationConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGeneralNotificationConfig(ctx context.Context, exec boil.ContextExecutor, guildID int64, selectCols ...string) (*GeneralNotificationConfig, error) {
	generalNotificationConfigObj := &GeneralNotificationConfig{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"general_notification_configs\" where \"guild_id\"=$1", sel,
	)

	q := queries.Raw(query, guildID)

	err := q.Bind(ctx, exec, generalNotificationConfigObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from general_notification_configs")
	}

	return generalNotificationConfigObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *GeneralNotificationConfig) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GeneralNotificationConfig) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no general_notification_configs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(generalNotificationConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	generalNotificationConfigInsertCacheMut.RLock()
	cache, cached := generalNotificationConfigInsertCache[key]
	generalNotificationConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			generalNotificationConfigAllColumns,
			generalNotificationConfigColumnsWithDefault,
			generalNotificationConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(generalNotificationConfigType, generalNotificationConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(generalNotificationConfigType, generalNotificationConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"general_notification_configs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"general_notification_configs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into general_notification_configs")
	}

	if !cached {
		generalNotificationConfigInsertCacheMut.Lock()
		generalNotificationConfigInsertCache[key] = cache
		generalNotificationConfigInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single GeneralNotificationConfig record using the global executor.
// See Update for more documentation.
func (o *GeneralNotificationConfig) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the GeneralNotificationConfig.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GeneralNotificationConfig) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	generalNotificationConfigUpdateCacheMut.RLock()
	cache, cached := generalNotificationConfigUpdateCache[key]
	generalNotificationConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			generalNotificationConfigAllColumns,
			generalNotificationConfigPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update general_notification_configs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"general_notification_configs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, generalNotificationConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(generalNotificationConfigType, generalNotificationConfigMapping, append(wl, generalNotificationConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update general_notification_configs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for general_notification_configs")
	}

	if !cached {
		generalNotificationConfigUpdateCacheMut.Lock()
		generalNotificationConfigUpdateCache[key] = cache
		generalNotificationConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q generalNotificationConfigQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q generalNotificationConfigQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for general_notification_configs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for general_notification_configs")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o GeneralNotificationConfigSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GeneralNotificationConfigSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), generalNotificationConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"general_notification_configs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, generalNotificationConfigPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in generalNotificationConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all generalNotificationConfig")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *GeneralNotificationConfig) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GeneralNotificationConfig) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no general_notification_configs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(generalNotificationConfigColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	generalNotificationConfigUpsertCacheMut.RLock()
	cache, cached := generalNotificationConfigUpsertCache[key]
	generalNotificationConfigUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			generalNotificationConfigAllColumns,
			generalNotificationConfigColumnsWithDefault,
			generalNotificationConfigColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			generalNotificationConfigAllColumns,
			generalNotificationConfigPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert general_notification_configs, could not build update column list")
		}

		ret := strmangle.SetComplement(generalNotificationConfigAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(generalNotificationConfigPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert general_notification_configs, could not build conflict column list")
			}

			conflict = make([]string, len(generalNotificationConfigPrimaryKeyColumns))
			copy(conflict, generalNotificationConfigPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"general_notification_configs\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(generalNotificationConfigType, generalNotificationConfigMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(generalNotificationConfigType, generalNotificationConfigMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert general_notification_configs")
	}

	if !cached {
		generalNotificationConfigUpsertCacheMut.Lock()
		generalNotificationConfigUpsertCache[key] = cache
		generalNotificationConfigUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single GeneralNotificationConfig record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *GeneralNotificationConfig) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single GeneralNotificationConfig record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GeneralNotificationConfig) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GeneralNotificationConfig provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), generalNotificationConfigPrimaryKeyMapping)
	sql := "DELETE FROM \"general_notification_configs\" WHERE \"guild_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from general_notification_configs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for general_notification_configs")
	}

	return rowsAff, nil
}

func (q generalNotificationConfigQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q generalNotificationConfigQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no generalNotificationConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from general_notification_configs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for general_notification_configs")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o GeneralNotificationConfigSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GeneralNotificationConfigSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), generalNotificationConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"general_notification_configs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, generalNotificationConfigPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from generalNotificationConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for general_notification_configs")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *GeneralNotificationConfig) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no GeneralNotificationConfig provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GeneralNotificationConfig) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGeneralNotificationConfig(ctx, exec, o.GuildID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GeneralNotificationConfigSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty GeneralNotificationConfigSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GeneralNotificationConfigSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GeneralNotificationConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), generalNotificationConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"general_notification_configs\".* FROM \"general_notification_configs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, generalNotificationConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GeneralNotificationConfigSlice")
	}

	*o = slice

	return nil
}

// GeneralNotificationConfigExistsG checks if the GeneralNotificationConfig row exists.
func GeneralNotificationConfigExistsG(ctx context.Context, guildID int64) (bool, error) {
	return GeneralNotificationConfigExists(ctx, boil.GetContextDB(), guildID)
}

// GeneralNotificationConfigExists checks if the GeneralNotificationConfig row exists.
func GeneralNotificationConfigExists(ctx context.Context, exec boil.ContextExecutor, guildID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"general_notification_configs\" where \"guild_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, guildID)
	}
	row := exec.QueryRowContext(ctx, sql, guildID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if general_notification_configs exists")
	}

	return exists, nil
}

// Exists checks if the GeneralNotificationConfig row exists.
func (o *GeneralNotificationConfig) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GeneralNotificationConfigExists(ctx, exec, o.GuildID)
}
