// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ReputationRole is an object representing the database table.
type ReputationRole struct {
	ID           int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	GuildID      int64 `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	RepThreshold int64 `boil:"rep_threshold" json:"rep_threshold" toml:"rep_threshold" yaml:"rep_threshold"`
	Role         int64 `boil:"role" json:"role" toml:"role" yaml:"role"`

	R *reputationRoleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reputationRoleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReputationRoleColumns = struct {
	ID           string
	GuildID      string
	RepThreshold string
	Role         string
}{
	ID:           "id",
	GuildID:      "guild_id",
	RepThreshold: "rep_threshold",
	Role:         "role",
}

var ReputationRoleTableColumns = struct {
	ID           string
	GuildID      string
	RepThreshold string
	Role         string
}{
	ID:           "reputation_roles.id",
	GuildID:      "reputation_roles.guild_id",
	RepThreshold: "reputation_roles.rep_threshold",
	Role:         "reputation_roles.role",
}

// Generated where

var ReputationRoleWhere = struct {
	ID           whereHelperint64
	GuildID      whereHelperint64
	RepThreshold whereHelperint64
	Role         whereHelperint64
}{
	ID:           whereHelperint64{field: "\"reputation_roles\".\"id\""},
	GuildID:      whereHelperint64{field: "\"reputation_roles\".\"guild_id\""},
	RepThreshold: whereHelperint64{field: "\"reputation_roles\".\"rep_threshold\""},
	Role:         whereHelperint64{field: "\"reputation_roles\".\"role\""},
}

// ReputationRoleRels is where relationship names are stored.
var ReputationRoleRels = struct {
}{}

// reputationRoleR is where relationships are stored.
type reputationRoleR struct {
}

// NewStruct creates a new relationship struct
func (*reputationRoleR) NewStruct() *reputationRoleR {
	return &reputationRoleR{}
}

// reputationRoleL is where Load methods for each relationship are stored.
type reputationRoleL struct{}

var (
	reputationRoleAllColumns            = []string{"id", "guild_id", "rep_threshold", "role"}
	reputationRoleColumnsWithoutDefault = []string{"guild_id", "rep_threshold", "role"}
	reputationRoleColumnsWithDefault    = []string{"id"}
	reputationRolePrimaryKeyColumns     = []string{"id"}
	reputationRoleGeneratedColumns      = []string{}
)

type (
	// ReputationRoleSlice is an alias for a slice of pointers to ReputationRole.
	// This should almost always be used instead of []ReputationRole.
	ReputationRoleSlice []*ReputationRole

	reputationRoleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reputationRoleType                 = reflect.TypeOf(&ReputationRole{})
	reputationRoleMapping              = queries.MakeStructMapping(reputationRoleType)
	reputationRolePrimaryKeyMapping, _ = queries.BindMapping(reputationRoleType, reputationRoleMapping, reputationRolePrimaryKeyColumns)
	reputationRoleInsertCacheMut       sync.RWMutex
	reputationRoleInsertCache          = make(map[string]insertCache)
	reputationRoleUpdateCacheMut       sync.RWMutex
	reputationRoleUpdateCache          = make(map[string]updateCache)
	reputationRoleUpsertCacheMut       sync.RWMutex
	reputationRoleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single reputationRole record from the query using the global executor.
func (q reputationRoleQuery) OneG(ctx context.Context) (*ReputationRole, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single reputationRole record from the query.
func (q reputationRoleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReputationRole, error) {
	o := &ReputationRole{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for reputation_roles")
	}

	return o, nil
}

// AllG returns all ReputationRole records from the query using the global executor.
func (q reputationRoleQuery) AllG(ctx context.Context) (ReputationRoleSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ReputationRole records from the query.
func (q reputationRoleQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReputationRoleSlice, error) {
	var o []*ReputationRole

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ReputationRole slice")
	}

	return o, nil
}

// CountG returns the count of all ReputationRole records in the query using the global executor
func (q reputationRoleQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ReputationRole records in the query.
func (q reputationRoleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count reputation_roles rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q reputationRoleQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q reputationRoleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if reputation_roles exists")
	}

	return count > 0, nil
}

// ReputationRoles retrieves all the records using an executor.
func ReputationRoles(mods ...qm.QueryMod) reputationRoleQuery {
	mods = append(mods, qm.From("\"reputation_roles\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"reputation_roles\".*"})
	}

	return reputationRoleQuery{q}
}

// FindReputationRoleG retrieves a single record by ID.
func FindReputationRoleG(ctx context.Context, iD int64, selectCols ...string) (*ReputationRole, error) {
	return FindReputationRole(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindReputationRole retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReputationRole(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ReputationRole, error) {
	reputationRoleObj := &ReputationRole{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"reputation_roles\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, reputationRoleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from reputation_roles")
	}

	return reputationRoleObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ReputationRole) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReputationRole) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reputation_roles provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(reputationRoleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reputationRoleInsertCacheMut.RLock()
	cache, cached := reputationRoleInsertCache[key]
	reputationRoleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reputationRoleAllColumns,
			reputationRoleColumnsWithDefault,
			reputationRoleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reputationRoleType, reputationRoleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reputationRoleType, reputationRoleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"reputation_roles\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"reputation_roles\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into reputation_roles")
	}

	if !cached {
		reputationRoleInsertCacheMut.Lock()
		reputationRoleInsertCache[key] = cache
		reputationRoleInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single ReputationRole record using the global executor.
// See Update for more documentation.
func (o *ReputationRole) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ReputationRole.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReputationRole) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	reputationRoleUpdateCacheMut.RLock()
	cache, cached := reputationRoleUpdateCache[key]
	reputationRoleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reputationRoleAllColumns,
			reputationRolePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update reputation_roles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"reputation_roles\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, reputationRolePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reputationRoleType, reputationRoleMapping, append(wl, reputationRolePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update reputation_roles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for reputation_roles")
	}

	if !cached {
		reputationRoleUpdateCacheMut.Lock()
		reputationRoleUpdateCache[key] = cache
		reputationRoleUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q reputationRoleQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q reputationRoleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for reputation_roles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for reputation_roles")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ReputationRoleSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReputationRoleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reputationRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"reputation_roles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, reputationRolePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reputationRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reputationRole")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ReputationRole) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReputationRole) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no reputation_roles provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(reputationRoleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reputationRoleUpsertCacheMut.RLock()
	cache, cached := reputationRoleUpsertCache[key]
	reputationRoleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			reputationRoleAllColumns,
			reputationRoleColumnsWithDefault,
			reputationRoleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			reputationRoleAllColumns,
			reputationRolePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert reputation_roles, could not build update column list")
		}

		ret := strmangle.SetComplement(reputationRoleAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(reputationRolePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert reputation_roles, could not build conflict column list")
			}

			conflict = make([]string, len(reputationRolePrimaryKeyColumns))
			copy(conflict, reputationRolePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"reputation_roles\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(reputationRoleType, reputationRoleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reputationRoleType, reputationRoleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert reputation_roles")
	}

	if !cached {
		reputationRoleUpsertCacheMut.Lock()
		reputationRoleUpsertCache[key] = cache
		reputationRoleUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single ReputationRole record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ReputationRole) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ReputationRole record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReputationRole) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ReputationRole provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reputationRolePrimaryKeyMapping)
	sql := "DELETE FROM \"reputation_roles\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from reputation_roles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for reputation_roles")
	}

	return rowsAff, nil
}

func (q reputationRoleQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q reputationRoleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reputationRoleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reputation_roles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reputation_roles")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ReputationRoleSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReputationRoleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reputationRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"reputation_roles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reputationRolePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reputationRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reputation_roles")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ReputationRole) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ReputationRole provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReputationRole) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReputationRole(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReputationRoleSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ReputationRoleSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReputationRoleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReputationRoleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reputationRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"reputation_roles\".* FROM \"reputation_roles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reputationRolePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReputationRoleSlice")
	}

	*o = slice

	return nil
}

// ReputationRoleExistsG checks if the ReputationRole row exists.
func ReputationRoleExistsG(ctx context.Context, iD int64) (bool, error) {
	return ReputationRoleExists(ctx, boil.GetContextDB(), iD)
}

// ReputationRoleExists checks if the ReputationRole row exists.
func ReputationRoleExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"reputation_roles\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if reputation_roles exists")
	}

	return exists, nil
}

// Exists checks if the ReputationRole row exists.
func (o *ReputationRole) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ReputationRoleExists(ctx, exec, o.ID)
}
