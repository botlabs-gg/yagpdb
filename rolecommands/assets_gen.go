// Code generated by "esc -o assets_gen.go -pkg rolecommands -ignore .go assets/"; DO NOT EDIT.

package rolecommands

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/help.md": {
		local:   "assets/help.md",
		size:    1952,
		modtime: 1521566047,
		compressed: `
H4sIAAAAAAAC/2xVTW/jRgy961e8bA5tAcdAmlsuxfYD6SWLxSaXvZmWKGk2o6E6M7Kif1+QIzmJsTfB
FvkeH9+jnti3oJRcF+joGVE8J/wq0Z5QyzBQaBIoIfe8gCKjJu+5gQTk3iUcJf8GZ/+Djs67vNhz506M
RaaYFKM0bqMMIDTcusANvEt5p71lHCVxgyxoXOQ6+0XrXeggU8anRwrUMb5pk0/7qvr++eHr33+CfBL0
lEDwkiEtZMxOQlJc1BQwJdamkVOOrs6g0KCLMo2YRmNpvPZVdX19jeee0bi25cghY5CGE/h19KRkqwq3
e3yRwPd41rn1fzTCCUFyb1RzzxG5p4C65/oF1JELKRc5FDUh8n+Ti9wYE9cF0WcjsftIWiFaiaVOu0+j
qflxMfsKv+/x5ELnjRcv1kGCX9DTiXFb3nfhjcS+wt0ej5PPbtSq7yts4sL00QU3TIMxfKRXe5Ztg4SB
hyNHqzCED61RlPznlYbRM6ZEHd9XT7TYcPY+IXE8ccTsco87tFSXnSneTCFjZNHiLDiqpcpjMalCuQiZ
w1aHuedQzPlDXNjjuaeckJwR4CBT14O8x8wFXz0mcOm+qnCDvyJTZpvgroz47te7ixToPnIvabVNVX2R
GXziuEhgU+SN5ZDYn0ywleiVrieyRoVQy6T0XEoTp6KEbTxxNmMq6/tiuW09a+tzogaJXMx2u0GYGb4W
9bSkjcx+wY9pGHHkPDOfZUtV9Sxo3atyTYwxytHzkFQmLa2LAoTAMx4sMStLLs4/FNMdbG1vY2OMfHIy
pQvpsijXvNnkQdtfQfVbAd9b9qzYvzLbnzMjiT+xjaJhuJxGocMfZ624XDPlc/hWEvcuCcbhoFpnF7od
gszFQDWFXzIiD3LaTuF7d+9s1u3NQnag159lbIcned/TVkBRJhUrLLq7K8uK3TQ8cpiq6nm9Rxg4TBjo
RfEzRknJrSkwzDUfq+iF53EBNY1KE/msiVhck4Zwb/vWiE8j6A1mV64ge8rbIbKLuoavacpVpm0s1dmy
7MJJXorE65Jx0HLjnnu+sYKbQAPfqO8PVfW5zRr73tW9tZid94qS6cUiHC2r2rHEYIxSc9LrrMocJW/X
M2EoH4R1uISR41AuSOLQXP6+bqbuKQT26wXQvO1AGZ4p5TXbK/QOZFylXem6XNiaSwOrVEyXOCvR8n2x
kCih8lXYvkC2mJS1F42jX0owLtx23s7+/wAAAP//K0AiP6AHAAA=
`,
	},

	"/assets/schema.sql": {
		local:   "assets/schema.sql",
		size:    1650,
		modtime: 1521566047,
		compressed: `
H4sIAAAAAAAC/6RT0Y6bMBB8xl/hRyLlD+6JI74KNSEVodKdqsryhT26FfZSsNWoX19BQ0JyTkJ6b5Zn
7N2dmX0Un5L0gbE4E1EueB49LgVPnni6zrl4Tjb5hjdUgSwbcnXLQxZgwV+xbKFBVfW09Otyyb9kySrK
Xvhn8TJnQemwKuQ/Jhp7oM1ZYJQGbmF3ctnAL4cNyK5Uu3/07fucBVga8t1rKsDzuXaVxboCqdXuKozG
A7doygqkcpakpbI709sbfyWqQBkPc2ibDLxjsdlR1SRdiOfLqspBrh1fp2MgHIDZBIe2pLUyxWSPtg0o
C4VUllvU0Fqla/tnPKWrixuMu30+zDZ6lIknkYk0FieihFjMOjkWYilywTfi5BNPwbszVFOLFuldEiY5
N6jt8W6A7nJPg3G9dRraVpXgEXX6jm1/KGOg8oP020BzEZL7+t7UW2V9yhvYWTke/Yq5B3Gu2vt/GYmj
TRwtBJuqt6S683/yxnxsxH13cxaApp/od8AZ3FIBsqf416fv3JOO8zb6RIXHON1Q6mLSx0qdu3wM/ZgV
nrG6Kixer1ZJ/sDY3wAAAP//TpIqiXIGAAA=
`,
	},

	"/assets/settings.html": {
		local:   "assets/settings.html",
		size:    16871,
		modtime: 1521566047,
		compressed: `
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
x2qFq2G5IYH1yVrhqP/8bwAAAP//Nbf3yOdBAAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
