// Code generated by "esc -o assets_gen.go -pkg rolecommands -ignore .go assets/"; DO NOT EDIT.

package rolecommands

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/help.md": {
		local:   "assets/help.md",
		size:    1952,
		modtime: 1517841006,
		compressed: `
H4sIAAAAAAAC/2xVTW/jRgy961e8bA5tAcdAmlsuxfYD6SWLxSaXvZmWKGk2o6E6M7Kif1+QIzmJsTfB
FvkeH9+jnti3oJRcF+joGVE8J/wq0Z5QyzBQaBIoIfe8gCKjJu+5gQTk3iUcJf8GZ/+Djs67vNhz506M
RaaYFKM0bqMMIDTcusANvEt5p71lHCVxgyxoXOQ6+0XrXeggU8anRwrUMb5pk0/7qvr++eHr33+CfBL0
lEDwkiEtZMxOQlJc1BQwJdamkVOOrs6g0KCLMo2YRmNpvPZVdX19jeee0bi25cghY5CGE/h19KRkqwq3
e3yRwPd41rn1fzTCCUFyb1RzzxG5p4C65/oF1JELKRc5FDUh8n+Ti9wYE9cF0WcjsftIWiFaiaVOu0+j
qflxMfsKv+/x5ELnjRcv1kGCX9DTiXFb3nfhjcS+wt0ej5PPbtSq7yts4sL00QU3TIMxfKRXe5Ztg4SB
hyNHqzCED61RlPznlYbRM6ZEHd9XT7TYcPY+IXE8ccTsco87tFSXnSneTCFjZNHiLDiqpcpjMalCuQiZ
w1aHuedQzPlDXNjjuaeckJwR4CBT14O8x8wFXz0mcOm+qnCDvyJTZpvgroz47te7ixToPnIvabVNVX2R
GXziuEhgU+SN5ZDYn0ywleiVrieyRoVQy6T0XEoTp6KEbTxxNmMq6/tiuW09a+tzogaJXMx2u0GYGb4W
9bSkjcx+wY9pGHHkPDOfZUtV9Sxo3atyTYwxytHzkFQmLa2LAoTAMx4sMStLLs4/FNMdbG1vY2OMfHIy
pQvpsijXvNnkQdtfQfVbAd9b9qzYvzLbnzMjiT+xjaJhuJxGocMfZ624XDPlc/hWEvcuCcbhoFpnF7od
gszFQDWFXzIiD3LaTuF7d+9s1u3NQnag159lbIcned/TVkBRJhUrLLq7K8uK3TQ8cpiq6nm9Rxg4TBjo
RfEzRknJrSkwzDUfq+iF53EBNY1KE/msiVhck4Zwb/vWiE8j6A1mV64ge8rbIbKLuoavacpVpm0s1dmy
7MJJXorE65Jx0HLjnnu+sYKbQAPfqO8PVfW5zRr73tW9tZid94qS6cUiHC2r2rHEYIxSc9LrrMocJW/X
M2EoH4R1uISR41AuSOLQXP6+bqbuKQT26wXQvO1AGZ4p5TXbK/QOZFylXem6XNiaSwOrVEyXOCvR8n2x
kCih8lXYvkC2mJS1F42jX0owLtx23s7+/wAAAP//K0AiP6AHAAA=
`,
	},

	"/assets/schema.sql": {
		local:   "assets/schema.sql",
		size:    1650,
		modtime: 1515404254,
		compressed: `
H4sIAAAAAAAC/6RT0Y6bMBB8xl/hRyLlD+6JI74KNSEVodKdqsryhT26FfZSsNWoX19BQ0JyTkJ6b5Zn
7N2dmX0Un5L0gbE4E1EueB49LgVPnni6zrl4Tjb5hjdUgSwbcnXLQxZgwV+xbKFBVfW09Otyyb9kySrK
Xvhn8TJnQemwKuQ/Jhp7oM1ZYJQGbmF3ctnAL4cNyK5Uu3/07fucBVga8t1rKsDzuXaVxboCqdXuKozG
A7doygqkcpakpbI709sbfyWqQBkPc2ibDLxjsdlR1SRdiOfLqspBrh1fp2MgHIDZBIe2pLUyxWSPtg0o
C4VUllvU0Fqla/tnPKWrixuMu30+zDZ6lIknkYk0FieihFjMOjkWYilywTfi5BNPwbszVFOLFuldEiY5
N6jt8W6A7nJPg3G9dRraVpXgEXX6jm1/KGOg8oP020BzEZL7+t7UW2V9yhvYWTke/Yq5B3Gu2vt/GYmj
TRwtBJuqt6S683/yxnxsxH13cxaApp/od8AZ3FIBsqf416fv3JOO8zb6RIXHON1Q6mLSx0qdu3wM/ZgV
nrG6Kixer1ZJ/sDY3wAAAP//TpIqiXIGAAA=
`,
	},

	"/assets/settings.html": {
		local:   "assets/settings.html",
		size:    16842,
		modtime: 1516722053,
		compressed: `
H4sIAAAAAAAC/+RbW4/buBV+9684ZafYGUxkz+RhH3ZtFYOk3QZokiLZPhVFQJvHNrEUqUj02FPB/73g
RbJkS7bkS+N052FsmeS5iocfP0pZxnDKJQKZxF8SJXCioohKlpL1utfLMo1RLKh27XOkjEB/ve4NGX+G
iaBpOiKJWpKwBwBQ/nWiRCBmweNr32bb5495c0xnGBh5mJDwkxIIb7zi4WD+WBoSh08iVZDgFJMEGWgF
NIUUxRRomvKZpGOBYCxPX9kPyD0AKoRapvCiFmbUnD4jRBiNMUn9UNBz5AmopXQC+jCkuYGSPgeCy98I
zBOcjsiAqUk6MN3ucwX3f3r913tjyf3GknsriISfkDIjHswwmKoEIpUgMNSUixSoZIArGsVG63BAw+Eg
9jEcMP7sv/4hCGDQLyIJQRD2fPtWZqjARKc+N25YopZuQNtU/VjOlJHxxBhIXFaiakUWvUpCYipRgP0f
MJzShdAlebW9bf65nG31M391qqvCNmFqlj9W7KVG+HCqkijvab4Hc5Xw/yipqSBAJ5orOSKDiEo6w0GW
9Z8mmj/jLwsuWP/d2/V6UJ4oA4nLL5OIEYhQzxUbkVilukbtto1W8yxRi7ihc12e0qg6pWrHCDpGYW66
EZG4DIy1gTc3kDRCEn6gEQ4Htt8BWSX9XMYLfdDiYmQaU1kzNKCMKUlCaxYMB6ZbC2lWAuiXGEdE40qT
ShgnSupECQKcNfkM5v+IfLD+7/d5995q2byv6QyZ//GUxHt9v5iPPPXDcXJAYooCJ9rHzo7tEvi290qW
Rb8W5aw8ub5YCSo2tc2pN0XOfVmvD2TR2X5UIi+RAHPh1rp2M8+H3gR2MqdSomgIvUvOJyu+RaiNHR9j
U+RSqJQ2IyGF/t/4bI6pNleXDPE1z5UEvy54gkGxmNvL1KGEIyePF2KDXCQyWgjNfbdqUm1LLND3iQU2
zLEtW0+/ASQX39vU4jOpNiF4Z69OSpYTcfZcVe28+lTtaxovtFbSL8jpYhzxzZI81hLGWgZxwiOavJDw
ibHhwI2ogWMDE81wH7wrg+ImfPxjAU2Pxra2zHxDhOsMuGac6wrxCUgXLloUHMDsCnE7QsuSknaY8vLF
0JkUKYYkfK8YHln1zNBWzltNoKTBJTM/8I39zm71nKevfjB9f7hrs01QtrzBMxULHJEHEn5QEocD93Pn
8Y8k/MzlTBwv4TUJ3/sq3k7G/xMKcum9cvhTa+TvBfc4568Y8NQZ+F0jnYaFrOpvaotOYHeq581/ecgc
J7+N1apNWW2x8NUugIUOf2O4aupn70eJJAR/AY8OvHDpgRPVQIUAzSNM4ZZONSbAJdecCk+4Rij13WHb
W63aR5M033UinhZa/apmM4Efp1Obi0g9I+CKp5rLmcvIco7SR9z8RqXSc0yq2ep/6zScPOVs6bnEjKsH
V1zm1ew9lzxaRCAX0RgTUNOulfcowLkxIEdrvvS+5/IawCddFfGhq28Rn8KA7fjQFfm9bH99c+/YAzoj
0rKrIFxBSWHJ9XxzplbeHB9gbQmQ0jpOKqs6AMnP+wj0/64k5pdASvwjqbCRdQxwyZgbOoOfRhU1JciQ
ZTfzxLbX85tZdmOtTm2fHYY5yxKzvQHX6RXcFBEx3T+rRCPLXdgCKh3DZNwoR2ejKeffnQ1bgTLeFfHx
rlTsR5mHw98k+UfluBCgZ+6edJLwWIe96UJamgDKOzyWqJippXwFnP0jwSlf3WVW8DNNgDM77z7GOoUR
3NySPxK4LzrCPZCd6n33c2m0W+YODi/jrbuf3W3Ap4VpfbuZg9FoBOSBePNsn415fcrYGzMXbsmcM4Yy
N8T12xjS2HGNIsUmtY8nq03s2r7dN++6saBeTf3ojg721r3ezW1+F9x6j8o3g0nRFjFw96+Hf78CW5pz
Qfn0qU6sbTlZZmmnGll5y0aeu53Xd73hwN+smxm3fTo+VUpj4k7He/nQ3ubRh5pJuV73mipKUyXp7ZKF
Wcan3uf12nF1LyiEWmaZSVz+m18ovGU1tbqJTLSSf6qqyTL3rf+BRmgunaYPSmJNEdhDKEKqX8wWL6bM
qA20in+Ch3j1MykvASXNdctIitotI3NMsJFaXaIQYP4FaQSb5aqWyKxjLm/orIawXMSMamzJWVZAh0Mu
OZB497ZY2v30yLmiItZGeZ3QWiALfultOscvA6yKhm78ZhcY1aimzHDueO3usDq/PQzZjzVPCEEHqrMT
xdmoay/ZWR21l/bcoTvdFMKvfhb1jXR4WK/BmY3MT9qWtOgOHVor/7FGflvadIcurdXwukZDO1q1mcep
v6suNctOI0EvQn62MLPXimGzmTBIc8Ou5dkrm9rAuB3M0P8mQSdwoJfgPg+beHJuSoYem5r63DTZf5jV
PC61R/Jpbbm0boRmGcT0t1vXazt+U8Quyn4epNzOyaddf5KqZGdNniod6lJ1EXL0AlnaVzgbcckh/vOE
tB+CX+chQ09FqHsp0R20WmqsBa2Xm0SHonke6vTkaO4jUJujSVddo9kGxxVhrd2FPj7ETWWoFTObLiYT
TFNil/ajtpPhZ/qM4B+mbaZ2D8Khy/rJzC4l6eam441yN9+iQH2Mo9u09lYXX6Ohyhn8pXgIq+ANgiDs
dSVp+zVM7F66Ac7JN7R5F+BYtuGSPIMtBce8K9D9HYHzvBvQseA1+NfAcDRyG0eu4ufPTqcH+rs9yL9P
355dTIWF7PJEfz6ryWdPGRAorU97NDpu8yhl++VKdlWb391stHyboPwWQbOcE94rqD65s9m23swTuE11
Avb67tqjeZVkz0E7T2AUrpbn2XX6+oieQzaekJczcDxd09IZehqo5jbg4FFo+WCnSbUBpAeBQQXVuotd
VOsevof81DXQlgIgwKim/mJE8lYCNOE0mNM0VvEiHhGdLND/iKuYSoZsRKZUpIden3pyR+EV8DKhCWoS
HoQqjdC56LEQuczCrwjl4iDbwsMKDmrYCbhXmY/Y7lg062GR2fMYX62+cDgQ/HzGAbM7jSDP+RFblrKp
bt9yKWO7mZcb92fGk9FjYeJ79Yzwz/gKbQy2jHxrplFLM4eDhTgVNLfbO+4+y+LP/luc71tI6M7y81Mq
s6VUCfRzCArB43rd2zrtCh633k8w+rYfbdgak2/bHECmksFtofQObvErbGzov3t7Vzo5y10Niw0JbA7P
ckf9538DAAD//8gC3nDKQQAA
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
