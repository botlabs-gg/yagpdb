// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// RoleGroup is an object representing the database table.
type RoleGroup struct {
	ID                    int64            `boil:"id" json:"id" toml:"id" yaml:"id"`
	GuildID               int64            `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	Name                  string           `boil:"name" json:"name" toml:"name" yaml:"name"`
	RequireRoles          types.Int64Array `boil:"require_roles" json:"require_roles,omitempty" toml:"require_roles" yaml:"require_roles,omitempty"`
	IgnoreRoles           types.Int64Array `boil:"ignore_roles" json:"ignore_roles,omitempty" toml:"ignore_roles" yaml:"ignore_roles,omitempty"`
	Mode                  int64            `boil:"mode" json:"mode" toml:"mode" yaml:"mode"`
	MultipleMax           int64            `boil:"multiple_max" json:"multiple_max" toml:"multiple_max" yaml:"multiple_max"`
	MultipleMin           int64            `boil:"multiple_min" json:"multiple_min" toml:"multiple_min" yaml:"multiple_min"`
	SingleAutoToggleOff   bool             `boil:"single_auto_toggle_off" json:"single_auto_toggle_off" toml:"single_auto_toggle_off" yaml:"single_auto_toggle_off"`
	SingleRequireOne      bool             `boil:"single_require_one" json:"single_require_one" toml:"single_require_one" yaml:"single_require_one"`
	TemporaryRoleDuration int              `boil:"temporary_role_duration" json:"temporary_role_duration" toml:"temporary_role_duration" yaml:"temporary_role_duration"`

	R *roleGroupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roleGroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoleGroupColumns = struct {
	ID                    string
	GuildID               string
	Name                  string
	RequireRoles          string
	IgnoreRoles           string
	Mode                  string
	MultipleMax           string
	MultipleMin           string
	SingleAutoToggleOff   string
	SingleRequireOne      string
	TemporaryRoleDuration string
}{
	ID:                    "id",
	GuildID:               "guild_id",
	Name:                  "name",
	RequireRoles:          "require_roles",
	IgnoreRoles:           "ignore_roles",
	Mode:                  "mode",
	MultipleMax:           "multiple_max",
	MultipleMin:           "multiple_min",
	SingleAutoToggleOff:   "single_auto_toggle_off",
	SingleRequireOne:      "single_require_one",
	TemporaryRoleDuration: "temporary_role_duration",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var RoleGroupWhere = struct {
	ID                    whereHelperint64
	GuildID               whereHelperint64
	Name                  whereHelperstring
	RequireRoles          whereHelpertypes_Int64Array
	IgnoreRoles           whereHelpertypes_Int64Array
	Mode                  whereHelperint64
	MultipleMax           whereHelperint64
	MultipleMin           whereHelperint64
	SingleAutoToggleOff   whereHelperbool
	SingleRequireOne      whereHelperbool
	TemporaryRoleDuration whereHelperint
}{
	ID:                    whereHelperint64{field: "\"role_groups\".\"id\""},
	GuildID:               whereHelperint64{field: "\"role_groups\".\"guild_id\""},
	Name:                  whereHelperstring{field: "\"role_groups\".\"name\""},
	RequireRoles:          whereHelpertypes_Int64Array{field: "\"role_groups\".\"require_roles\""},
	IgnoreRoles:           whereHelpertypes_Int64Array{field: "\"role_groups\".\"ignore_roles\""},
	Mode:                  whereHelperint64{field: "\"role_groups\".\"mode\""},
	MultipleMax:           whereHelperint64{field: "\"role_groups\".\"multiple_max\""},
	MultipleMin:           whereHelperint64{field: "\"role_groups\".\"multiple_min\""},
	SingleAutoToggleOff:   whereHelperbool{field: "\"role_groups\".\"single_auto_toggle_off\""},
	SingleRequireOne:      whereHelperbool{field: "\"role_groups\".\"single_require_one\""},
	TemporaryRoleDuration: whereHelperint{field: "\"role_groups\".\"temporary_role_duration\""},
}

// RoleGroupRels is where relationship names are stored.
var RoleGroupRels = struct {
	RoleCommands string
	RoleMenus    string
}{
	RoleCommands: "RoleCommands",
	RoleMenus:    "RoleMenus",
}

// roleGroupR is where relationships are stored.
type roleGroupR struct {
	RoleCommands RoleCommandSlice `boil:"RoleCommands" json:"RoleCommands" toml:"RoleCommands" yaml:"RoleCommands"`
	RoleMenus    RoleMenuSlice    `boil:"RoleMenus" json:"RoleMenus" toml:"RoleMenus" yaml:"RoleMenus"`
}

// NewStruct creates a new relationship struct
func (*roleGroupR) NewStruct() *roleGroupR {
	return &roleGroupR{}
}

// roleGroupL is where Load methods for each relationship are stored.
type roleGroupL struct{}

var (
	roleGroupAllColumns            = []string{"id", "guild_id", "name", "require_roles", "ignore_roles", "mode", "multiple_max", "multiple_min", "single_auto_toggle_off", "single_require_one", "temporary_role_duration"}
	roleGroupColumnsWithoutDefault = []string{"guild_id", "name", "require_roles", "ignore_roles", "mode", "multiple_max", "multiple_min", "single_auto_toggle_off", "single_require_one"}
	roleGroupColumnsWithDefault    = []string{"id", "temporary_role_duration"}
	roleGroupPrimaryKeyColumns     = []string{"id"}
)

type (
	// RoleGroupSlice is an alias for a slice of pointers to RoleGroup.
	// This should generally be used opposed to []RoleGroup.
	RoleGroupSlice []*RoleGroup

	roleGroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roleGroupType                 = reflect.TypeOf(&RoleGroup{})
	roleGroupMapping              = queries.MakeStructMapping(roleGroupType)
	roleGroupPrimaryKeyMapping, _ = queries.BindMapping(roleGroupType, roleGroupMapping, roleGroupPrimaryKeyColumns)
	roleGroupInsertCacheMut       sync.RWMutex
	roleGroupInsertCache          = make(map[string]insertCache)
	roleGroupUpdateCacheMut       sync.RWMutex
	roleGroupUpdateCache          = make(map[string]updateCache)
	roleGroupUpsertCacheMut       sync.RWMutex
	roleGroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single roleGroup record from the query using the global executor.
func (q roleGroupQuery) OneG(ctx context.Context) (*RoleGroup, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single roleGroup record from the query.
func (q roleGroupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RoleGroup, error) {
	o := &RoleGroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for role_groups")
	}

	return o, nil
}

// AllG returns all RoleGroup records from the query using the global executor.
func (q roleGroupQuery) AllG(ctx context.Context) (RoleGroupSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all RoleGroup records from the query.
func (q roleGroupQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoleGroupSlice, error) {
	var o []*RoleGroup

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RoleGroup slice")
	}

	return o, nil
}

// CountG returns the count of all RoleGroup records in the query, and panics on error.
func (q roleGroupQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all RoleGroup records in the query.
func (q roleGroupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count role_groups rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q roleGroupQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q roleGroupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if role_groups exists")
	}

	return count > 0, nil
}

// RoleCommands retrieves all the role_command's RoleCommands with an executor.
func (o *RoleGroup) RoleCommands(mods ...qm.QueryMod) roleCommandQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"role_commands\".\"role_group_id\"=?", o.ID),
	)

	query := RoleCommands(queryMods...)
	queries.SetFrom(query.Query, "\"role_commands\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"role_commands\".*"})
	}

	return query
}

// RoleMenus retrieves all the role_menu's RoleMenus with an executor.
func (o *RoleGroup) RoleMenus(mods ...qm.QueryMod) roleMenuQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"role_menus\".\"role_group_id\"=?", o.ID),
	)

	query := RoleMenus(queryMods...)
	queries.SetFrom(query.Query, "\"role_menus\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"role_menus\".*"})
	}

	return query
}

// LoadRoleCommands allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (roleGroupL) LoadRoleCommands(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleGroup interface{}, mods queries.Applicator) error {
	var slice []*RoleGroup
	var object *RoleGroup

	if singular {
		object = maybeRoleGroup.(*RoleGroup)
	} else {
		slice = *maybeRoleGroup.(*[]*RoleGroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleGroupR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleGroupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`role_commands`),
		qm.WhereIn(`role_commands.role_group_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load role_commands")
	}

	var resultSlice []*RoleCommand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice role_commands")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on role_commands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for role_commands")
	}

	if singular {
		object.R.RoleCommands = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roleCommandR{}
			}
			foreign.R.RoleGroup = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RoleGroupID) {
				local.R.RoleCommands = append(local.R.RoleCommands, foreign)
				if foreign.R == nil {
					foreign.R = &roleCommandR{}
				}
				foreign.R.RoleGroup = local
				break
			}
		}
	}

	return nil
}

// LoadRoleMenus allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (roleGroupL) LoadRoleMenus(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleGroup interface{}, mods queries.Applicator) error {
	var slice []*RoleGroup
	var object *RoleGroup

	if singular {
		object = maybeRoleGroup.(*RoleGroup)
	} else {
		slice = *maybeRoleGroup.(*[]*RoleGroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleGroupR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleGroupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`role_menus`),
		qm.WhereIn(`role_menus.role_group_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load role_menus")
	}

	var resultSlice []*RoleMenu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice role_menus")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on role_menus")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for role_menus")
	}

	if singular {
		object.R.RoleMenus = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roleMenuR{}
			}
			foreign.R.RoleGroup = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RoleGroupID) {
				local.R.RoleMenus = append(local.R.RoleMenus, foreign)
				if foreign.R == nil {
					foreign.R = &roleMenuR{}
				}
				foreign.R.RoleGroup = local
				break
			}
		}
	}

	return nil
}

// AddRoleCommandsG adds the given related objects to the existing relationships
// of the role_group, optionally inserting them as new records.
// Appends related to o.R.RoleCommands.
// Sets related.R.RoleGroup appropriately.
// Uses the global database handle.
func (o *RoleGroup) AddRoleCommandsG(ctx context.Context, insert bool, related ...*RoleCommand) error {
	return o.AddRoleCommands(ctx, boil.GetContextDB(), insert, related...)
}

// AddRoleCommands adds the given related objects to the existing relationships
// of the role_group, optionally inserting them as new records.
// Appends related to o.R.RoleCommands.
// Sets related.R.RoleGroup appropriately.
func (o *RoleGroup) AddRoleCommands(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoleCommand) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RoleGroupID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"role_commands\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"role_group_id"}),
				strmangle.WhereClause("\"", "\"", 2, roleCommandPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RoleGroupID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &roleGroupR{
			RoleCommands: related,
		}
	} else {
		o.R.RoleCommands = append(o.R.RoleCommands, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleCommandR{
				RoleGroup: o,
			}
		} else {
			rel.R.RoleGroup = o
		}
	}
	return nil
}

// SetRoleCommandsG removes all previously related items of the
// role_group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RoleGroup's RoleCommands accordingly.
// Replaces o.R.RoleCommands with related.
// Sets related.R.RoleGroup's RoleCommands accordingly.
// Uses the global database handle.
func (o *RoleGroup) SetRoleCommandsG(ctx context.Context, insert bool, related ...*RoleCommand) error {
	return o.SetRoleCommands(ctx, boil.GetContextDB(), insert, related...)
}

// SetRoleCommands removes all previously related items of the
// role_group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RoleGroup's RoleCommands accordingly.
// Replaces o.R.RoleCommands with related.
// Sets related.R.RoleGroup's RoleCommands accordingly.
func (o *RoleGroup) SetRoleCommands(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoleCommand) error {
	query := "update \"role_commands\" set \"role_group_id\" = null where \"role_group_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RoleCommands {
			queries.SetScanner(&rel.RoleGroupID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.RoleGroup = nil
		}

		o.R.RoleCommands = nil
	}
	return o.AddRoleCommands(ctx, exec, insert, related...)
}

// RemoveRoleCommandsG relationships from objects passed in.
// Removes related items from R.RoleCommands (uses pointer comparison, removal does not keep order)
// Sets related.R.RoleGroup.
// Uses the global database handle.
func (o *RoleGroup) RemoveRoleCommandsG(ctx context.Context, related ...*RoleCommand) error {
	return o.RemoveRoleCommands(ctx, boil.GetContextDB(), related...)
}

// RemoveRoleCommands relationships from objects passed in.
// Removes related items from R.RoleCommands (uses pointer comparison, removal does not keep order)
// Sets related.R.RoleGroup.
func (o *RoleGroup) RemoveRoleCommands(ctx context.Context, exec boil.ContextExecutor, related ...*RoleCommand) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RoleGroupID, nil)
		if rel.R != nil {
			rel.R.RoleGroup = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("role_group_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RoleCommands {
			if rel != ri {
				continue
			}

			ln := len(o.R.RoleCommands)
			if ln > 1 && i < ln-1 {
				o.R.RoleCommands[i] = o.R.RoleCommands[ln-1]
			}
			o.R.RoleCommands = o.R.RoleCommands[:ln-1]
			break
		}
	}

	return nil
}

// AddRoleMenusG adds the given related objects to the existing relationships
// of the role_group, optionally inserting them as new records.
// Appends related to o.R.RoleMenus.
// Sets related.R.RoleGroup appropriately.
// Uses the global database handle.
func (o *RoleGroup) AddRoleMenusG(ctx context.Context, insert bool, related ...*RoleMenu) error {
	return o.AddRoleMenus(ctx, boil.GetContextDB(), insert, related...)
}

// AddRoleMenus adds the given related objects to the existing relationships
// of the role_group, optionally inserting them as new records.
// Appends related to o.R.RoleMenus.
// Sets related.R.RoleGroup appropriately.
func (o *RoleGroup) AddRoleMenus(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoleMenu) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RoleGroupID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"role_menus\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"role_group_id"}),
				strmangle.WhereClause("\"", "\"", 2, roleMenuPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.MessageID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RoleGroupID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &roleGroupR{
			RoleMenus: related,
		}
	} else {
		o.R.RoleMenus = append(o.R.RoleMenus, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleMenuR{
				RoleGroup: o,
			}
		} else {
			rel.R.RoleGroup = o
		}
	}
	return nil
}

// SetRoleMenusG removes all previously related items of the
// role_group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RoleGroup's RoleMenus accordingly.
// Replaces o.R.RoleMenus with related.
// Sets related.R.RoleGroup's RoleMenus accordingly.
// Uses the global database handle.
func (o *RoleGroup) SetRoleMenusG(ctx context.Context, insert bool, related ...*RoleMenu) error {
	return o.SetRoleMenus(ctx, boil.GetContextDB(), insert, related...)
}

// SetRoleMenus removes all previously related items of the
// role_group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RoleGroup's RoleMenus accordingly.
// Replaces o.R.RoleMenus with related.
// Sets related.R.RoleGroup's RoleMenus accordingly.
func (o *RoleGroup) SetRoleMenus(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoleMenu) error {
	query := "update \"role_menus\" set \"role_group_id\" = null where \"role_group_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RoleMenus {
			queries.SetScanner(&rel.RoleGroupID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.RoleGroup = nil
		}

		o.R.RoleMenus = nil
	}
	return o.AddRoleMenus(ctx, exec, insert, related...)
}

// RemoveRoleMenusG relationships from objects passed in.
// Removes related items from R.RoleMenus (uses pointer comparison, removal does not keep order)
// Sets related.R.RoleGroup.
// Uses the global database handle.
func (o *RoleGroup) RemoveRoleMenusG(ctx context.Context, related ...*RoleMenu) error {
	return o.RemoveRoleMenus(ctx, boil.GetContextDB(), related...)
}

// RemoveRoleMenus relationships from objects passed in.
// Removes related items from R.RoleMenus (uses pointer comparison, removal does not keep order)
// Sets related.R.RoleGroup.
func (o *RoleGroup) RemoveRoleMenus(ctx context.Context, exec boil.ContextExecutor, related ...*RoleMenu) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RoleGroupID, nil)
		if rel.R != nil {
			rel.R.RoleGroup = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("role_group_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RoleMenus {
			if rel != ri {
				continue
			}

			ln := len(o.R.RoleMenus)
			if ln > 1 && i < ln-1 {
				o.R.RoleMenus[i] = o.R.RoleMenus[ln-1]
			}
			o.R.RoleMenus = o.R.RoleMenus[:ln-1]
			break
		}
	}

	return nil
}

// RoleGroups retrieves all the records using an executor.
func RoleGroups(mods ...qm.QueryMod) roleGroupQuery {
	mods = append(mods, qm.From("\"role_groups\""))
	return roleGroupQuery{NewQuery(mods...)}
}

// FindRoleGroupG retrieves a single record by ID.
func FindRoleGroupG(ctx context.Context, iD int64, selectCols ...string) (*RoleGroup, error) {
	return FindRoleGroup(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRoleGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoleGroup(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*RoleGroup, error) {
	roleGroupObj := &RoleGroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"role_groups\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, roleGroupObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from role_groups")
	}

	return roleGroupObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RoleGroup) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RoleGroup) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no role_groups provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(roleGroupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roleGroupInsertCacheMut.RLock()
	cache, cached := roleGroupInsertCache[key]
	roleGroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roleGroupAllColumns,
			roleGroupColumnsWithDefault,
			roleGroupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roleGroupType, roleGroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roleGroupType, roleGroupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"role_groups\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"role_groups\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into role_groups")
	}

	if !cached {
		roleGroupInsertCacheMut.Lock()
		roleGroupInsertCache[key] = cache
		roleGroupInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single RoleGroup record using the global executor.
// See Update for more documentation.
func (o *RoleGroup) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the RoleGroup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RoleGroup) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	roleGroupUpdateCacheMut.RLock()
	cache, cached := roleGroupUpdateCache[key]
	roleGroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roleGroupAllColumns,
			roleGroupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update role_groups, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"role_groups\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, roleGroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roleGroupType, roleGroupMapping, append(wl, roleGroupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update role_groups row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for role_groups")
	}

	if !cached {
		roleGroupUpdateCacheMut.Lock()
		roleGroupUpdateCache[key] = cache
		roleGroupUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q roleGroupQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q roleGroupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for role_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for role_groups")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RoleGroupSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoleGroupSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"role_groups\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, roleGroupPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in roleGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all roleGroup")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RoleGroup) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RoleGroup) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no role_groups provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(roleGroupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roleGroupUpsertCacheMut.RLock()
	cache, cached := roleGroupUpsertCache[key]
	roleGroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			roleGroupAllColumns,
			roleGroupColumnsWithDefault,
			roleGroupColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			roleGroupAllColumns,
			roleGroupPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert role_groups, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(roleGroupPrimaryKeyColumns))
			copy(conflict, roleGroupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"role_groups\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(roleGroupType, roleGroupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roleGroupType, roleGroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert role_groups")
	}

	if !cached {
		roleGroupUpsertCacheMut.Lock()
		roleGroupUpsertCache[key] = cache
		roleGroupUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single RoleGroup record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RoleGroup) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single RoleGroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoleGroup) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RoleGroup provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roleGroupPrimaryKeyMapping)
	sql := "DELETE FROM \"role_groups\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from role_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for role_groups")
	}

	return rowsAff, nil
}

func (q roleGroupQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q roleGroupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no roleGroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from role_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_groups")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RoleGroupSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoleGroupSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"role_groups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleGroupPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from roleGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_groups")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RoleGroup) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no RoleGroup provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoleGroup) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoleGroup(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleGroupSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty RoleGroupSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleGroupSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoleGroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"role_groups\".* FROM \"role_groups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleGroupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoleGroupSlice")
	}

	*o = slice

	return nil
}

// RoleGroupExistsG checks if the RoleGroup row exists.
func RoleGroupExistsG(ctx context.Context, iD int64) (bool, error) {
	return RoleGroupExists(ctx, boil.GetContextDB(), iD)
}

// RoleGroupExists checks if the RoleGroup row exists.
func RoleGroupExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"role_groups\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if role_groups exists")
	}

	return exists, nil
}
