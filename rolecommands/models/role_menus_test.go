// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRoleMenus(t *testing.T) {
	t.Parallel()

	query := RoleMenus()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRoleMenusDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenu{}
	if err = randomize.Struct(seed, o, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleMenus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleMenusQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenu{}
	if err = randomize.Struct(seed, o, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RoleMenus().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleMenus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleMenusSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenu{}
	if err = randomize.Struct(seed, o, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoleMenuSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleMenus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleMenusExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenu{}
	if err = randomize.Struct(seed, o, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RoleMenuExists(ctx, tx, o.MessageID)
	if err != nil {
		t.Errorf("Unable to check if RoleMenu exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RoleMenuExists to return true, but got false.")
	}
}

func testRoleMenusFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenu{}
	if err = randomize.Struct(seed, o, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	roleMenuFound, err := FindRoleMenu(ctx, tx, o.MessageID)
	if err != nil {
		t.Error(err)
	}

	if roleMenuFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRoleMenusBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenu{}
	if err = randomize.Struct(seed, o, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RoleMenus().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRoleMenusOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenu{}
	if err = randomize.Struct(seed, o, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RoleMenus().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRoleMenusAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenuOne := &RoleMenu{}
	roleMenuTwo := &RoleMenu{}
	if err = randomize.Struct(seed, roleMenuOne, roleMenuDBTypes, false, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}
	if err = randomize.Struct(seed, roleMenuTwo, roleMenuDBTypes, false, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roleMenuOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roleMenuTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoleMenus().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRoleMenusCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	roleMenuOne := &RoleMenu{}
	roleMenuTwo := &RoleMenu{}
	if err = randomize.Struct(seed, roleMenuOne, roleMenuDBTypes, false, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}
	if err = randomize.Struct(seed, roleMenuTwo, roleMenuDBTypes, false, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roleMenuOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roleMenuTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleMenus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testRoleMenusInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenu{}
	if err = randomize.Struct(seed, o, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleMenus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleMenusInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenu{}
	if err = randomize.Struct(seed, o, roleMenuDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(roleMenuColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RoleMenus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleMenuToManyRoleMenuOptions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleMenu
	var b, c RoleMenuOption

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, roleMenuOptionDBTypes, false, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleMenuOptionDBTypes, false, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RoleMenuID = a.MessageID
	c.RoleMenuID = a.MessageID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	roleMenuOption, err := a.RoleMenuOptions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range roleMenuOption {
		if v.RoleMenuID == b.RoleMenuID {
			bFound = true
		}
		if v.RoleMenuID == c.RoleMenuID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RoleMenuSlice{&a}
	if err = a.L.LoadRoleMenuOptions(ctx, tx, false, (*[]*RoleMenu)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoleMenuOptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RoleMenuOptions = nil
	if err = a.L.LoadRoleMenuOptions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoleMenuOptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", roleMenuOption)
	}
}

func testRoleMenuToManyAddOpRoleMenuOptions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleMenu
	var b, c, d, e RoleMenuOption

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RoleMenuOption{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, roleMenuOptionDBTypes, false, strmangle.SetComplement(roleMenuOptionPrimaryKeyColumns, roleMenuOptionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RoleMenuOption{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRoleMenuOptions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.MessageID != first.RoleMenuID {
			t.Error("foreign key was wrong value", a.MessageID, first.RoleMenuID)
		}
		if a.MessageID != second.RoleMenuID {
			t.Error("foreign key was wrong value", a.MessageID, second.RoleMenuID)
		}

		if first.R.RoleMenu != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.RoleMenu != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RoleMenuOptions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RoleMenuOptions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RoleMenuOptions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRoleMenuToOneRoleCommandUsingNextRoleCommand(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RoleMenu
	var foreign RoleCommand

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, roleCommandDBTypes, false, roleCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleCommand struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.NextRoleCommandID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.NextRoleCommand().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RoleMenuSlice{&local}
	if err = local.L.LoadNextRoleCommand(ctx, tx, false, (*[]*RoleMenu)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.NextRoleCommand == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.NextRoleCommand = nil
	if err = local.L.LoadNextRoleCommand(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.NextRoleCommand == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRoleMenuToOneRoleGroupUsingRoleGroup(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RoleMenu
	var foreign RoleGroup

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, roleGroupDBTypes, false, roleGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleGroup struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.RoleGroupID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RoleGroup().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RoleMenuSlice{&local}
	if err = local.L.LoadRoleGroup(ctx, tx, false, (*[]*RoleMenu)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RoleGroup == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RoleGroup = nil
	if err = local.L.LoadRoleGroup(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RoleGroup == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRoleMenuToOneRoleMenuOptionUsingEditingOption(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RoleMenu
	var foreign RoleMenuOption

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, roleMenuOptionDBTypes, false, roleMenuOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuOption struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.EditingOptionID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.EditingOption().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RoleMenuSlice{&local}
	if err = local.L.LoadEditingOption(ctx, tx, false, (*[]*RoleMenu)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.EditingOption == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.EditingOption = nil
	if err = local.L.LoadEditingOption(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.EditingOption == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRoleMenuToOneSetOpRoleCommandUsingNextRoleCommand(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleMenu
	var b, c RoleCommand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleCommandDBTypes, false, strmangle.SetComplement(roleCommandPrimaryKeyColumns, roleCommandColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleCommandDBTypes, false, strmangle.SetComplement(roleCommandPrimaryKeyColumns, roleCommandColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RoleCommand{&b, &c} {
		err = a.SetNextRoleCommand(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.NextRoleCommand != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.NextRoleCommandRoleMenus[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.NextRoleCommandID, x.ID) {
			t.Error("foreign key was wrong value", a.NextRoleCommandID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.NextRoleCommandID))
		reflect.Indirect(reflect.ValueOf(&a.NextRoleCommandID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.NextRoleCommandID, x.ID) {
			t.Error("foreign key was wrong value", a.NextRoleCommandID, x.ID)
		}
	}
}

func testRoleMenuToOneRemoveOpRoleCommandUsingNextRoleCommand(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleMenu
	var b RoleCommand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleCommandDBTypes, false, strmangle.SetComplement(roleCommandPrimaryKeyColumns, roleCommandColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetNextRoleCommand(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveNextRoleCommand(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.NextRoleCommand().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.NextRoleCommand != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.NextRoleCommandID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.NextRoleCommandRoleMenus) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRoleMenuToOneSetOpRoleGroupUsingRoleGroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleMenu
	var b, c RoleGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleGroupDBTypes, false, strmangle.SetComplement(roleGroupPrimaryKeyColumns, roleGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleGroupDBTypes, false, strmangle.SetComplement(roleGroupPrimaryKeyColumns, roleGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RoleGroup{&b, &c} {
		err = a.SetRoleGroup(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RoleGroup != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RoleMenus[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.RoleGroupID, x.ID) {
			t.Error("foreign key was wrong value", a.RoleGroupID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RoleGroupID))
		reflect.Indirect(reflect.ValueOf(&a.RoleGroupID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.RoleGroupID, x.ID) {
			t.Error("foreign key was wrong value", a.RoleGroupID, x.ID)
		}
	}
}

func testRoleMenuToOneRemoveOpRoleGroupUsingRoleGroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleMenu
	var b RoleGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleGroupDBTypes, false, strmangle.SetComplement(roleGroupPrimaryKeyColumns, roleGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRoleGroup(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRoleGroup(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.RoleGroup().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.RoleGroup != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.RoleGroupID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RoleMenus) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRoleMenuToOneSetOpRoleMenuOptionUsingEditingOption(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleMenu
	var b, c RoleMenuOption

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleMenuOptionDBTypes, false, strmangle.SetComplement(roleMenuOptionPrimaryKeyColumns, roleMenuOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleMenuOptionDBTypes, false, strmangle.SetComplement(roleMenuOptionPrimaryKeyColumns, roleMenuOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RoleMenuOption{&b, &c} {
		err = a.SetEditingOption(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.EditingOption != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.EditingOptionRoleMenus[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.EditingOptionID, x.ID) {
			t.Error("foreign key was wrong value", a.EditingOptionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EditingOptionID))
		reflect.Indirect(reflect.ValueOf(&a.EditingOptionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.EditingOptionID, x.ID) {
			t.Error("foreign key was wrong value", a.EditingOptionID, x.ID)
		}
	}
}

func testRoleMenuToOneRemoveOpRoleMenuOptionUsingEditingOption(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleMenu
	var b RoleMenuOption

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuDBTypes, false, strmangle.SetComplement(roleMenuPrimaryKeyColumns, roleMenuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleMenuOptionDBTypes, false, strmangle.SetComplement(roleMenuOptionPrimaryKeyColumns, roleMenuOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetEditingOption(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveEditingOption(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.EditingOption().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.EditingOption != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.EditingOptionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.EditingOptionRoleMenus) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRoleMenusReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenu{}
	if err = randomize.Struct(seed, o, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoleMenusReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenu{}
	if err = randomize.Struct(seed, o, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoleMenuSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoleMenusSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenu{}
	if err = randomize.Struct(seed, o, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoleMenus().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	roleMenuDBTypes = map[string]string{`ChannelID`: `bigint`, `DisableSendDM`: `boolean`, `EditingOptionID`: `bigint`, `FixedAmount`: `boolean`, `GuildID`: `bigint`, `MessageID`: `bigint`, `NextRoleCommandID`: `bigint`, `OwnMessage`: `boolean`, `OwnerID`: `bigint`, `RemoveRoleOnReactionRemove`: `boolean`, `RoleGroupID`: `bigint`, `SkipAmount`: `integer`, `State`: `bigint`}
	_               = bytes.MinRead
)

func testRoleMenusUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(roleMenuPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(roleMenuColumns) == len(roleMenuPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenu{}
	if err = randomize.Struct(seed, o, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleMenus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roleMenuDBTypes, true, roleMenuPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRoleMenusSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(roleMenuColumns) == len(roleMenuPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenu{}
	if err = randomize.Struct(seed, o, roleMenuDBTypes, true, roleMenuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleMenus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roleMenuDBTypes, true, roleMenuPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(roleMenuColumns, roleMenuPrimaryKeyColumns) {
		fields = roleMenuColumns
	} else {
		fields = strmangle.SetComplement(
			roleMenuColumns,
			roleMenuPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RoleMenuSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRoleMenusUpsert(t *testing.T) {
	t.Parallel()

	if len(roleMenuColumns) == len(roleMenuPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RoleMenu{}
	if err = randomize.Struct(seed, &o, roleMenuDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoleMenu: %s", err)
	}

	count, err := RoleMenus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, roleMenuDBTypes, false, roleMenuPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleMenu struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoleMenu: %s", err)
	}

	count, err = RoleMenus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
