// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// RoleCommand is an object representing the database table.
type RoleCommand struct {
	ID           int64            `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt    time.Time        `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time        `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	GuildID      int64            `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	Name         string           `boil:"name" json:"name" toml:"name" yaml:"name"`
	RoleGroupID  null.Int64       `boil:"role_group_id" json:"role_group_id,omitempty" toml:"role_group_id" yaml:"role_group_id,omitempty"`
	Role         int64            `boil:"role" json:"role" toml:"role" yaml:"role"`
	RequireRoles types.Int64Array `boil:"require_roles" json:"require_roles,omitempty" toml:"require_roles" yaml:"require_roles,omitempty"`
	IgnoreRoles  types.Int64Array `boil:"ignore_roles" json:"ignore_roles,omitempty" toml:"ignore_roles" yaml:"ignore_roles,omitempty"`
	Position     int64            `boil:"position" json:"position" toml:"position" yaml:"position"`

	R *roleCommandR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roleCommandL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoleCommandColumns = struct {
	ID           string
	CreatedAt    string
	UpdatedAt    string
	GuildID      string
	Name         string
	RoleGroupID  string
	Role         string
	RequireRoles string
	IgnoreRoles  string
	Position     string
}{
	ID:           "id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	GuildID:      "guild_id",
	Name:         "name",
	RoleGroupID:  "role_group_id",
	Role:         "role",
	RequireRoles: "require_roles",
	IgnoreRoles:  "ignore_roles",
	Position:     "position",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_Int64Array struct{ field string }

func (w whereHelpertypes_Int64Array) EQ(x types.Int64Array) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_Int64Array) NEQ(x types.Int64Array) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_Int64Array) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_Int64Array) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpertypes_Int64Array) LT(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Int64Array) LTE(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Int64Array) GT(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Int64Array) GTE(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var RoleCommandWhere = struct {
	ID           whereHelperint64
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	GuildID      whereHelperint64
	Name         whereHelperstring
	RoleGroupID  whereHelpernull_Int64
	Role         whereHelperint64
	RequireRoles whereHelpertypes_Int64Array
	IgnoreRoles  whereHelpertypes_Int64Array
	Position     whereHelperint64
}{
	ID:           whereHelperint64{field: "\"role_commands\".\"id\""},
	CreatedAt:    whereHelpertime_Time{field: "\"role_commands\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"role_commands\".\"updated_at\""},
	GuildID:      whereHelperint64{field: "\"role_commands\".\"guild_id\""},
	Name:         whereHelperstring{field: "\"role_commands\".\"name\""},
	RoleGroupID:  whereHelpernull_Int64{field: "\"role_commands\".\"role_group_id\""},
	Role:         whereHelperint64{field: "\"role_commands\".\"role\""},
	RequireRoles: whereHelpertypes_Int64Array{field: "\"role_commands\".\"require_roles\""},
	IgnoreRoles:  whereHelpertypes_Int64Array{field: "\"role_commands\".\"ignore_roles\""},
	Position:     whereHelperint64{field: "\"role_commands\".\"position\""},
}

// RoleCommandRels is where relationship names are stored.
var RoleCommandRels = struct {
	RoleGroup                string
	RoleMenuOptions          string
	NextRoleCommandRoleMenus string
}{
	RoleGroup:                "RoleGroup",
	RoleMenuOptions:          "RoleMenuOptions",
	NextRoleCommandRoleMenus: "NextRoleCommandRoleMenus",
}

// roleCommandR is where relationships are stored.
type roleCommandR struct {
	RoleGroup                *RoleGroup          `boil:"RoleGroup" json:"RoleGroup" toml:"RoleGroup" yaml:"RoleGroup"`
	RoleMenuOptions          RoleMenuOptionSlice `boil:"RoleMenuOptions" json:"RoleMenuOptions" toml:"RoleMenuOptions" yaml:"RoleMenuOptions"`
	NextRoleCommandRoleMenus RoleMenuSlice       `boil:"NextRoleCommandRoleMenus" json:"NextRoleCommandRoleMenus" toml:"NextRoleCommandRoleMenus" yaml:"NextRoleCommandRoleMenus"`
}

// NewStruct creates a new relationship struct
func (*roleCommandR) NewStruct() *roleCommandR {
	return &roleCommandR{}
}

// roleCommandL is where Load methods for each relationship are stored.
type roleCommandL struct{}

var (
	roleCommandAllColumns            = []string{"id", "created_at", "updated_at", "guild_id", "name", "role_group_id", "role", "require_roles", "ignore_roles", "position"}
	roleCommandColumnsWithoutDefault = []string{"created_at", "updated_at", "guild_id", "name", "role_group_id", "role", "require_roles", "ignore_roles", "position"}
	roleCommandColumnsWithDefault    = []string{"id"}
	roleCommandPrimaryKeyColumns     = []string{"id"}
)

type (
	// RoleCommandSlice is an alias for a slice of pointers to RoleCommand.
	// This should generally be used opposed to []RoleCommand.
	RoleCommandSlice []*RoleCommand

	roleCommandQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roleCommandType                 = reflect.TypeOf(&RoleCommand{})
	roleCommandMapping              = queries.MakeStructMapping(roleCommandType)
	roleCommandPrimaryKeyMapping, _ = queries.BindMapping(roleCommandType, roleCommandMapping, roleCommandPrimaryKeyColumns)
	roleCommandInsertCacheMut       sync.RWMutex
	roleCommandInsertCache          = make(map[string]insertCache)
	roleCommandUpdateCacheMut       sync.RWMutex
	roleCommandUpdateCache          = make(map[string]updateCache)
	roleCommandUpsertCacheMut       sync.RWMutex
	roleCommandUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single roleCommand record from the query using the global executor.
func (q roleCommandQuery) OneG(ctx context.Context) (*RoleCommand, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single roleCommand record from the query.
func (q roleCommandQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RoleCommand, error) {
	o := &RoleCommand{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for role_commands")
	}

	return o, nil
}

// AllG returns all RoleCommand records from the query using the global executor.
func (q roleCommandQuery) AllG(ctx context.Context) (RoleCommandSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all RoleCommand records from the query.
func (q roleCommandQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoleCommandSlice, error) {
	var o []*RoleCommand

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RoleCommand slice")
	}

	return o, nil
}

// CountG returns the count of all RoleCommand records in the query, and panics on error.
func (q roleCommandQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all RoleCommand records in the query.
func (q roleCommandQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count role_commands rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q roleCommandQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q roleCommandQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if role_commands exists")
	}

	return count > 0, nil
}

// RoleGroup pointed to by the foreign key.
func (o *RoleCommand) RoleGroup(mods ...qm.QueryMod) roleGroupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RoleGroupID),
	}

	queryMods = append(queryMods, mods...)

	query := RoleGroups(queryMods...)
	queries.SetFrom(query.Query, "\"role_groups\"")

	return query
}

// RoleMenuOptions retrieves all the role_menu_option's RoleMenuOptions with an executor.
func (o *RoleCommand) RoleMenuOptions(mods ...qm.QueryMod) roleMenuOptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"role_menu_options\".\"role_command_id\"=?", o.ID),
	)

	query := RoleMenuOptions(queryMods...)
	queries.SetFrom(query.Query, "\"role_menu_options\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"role_menu_options\".*"})
	}

	return query
}

// NextRoleCommandRoleMenus retrieves all the role_menu's RoleMenus with an executor via next_role_command_id column.
func (o *RoleCommand) NextRoleCommandRoleMenus(mods ...qm.QueryMod) roleMenuQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"role_menus\".\"next_role_command_id\"=?", o.ID),
	)

	query := RoleMenus(queryMods...)
	queries.SetFrom(query.Query, "\"role_menus\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"role_menus\".*"})
	}

	return query
}

// LoadRoleGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleCommandL) LoadRoleGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleCommand interface{}, mods queries.Applicator) error {
	var slice []*RoleCommand
	var object *RoleCommand

	if singular {
		object = maybeRoleCommand.(*RoleCommand)
	} else {
		slice = *maybeRoleCommand.(*[]*RoleCommand)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleCommandR{}
		}
		if !queries.IsNil(object.RoleGroupID) {
			args = append(args, object.RoleGroupID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleCommandR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RoleGroupID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RoleGroupID) {
				args = append(args, obj.RoleGroupID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`role_groups`),
		qm.WhereIn(`role_groups.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RoleGroup")
	}

	var resultSlice []*RoleGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RoleGroup")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for role_groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for role_groups")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RoleGroup = foreign
		if foreign.R == nil {
			foreign.R = &roleGroupR{}
		}
		foreign.R.RoleCommands = append(foreign.R.RoleCommands, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RoleGroupID, foreign.ID) {
				local.R.RoleGroup = foreign
				if foreign.R == nil {
					foreign.R = &roleGroupR{}
				}
				foreign.R.RoleCommands = append(foreign.R.RoleCommands, local)
				break
			}
		}
	}

	return nil
}

// LoadRoleMenuOptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (roleCommandL) LoadRoleMenuOptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleCommand interface{}, mods queries.Applicator) error {
	var slice []*RoleCommand
	var object *RoleCommand

	if singular {
		object = maybeRoleCommand.(*RoleCommand)
	} else {
		slice = *maybeRoleCommand.(*[]*RoleCommand)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleCommandR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleCommandR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`role_menu_options`),
		qm.WhereIn(`role_menu_options.role_command_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load role_menu_options")
	}

	var resultSlice []*RoleMenuOption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice role_menu_options")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on role_menu_options")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for role_menu_options")
	}

	if singular {
		object.R.RoleMenuOptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roleMenuOptionR{}
			}
			foreign.R.RoleCommand = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RoleCommandID) {
				local.R.RoleMenuOptions = append(local.R.RoleMenuOptions, foreign)
				if foreign.R == nil {
					foreign.R = &roleMenuOptionR{}
				}
				foreign.R.RoleCommand = local
				break
			}
		}
	}

	return nil
}

// LoadNextRoleCommandRoleMenus allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (roleCommandL) LoadNextRoleCommandRoleMenus(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleCommand interface{}, mods queries.Applicator) error {
	var slice []*RoleCommand
	var object *RoleCommand

	if singular {
		object = maybeRoleCommand.(*RoleCommand)
	} else {
		slice = *maybeRoleCommand.(*[]*RoleCommand)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleCommandR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleCommandR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`role_menus`),
		qm.WhereIn(`role_menus.next_role_command_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load role_menus")
	}

	var resultSlice []*RoleMenu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice role_menus")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on role_menus")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for role_menus")
	}

	if singular {
		object.R.NextRoleCommandRoleMenus = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roleMenuR{}
			}
			foreign.R.NextRoleCommand = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.NextRoleCommandID) {
				local.R.NextRoleCommandRoleMenus = append(local.R.NextRoleCommandRoleMenus, foreign)
				if foreign.R == nil {
					foreign.R = &roleMenuR{}
				}
				foreign.R.NextRoleCommand = local
				break
			}
		}
	}

	return nil
}

// SetRoleGroupG of the roleCommand to the related item.
// Sets o.R.RoleGroup to related.
// Adds o to related.R.RoleCommands.
// Uses the global database handle.
func (o *RoleCommand) SetRoleGroupG(ctx context.Context, insert bool, related *RoleGroup) error {
	return o.SetRoleGroup(ctx, boil.GetContextDB(), insert, related)
}

// SetRoleGroup of the roleCommand to the related item.
// Sets o.R.RoleGroup to related.
// Adds o to related.R.RoleCommands.
func (o *RoleCommand) SetRoleGroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RoleGroup) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_commands\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"role_group_id"}),
		strmangle.WhereClause("\"", "\"", 2, roleCommandPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RoleGroupID, related.ID)
	if o.R == nil {
		o.R = &roleCommandR{
			RoleGroup: related,
		}
	} else {
		o.R.RoleGroup = related
	}

	if related.R == nil {
		related.R = &roleGroupR{
			RoleCommands: RoleCommandSlice{o},
		}
	} else {
		related.R.RoleCommands = append(related.R.RoleCommands, o)
	}

	return nil
}

// RemoveRoleGroupG relationship.
// Sets o.R.RoleGroup to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *RoleCommand) RemoveRoleGroupG(ctx context.Context, related *RoleGroup) error {
	return o.RemoveRoleGroup(ctx, boil.GetContextDB(), related)
}

// RemoveRoleGroup relationship.
// Sets o.R.RoleGroup to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *RoleCommand) RemoveRoleGroup(ctx context.Context, exec boil.ContextExecutor, related *RoleGroup) error {
	var err error

	queries.SetScanner(&o.RoleGroupID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("role_group_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.RoleGroup = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RoleCommands {
		if queries.Equal(o.RoleGroupID, ri.RoleGroupID) {
			continue
		}

		ln := len(related.R.RoleCommands)
		if ln > 1 && i < ln-1 {
			related.R.RoleCommands[i] = related.R.RoleCommands[ln-1]
		}
		related.R.RoleCommands = related.R.RoleCommands[:ln-1]
		break
	}
	return nil
}

// AddRoleMenuOptionsG adds the given related objects to the existing relationships
// of the role_command, optionally inserting them as new records.
// Appends related to o.R.RoleMenuOptions.
// Sets related.R.RoleCommand appropriately.
// Uses the global database handle.
func (o *RoleCommand) AddRoleMenuOptionsG(ctx context.Context, insert bool, related ...*RoleMenuOption) error {
	return o.AddRoleMenuOptions(ctx, boil.GetContextDB(), insert, related...)
}

// AddRoleMenuOptions adds the given related objects to the existing relationships
// of the role_command, optionally inserting them as new records.
// Appends related to o.R.RoleMenuOptions.
// Sets related.R.RoleCommand appropriately.
func (o *RoleCommand) AddRoleMenuOptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoleMenuOption) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RoleCommandID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"role_menu_options\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"role_command_id"}),
				strmangle.WhereClause("\"", "\"", 2, roleMenuOptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RoleCommandID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &roleCommandR{
			RoleMenuOptions: related,
		}
	} else {
		o.R.RoleMenuOptions = append(o.R.RoleMenuOptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleMenuOptionR{
				RoleCommand: o,
			}
		} else {
			rel.R.RoleCommand = o
		}
	}
	return nil
}

// SetRoleMenuOptionsG removes all previously related items of the
// role_command replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RoleCommand's RoleMenuOptions accordingly.
// Replaces o.R.RoleMenuOptions with related.
// Sets related.R.RoleCommand's RoleMenuOptions accordingly.
// Uses the global database handle.
func (o *RoleCommand) SetRoleMenuOptionsG(ctx context.Context, insert bool, related ...*RoleMenuOption) error {
	return o.SetRoleMenuOptions(ctx, boil.GetContextDB(), insert, related...)
}

// SetRoleMenuOptions removes all previously related items of the
// role_command replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RoleCommand's RoleMenuOptions accordingly.
// Replaces o.R.RoleMenuOptions with related.
// Sets related.R.RoleCommand's RoleMenuOptions accordingly.
func (o *RoleCommand) SetRoleMenuOptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoleMenuOption) error {
	query := "update \"role_menu_options\" set \"role_command_id\" = null where \"role_command_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RoleMenuOptions {
			queries.SetScanner(&rel.RoleCommandID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.RoleCommand = nil
		}

		o.R.RoleMenuOptions = nil
	}
	return o.AddRoleMenuOptions(ctx, exec, insert, related...)
}

// RemoveRoleMenuOptionsG relationships from objects passed in.
// Removes related items from R.RoleMenuOptions (uses pointer comparison, removal does not keep order)
// Sets related.R.RoleCommand.
// Uses the global database handle.
func (o *RoleCommand) RemoveRoleMenuOptionsG(ctx context.Context, related ...*RoleMenuOption) error {
	return o.RemoveRoleMenuOptions(ctx, boil.GetContextDB(), related...)
}

// RemoveRoleMenuOptions relationships from objects passed in.
// Removes related items from R.RoleMenuOptions (uses pointer comparison, removal does not keep order)
// Sets related.R.RoleCommand.
func (o *RoleCommand) RemoveRoleMenuOptions(ctx context.Context, exec boil.ContextExecutor, related ...*RoleMenuOption) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RoleCommandID, nil)
		if rel.R != nil {
			rel.R.RoleCommand = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("role_command_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RoleMenuOptions {
			if rel != ri {
				continue
			}

			ln := len(o.R.RoleMenuOptions)
			if ln > 1 && i < ln-1 {
				o.R.RoleMenuOptions[i] = o.R.RoleMenuOptions[ln-1]
			}
			o.R.RoleMenuOptions = o.R.RoleMenuOptions[:ln-1]
			break
		}
	}

	return nil
}

// AddNextRoleCommandRoleMenusG adds the given related objects to the existing relationships
// of the role_command, optionally inserting them as new records.
// Appends related to o.R.NextRoleCommandRoleMenus.
// Sets related.R.NextRoleCommand appropriately.
// Uses the global database handle.
func (o *RoleCommand) AddNextRoleCommandRoleMenusG(ctx context.Context, insert bool, related ...*RoleMenu) error {
	return o.AddNextRoleCommandRoleMenus(ctx, boil.GetContextDB(), insert, related...)
}

// AddNextRoleCommandRoleMenus adds the given related objects to the existing relationships
// of the role_command, optionally inserting them as new records.
// Appends related to o.R.NextRoleCommandRoleMenus.
// Sets related.R.NextRoleCommand appropriately.
func (o *RoleCommand) AddNextRoleCommandRoleMenus(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoleMenu) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.NextRoleCommandID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"role_menus\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"next_role_command_id"}),
				strmangle.WhereClause("\"", "\"", 2, roleMenuPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.MessageID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.NextRoleCommandID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &roleCommandR{
			NextRoleCommandRoleMenus: related,
		}
	} else {
		o.R.NextRoleCommandRoleMenus = append(o.R.NextRoleCommandRoleMenus, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleMenuR{
				NextRoleCommand: o,
			}
		} else {
			rel.R.NextRoleCommand = o
		}
	}
	return nil
}

// SetNextRoleCommandRoleMenusG removes all previously related items of the
// role_command replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.NextRoleCommand's NextRoleCommandRoleMenus accordingly.
// Replaces o.R.NextRoleCommandRoleMenus with related.
// Sets related.R.NextRoleCommand's NextRoleCommandRoleMenus accordingly.
// Uses the global database handle.
func (o *RoleCommand) SetNextRoleCommandRoleMenusG(ctx context.Context, insert bool, related ...*RoleMenu) error {
	return o.SetNextRoleCommandRoleMenus(ctx, boil.GetContextDB(), insert, related...)
}

// SetNextRoleCommandRoleMenus removes all previously related items of the
// role_command replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.NextRoleCommand's NextRoleCommandRoleMenus accordingly.
// Replaces o.R.NextRoleCommandRoleMenus with related.
// Sets related.R.NextRoleCommand's NextRoleCommandRoleMenus accordingly.
func (o *RoleCommand) SetNextRoleCommandRoleMenus(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoleMenu) error {
	query := "update \"role_menus\" set \"next_role_command_id\" = null where \"next_role_command_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.NextRoleCommandRoleMenus {
			queries.SetScanner(&rel.NextRoleCommandID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.NextRoleCommand = nil
		}

		o.R.NextRoleCommandRoleMenus = nil
	}
	return o.AddNextRoleCommandRoleMenus(ctx, exec, insert, related...)
}

// RemoveNextRoleCommandRoleMenusG relationships from objects passed in.
// Removes related items from R.NextRoleCommandRoleMenus (uses pointer comparison, removal does not keep order)
// Sets related.R.NextRoleCommand.
// Uses the global database handle.
func (o *RoleCommand) RemoveNextRoleCommandRoleMenusG(ctx context.Context, related ...*RoleMenu) error {
	return o.RemoveNextRoleCommandRoleMenus(ctx, boil.GetContextDB(), related...)
}

// RemoveNextRoleCommandRoleMenus relationships from objects passed in.
// Removes related items from R.NextRoleCommandRoleMenus (uses pointer comparison, removal does not keep order)
// Sets related.R.NextRoleCommand.
func (o *RoleCommand) RemoveNextRoleCommandRoleMenus(ctx context.Context, exec boil.ContextExecutor, related ...*RoleMenu) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.NextRoleCommandID, nil)
		if rel.R != nil {
			rel.R.NextRoleCommand = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("next_role_command_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.NextRoleCommandRoleMenus {
			if rel != ri {
				continue
			}

			ln := len(o.R.NextRoleCommandRoleMenus)
			if ln > 1 && i < ln-1 {
				o.R.NextRoleCommandRoleMenus[i] = o.R.NextRoleCommandRoleMenus[ln-1]
			}
			o.R.NextRoleCommandRoleMenus = o.R.NextRoleCommandRoleMenus[:ln-1]
			break
		}
	}

	return nil
}

// RoleCommands retrieves all the records using an executor.
func RoleCommands(mods ...qm.QueryMod) roleCommandQuery {
	mods = append(mods, qm.From("\"role_commands\""))
	return roleCommandQuery{NewQuery(mods...)}
}

// FindRoleCommandG retrieves a single record by ID.
func FindRoleCommandG(ctx context.Context, iD int64, selectCols ...string) (*RoleCommand, error) {
	return FindRoleCommand(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRoleCommand retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoleCommand(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*RoleCommand, error) {
	roleCommandObj := &RoleCommand{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"role_commands\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, roleCommandObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from role_commands")
	}

	return roleCommandObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RoleCommand) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RoleCommand) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no role_commands provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(roleCommandColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roleCommandInsertCacheMut.RLock()
	cache, cached := roleCommandInsertCache[key]
	roleCommandInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roleCommandAllColumns,
			roleCommandColumnsWithDefault,
			roleCommandColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roleCommandType, roleCommandMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roleCommandType, roleCommandMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"role_commands\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"role_commands\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into role_commands")
	}

	if !cached {
		roleCommandInsertCacheMut.Lock()
		roleCommandInsertCache[key] = cache
		roleCommandInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single RoleCommand record using the global executor.
// See Update for more documentation.
func (o *RoleCommand) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the RoleCommand.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RoleCommand) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	roleCommandUpdateCacheMut.RLock()
	cache, cached := roleCommandUpdateCache[key]
	roleCommandUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roleCommandAllColumns,
			roleCommandPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update role_commands, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"role_commands\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, roleCommandPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roleCommandType, roleCommandMapping, append(wl, roleCommandPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update role_commands row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for role_commands")
	}

	if !cached {
		roleCommandUpdateCacheMut.Lock()
		roleCommandUpdateCache[key] = cache
		roleCommandUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q roleCommandQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q roleCommandQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for role_commands")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for role_commands")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RoleCommandSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoleCommandSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleCommandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"role_commands\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, roleCommandPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in roleCommand slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all roleCommand")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RoleCommand) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RoleCommand) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no role_commands provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(roleCommandColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roleCommandUpsertCacheMut.RLock()
	cache, cached := roleCommandUpsertCache[key]
	roleCommandUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			roleCommandAllColumns,
			roleCommandColumnsWithDefault,
			roleCommandColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			roleCommandAllColumns,
			roleCommandPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert role_commands, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(roleCommandPrimaryKeyColumns))
			copy(conflict, roleCommandPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"role_commands\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(roleCommandType, roleCommandMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roleCommandType, roleCommandMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert role_commands")
	}

	if !cached {
		roleCommandUpsertCacheMut.Lock()
		roleCommandUpsertCache[key] = cache
		roleCommandUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single RoleCommand record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RoleCommand) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single RoleCommand record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoleCommand) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RoleCommand provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roleCommandPrimaryKeyMapping)
	sql := "DELETE FROM \"role_commands\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from role_commands")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for role_commands")
	}

	return rowsAff, nil
}

func (q roleCommandQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q roleCommandQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no roleCommandQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from role_commands")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_commands")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RoleCommandSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoleCommandSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleCommandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"role_commands\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleCommandPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from roleCommand slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_commands")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RoleCommand) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no RoleCommand provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoleCommand) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoleCommand(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleCommandSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty RoleCommandSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleCommandSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoleCommandSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleCommandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"role_commands\".* FROM \"role_commands\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleCommandPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoleCommandSlice")
	}

	*o = slice

	return nil
}

// RoleCommandExistsG checks if the RoleCommand row exists.
func RoleCommandExistsG(ctx context.Context, iD int64) (bool, error) {
	return RoleCommandExists(ctx, boil.GetContextDB(), iD)
}

// RoleCommandExists checks if the RoleCommand row exists.
func RoleCommandExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"role_commands\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if role_commands exists")
	}

	return exists, nil
}
