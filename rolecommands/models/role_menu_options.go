// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// RoleMenuOption is an object representing the database table.
type RoleMenuOption struct {
	ID               int64            `boil:"id" json:"id" toml:"id" yaml:"id"`
	RoleCommandID    null.Int64       `boil:"role_command_id" json:"role_command_id,omitempty" toml:"role_command_id" yaml:"role_command_id,omitempty"`
	EmojiID          int64            `boil:"emoji_id" json:"emoji_id" toml:"emoji_id" yaml:"emoji_id"`
	UnicodeEmoji     string           `boil:"unicode_emoji" json:"unicode_emoji" toml:"unicode_emoji" yaml:"unicode_emoji"`
	RoleMenuID       int64            `boil:"role_menu_id" json:"role_menu_id" toml:"role_menu_id" yaml:"role_menu_id"`
	StandaloneRoleID null.Int64       `boil:"standalone_role_id" json:"standalone_role_id,omitempty" toml:"standalone_role_id" yaml:"standalone_role_id,omitempty"`
	BlacklistRoles   types.Int64Array `boil:"blacklist_roles" json:"blacklist_roles,omitempty" toml:"blacklist_roles" yaml:"blacklist_roles,omitempty"`
	WhitelistRoles   types.Int64Array `boil:"whitelist_roles" json:"whitelist_roles,omitempty" toml:"whitelist_roles" yaml:"whitelist_roles,omitempty"`
	EmojiAnimated    bool             `boil:"emoji_animated" json:"emoji_animated" toml:"emoji_animated" yaml:"emoji_animated"`

	R *roleMenuOptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roleMenuOptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoleMenuOptionColumns = struct {
	ID               string
	RoleCommandID    string
	EmojiID          string
	UnicodeEmoji     string
	RoleMenuID       string
	StandaloneRoleID string
	BlacklistRoles   string
	WhitelistRoles   string
	EmojiAnimated    string
}{
	ID:               "id",
	RoleCommandID:    "role_command_id",
	EmojiID:          "emoji_id",
	UnicodeEmoji:     "unicode_emoji",
	RoleMenuID:       "role_menu_id",
	StandaloneRoleID: "standalone_role_id",
	BlacklistRoles:   "blacklist_roles",
	WhitelistRoles:   "whitelist_roles",
	EmojiAnimated:    "emoji_animated",
}

// Generated where

var RoleMenuOptionWhere = struct {
	ID               whereHelperint64
	RoleCommandID    whereHelpernull_Int64
	EmojiID          whereHelperint64
	UnicodeEmoji     whereHelperstring
	RoleMenuID       whereHelperint64
	StandaloneRoleID whereHelpernull_Int64
	BlacklistRoles   whereHelpertypes_Int64Array
	WhitelistRoles   whereHelpertypes_Int64Array
	EmojiAnimated    whereHelperbool
}{
	ID:               whereHelperint64{field: "\"role_menu_options\".\"id\""},
	RoleCommandID:    whereHelpernull_Int64{field: "\"role_menu_options\".\"role_command_id\""},
	EmojiID:          whereHelperint64{field: "\"role_menu_options\".\"emoji_id\""},
	UnicodeEmoji:     whereHelperstring{field: "\"role_menu_options\".\"unicode_emoji\""},
	RoleMenuID:       whereHelperint64{field: "\"role_menu_options\".\"role_menu_id\""},
	StandaloneRoleID: whereHelpernull_Int64{field: "\"role_menu_options\".\"standalone_role_id\""},
	BlacklistRoles:   whereHelpertypes_Int64Array{field: "\"role_menu_options\".\"blacklist_roles\""},
	WhitelistRoles:   whereHelpertypes_Int64Array{field: "\"role_menu_options\".\"whitelist_roles\""},
	EmojiAnimated:    whereHelperbool{field: "\"role_menu_options\".\"emoji_animated\""},
}

// RoleMenuOptionRels is where relationship names are stored.
var RoleMenuOptionRels = struct {
	RoleCommand            string
	RoleMenu               string
	EditingOptionRoleMenus string
}{
	RoleCommand:            "RoleCommand",
	RoleMenu:               "RoleMenu",
	EditingOptionRoleMenus: "EditingOptionRoleMenus",
}

// roleMenuOptionR is where relationships are stored.
type roleMenuOptionR struct {
	RoleCommand            *RoleCommand  `boil:"RoleCommand" json:"RoleCommand" toml:"RoleCommand" yaml:"RoleCommand"`
	RoleMenu               *RoleMenu     `boil:"RoleMenu" json:"RoleMenu" toml:"RoleMenu" yaml:"RoleMenu"`
	EditingOptionRoleMenus RoleMenuSlice `boil:"EditingOptionRoleMenus" json:"EditingOptionRoleMenus" toml:"EditingOptionRoleMenus" yaml:"EditingOptionRoleMenus"`
}

// NewStruct creates a new relationship struct
func (*roleMenuOptionR) NewStruct() *roleMenuOptionR {
	return &roleMenuOptionR{}
}

// roleMenuOptionL is where Load methods for each relationship are stored.
type roleMenuOptionL struct{}

var (
	roleMenuOptionAllColumns            = []string{"id", "role_command_id", "emoji_id", "unicode_emoji", "role_menu_id", "standalone_role_id", "blacklist_roles", "whitelist_roles", "emoji_animated"}
	roleMenuOptionColumnsWithoutDefault = []string{"role_command_id", "emoji_id", "unicode_emoji", "role_menu_id", "standalone_role_id", "blacklist_roles", "whitelist_roles"}
	roleMenuOptionColumnsWithDefault    = []string{"id", "emoji_animated"}
	roleMenuOptionPrimaryKeyColumns     = []string{"id"}
)

type (
	// RoleMenuOptionSlice is an alias for a slice of pointers to RoleMenuOption.
	// This should generally be used opposed to []RoleMenuOption.
	RoleMenuOptionSlice []*RoleMenuOption

	roleMenuOptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roleMenuOptionType                 = reflect.TypeOf(&RoleMenuOption{})
	roleMenuOptionMapping              = queries.MakeStructMapping(roleMenuOptionType)
	roleMenuOptionPrimaryKeyMapping, _ = queries.BindMapping(roleMenuOptionType, roleMenuOptionMapping, roleMenuOptionPrimaryKeyColumns)
	roleMenuOptionInsertCacheMut       sync.RWMutex
	roleMenuOptionInsertCache          = make(map[string]insertCache)
	roleMenuOptionUpdateCacheMut       sync.RWMutex
	roleMenuOptionUpdateCache          = make(map[string]updateCache)
	roleMenuOptionUpsertCacheMut       sync.RWMutex
	roleMenuOptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single roleMenuOption record from the query using the global executor.
func (q roleMenuOptionQuery) OneG(ctx context.Context) (*RoleMenuOption, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single roleMenuOption record from the query.
func (q roleMenuOptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RoleMenuOption, error) {
	o := &RoleMenuOption{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for role_menu_options")
	}

	return o, nil
}

// AllG returns all RoleMenuOption records from the query using the global executor.
func (q roleMenuOptionQuery) AllG(ctx context.Context) (RoleMenuOptionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all RoleMenuOption records from the query.
func (q roleMenuOptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoleMenuOptionSlice, error) {
	var o []*RoleMenuOption

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RoleMenuOption slice")
	}

	return o, nil
}

// CountG returns the count of all RoleMenuOption records in the query, and panics on error.
func (q roleMenuOptionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all RoleMenuOption records in the query.
func (q roleMenuOptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count role_menu_options rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q roleMenuOptionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q roleMenuOptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if role_menu_options exists")
	}

	return count > 0, nil
}

// RoleCommand pointed to by the foreign key.
func (o *RoleMenuOption) RoleCommand(mods ...qm.QueryMod) roleCommandQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RoleCommandID),
	}

	queryMods = append(queryMods, mods...)

	query := RoleCommands(queryMods...)
	queries.SetFrom(query.Query, "\"role_commands\"")

	return query
}

// RoleMenu pointed to by the foreign key.
func (o *RoleMenuOption) RoleMenu(mods ...qm.QueryMod) roleMenuQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"message_id\" = ?", o.RoleMenuID),
	}

	queryMods = append(queryMods, mods...)

	query := RoleMenus(queryMods...)
	queries.SetFrom(query.Query, "\"role_menus\"")

	return query
}

// EditingOptionRoleMenus retrieves all the role_menu's RoleMenus with an executor via editing_option_id column.
func (o *RoleMenuOption) EditingOptionRoleMenus(mods ...qm.QueryMod) roleMenuQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"role_menus\".\"editing_option_id\"=?", o.ID),
	)

	query := RoleMenus(queryMods...)
	queries.SetFrom(query.Query, "\"role_menus\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"role_menus\".*"})
	}

	return query
}

// LoadRoleCommand allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleMenuOptionL) LoadRoleCommand(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleMenuOption interface{}, mods queries.Applicator) error {
	var slice []*RoleMenuOption
	var object *RoleMenuOption

	if singular {
		object = maybeRoleMenuOption.(*RoleMenuOption)
	} else {
		slice = *maybeRoleMenuOption.(*[]*RoleMenuOption)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleMenuOptionR{}
		}
		if !queries.IsNil(object.RoleCommandID) {
			args = append(args, object.RoleCommandID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleMenuOptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RoleCommandID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RoleCommandID) {
				args = append(args, obj.RoleCommandID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`role_commands`),
		qm.WhereIn(`role_commands.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RoleCommand")
	}

	var resultSlice []*RoleCommand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RoleCommand")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for role_commands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for role_commands")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RoleCommand = foreign
		if foreign.R == nil {
			foreign.R = &roleCommandR{}
		}
		foreign.R.RoleMenuOptions = append(foreign.R.RoleMenuOptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RoleCommandID, foreign.ID) {
				local.R.RoleCommand = foreign
				if foreign.R == nil {
					foreign.R = &roleCommandR{}
				}
				foreign.R.RoleMenuOptions = append(foreign.R.RoleMenuOptions, local)
				break
			}
		}
	}

	return nil
}

// LoadRoleMenu allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleMenuOptionL) LoadRoleMenu(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleMenuOption interface{}, mods queries.Applicator) error {
	var slice []*RoleMenuOption
	var object *RoleMenuOption

	if singular {
		object = maybeRoleMenuOption.(*RoleMenuOption)
	} else {
		slice = *maybeRoleMenuOption.(*[]*RoleMenuOption)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleMenuOptionR{}
		}
		args = append(args, object.RoleMenuID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleMenuOptionR{}
			}

			for _, a := range args {
				if a == obj.RoleMenuID {
					continue Outer
				}
			}

			args = append(args, obj.RoleMenuID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`role_menus`),
		qm.WhereIn(`role_menus.message_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RoleMenu")
	}

	var resultSlice []*RoleMenu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RoleMenu")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for role_menus")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for role_menus")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RoleMenu = foreign
		if foreign.R == nil {
			foreign.R = &roleMenuR{}
		}
		foreign.R.RoleMenuOptions = append(foreign.R.RoleMenuOptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleMenuID == foreign.MessageID {
				local.R.RoleMenu = foreign
				if foreign.R == nil {
					foreign.R = &roleMenuR{}
				}
				foreign.R.RoleMenuOptions = append(foreign.R.RoleMenuOptions, local)
				break
			}
		}
	}

	return nil
}

// LoadEditingOptionRoleMenus allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (roleMenuOptionL) LoadEditingOptionRoleMenus(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleMenuOption interface{}, mods queries.Applicator) error {
	var slice []*RoleMenuOption
	var object *RoleMenuOption

	if singular {
		object = maybeRoleMenuOption.(*RoleMenuOption)
	} else {
		slice = *maybeRoleMenuOption.(*[]*RoleMenuOption)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleMenuOptionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleMenuOptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`role_menus`),
		qm.WhereIn(`role_menus.editing_option_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load role_menus")
	}

	var resultSlice []*RoleMenu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice role_menus")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on role_menus")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for role_menus")
	}

	if singular {
		object.R.EditingOptionRoleMenus = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roleMenuR{}
			}
			foreign.R.EditingOption = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EditingOptionID) {
				local.R.EditingOptionRoleMenus = append(local.R.EditingOptionRoleMenus, foreign)
				if foreign.R == nil {
					foreign.R = &roleMenuR{}
				}
				foreign.R.EditingOption = local
				break
			}
		}
	}

	return nil
}

// SetRoleCommandG of the roleMenuOption to the related item.
// Sets o.R.RoleCommand to related.
// Adds o to related.R.RoleMenuOptions.
// Uses the global database handle.
func (o *RoleMenuOption) SetRoleCommandG(ctx context.Context, insert bool, related *RoleCommand) error {
	return o.SetRoleCommand(ctx, boil.GetContextDB(), insert, related)
}

// SetRoleCommand of the roleMenuOption to the related item.
// Sets o.R.RoleCommand to related.
// Adds o to related.R.RoleMenuOptions.
func (o *RoleMenuOption) SetRoleCommand(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RoleCommand) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_menu_options\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"role_command_id"}),
		strmangle.WhereClause("\"", "\"", 2, roleMenuOptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RoleCommandID, related.ID)
	if o.R == nil {
		o.R = &roleMenuOptionR{
			RoleCommand: related,
		}
	} else {
		o.R.RoleCommand = related
	}

	if related.R == nil {
		related.R = &roleCommandR{
			RoleMenuOptions: RoleMenuOptionSlice{o},
		}
	} else {
		related.R.RoleMenuOptions = append(related.R.RoleMenuOptions, o)
	}

	return nil
}

// RemoveRoleCommandG relationship.
// Sets o.R.RoleCommand to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *RoleMenuOption) RemoveRoleCommandG(ctx context.Context, related *RoleCommand) error {
	return o.RemoveRoleCommand(ctx, boil.GetContextDB(), related)
}

// RemoveRoleCommand relationship.
// Sets o.R.RoleCommand to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *RoleMenuOption) RemoveRoleCommand(ctx context.Context, exec boil.ContextExecutor, related *RoleCommand) error {
	var err error

	queries.SetScanner(&o.RoleCommandID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("role_command_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.RoleCommand = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RoleMenuOptions {
		if queries.Equal(o.RoleCommandID, ri.RoleCommandID) {
			continue
		}

		ln := len(related.R.RoleMenuOptions)
		if ln > 1 && i < ln-1 {
			related.R.RoleMenuOptions[i] = related.R.RoleMenuOptions[ln-1]
		}
		related.R.RoleMenuOptions = related.R.RoleMenuOptions[:ln-1]
		break
	}
	return nil
}

// SetRoleMenuG of the roleMenuOption to the related item.
// Sets o.R.RoleMenu to related.
// Adds o to related.R.RoleMenuOptions.
// Uses the global database handle.
func (o *RoleMenuOption) SetRoleMenuG(ctx context.Context, insert bool, related *RoleMenu) error {
	return o.SetRoleMenu(ctx, boil.GetContextDB(), insert, related)
}

// SetRoleMenu of the roleMenuOption to the related item.
// Sets o.R.RoleMenu to related.
// Adds o to related.R.RoleMenuOptions.
func (o *RoleMenuOption) SetRoleMenu(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RoleMenu) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_menu_options\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"role_menu_id"}),
		strmangle.WhereClause("\"", "\"", 2, roleMenuOptionPrimaryKeyColumns),
	)
	values := []interface{}{related.MessageID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleMenuID = related.MessageID
	if o.R == nil {
		o.R = &roleMenuOptionR{
			RoleMenu: related,
		}
	} else {
		o.R.RoleMenu = related
	}

	if related.R == nil {
		related.R = &roleMenuR{
			RoleMenuOptions: RoleMenuOptionSlice{o},
		}
	} else {
		related.R.RoleMenuOptions = append(related.R.RoleMenuOptions, o)
	}

	return nil
}

// AddEditingOptionRoleMenusG adds the given related objects to the existing relationships
// of the role_menu_option, optionally inserting them as new records.
// Appends related to o.R.EditingOptionRoleMenus.
// Sets related.R.EditingOption appropriately.
// Uses the global database handle.
func (o *RoleMenuOption) AddEditingOptionRoleMenusG(ctx context.Context, insert bool, related ...*RoleMenu) error {
	return o.AddEditingOptionRoleMenus(ctx, boil.GetContextDB(), insert, related...)
}

// AddEditingOptionRoleMenus adds the given related objects to the existing relationships
// of the role_menu_option, optionally inserting them as new records.
// Appends related to o.R.EditingOptionRoleMenus.
// Sets related.R.EditingOption appropriately.
func (o *RoleMenuOption) AddEditingOptionRoleMenus(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoleMenu) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EditingOptionID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"role_menus\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"editing_option_id"}),
				strmangle.WhereClause("\"", "\"", 2, roleMenuPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.MessageID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EditingOptionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &roleMenuOptionR{
			EditingOptionRoleMenus: related,
		}
	} else {
		o.R.EditingOptionRoleMenus = append(o.R.EditingOptionRoleMenus, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleMenuR{
				EditingOption: o,
			}
		} else {
			rel.R.EditingOption = o
		}
	}
	return nil
}

// SetEditingOptionRoleMenusG removes all previously related items of the
// role_menu_option replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EditingOption's EditingOptionRoleMenus accordingly.
// Replaces o.R.EditingOptionRoleMenus with related.
// Sets related.R.EditingOption's EditingOptionRoleMenus accordingly.
// Uses the global database handle.
func (o *RoleMenuOption) SetEditingOptionRoleMenusG(ctx context.Context, insert bool, related ...*RoleMenu) error {
	return o.SetEditingOptionRoleMenus(ctx, boil.GetContextDB(), insert, related...)
}

// SetEditingOptionRoleMenus removes all previously related items of the
// role_menu_option replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EditingOption's EditingOptionRoleMenus accordingly.
// Replaces o.R.EditingOptionRoleMenus with related.
// Sets related.R.EditingOption's EditingOptionRoleMenus accordingly.
func (o *RoleMenuOption) SetEditingOptionRoleMenus(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoleMenu) error {
	query := "update \"role_menus\" set \"editing_option_id\" = null where \"editing_option_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EditingOptionRoleMenus {
			queries.SetScanner(&rel.EditingOptionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EditingOption = nil
		}

		o.R.EditingOptionRoleMenus = nil
	}
	return o.AddEditingOptionRoleMenus(ctx, exec, insert, related...)
}

// RemoveEditingOptionRoleMenusG relationships from objects passed in.
// Removes related items from R.EditingOptionRoleMenus (uses pointer comparison, removal does not keep order)
// Sets related.R.EditingOption.
// Uses the global database handle.
func (o *RoleMenuOption) RemoveEditingOptionRoleMenusG(ctx context.Context, related ...*RoleMenu) error {
	return o.RemoveEditingOptionRoleMenus(ctx, boil.GetContextDB(), related...)
}

// RemoveEditingOptionRoleMenus relationships from objects passed in.
// Removes related items from R.EditingOptionRoleMenus (uses pointer comparison, removal does not keep order)
// Sets related.R.EditingOption.
func (o *RoleMenuOption) RemoveEditingOptionRoleMenus(ctx context.Context, exec boil.ContextExecutor, related ...*RoleMenu) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EditingOptionID, nil)
		if rel.R != nil {
			rel.R.EditingOption = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("editing_option_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EditingOptionRoleMenus {
			if rel != ri {
				continue
			}

			ln := len(o.R.EditingOptionRoleMenus)
			if ln > 1 && i < ln-1 {
				o.R.EditingOptionRoleMenus[i] = o.R.EditingOptionRoleMenus[ln-1]
			}
			o.R.EditingOptionRoleMenus = o.R.EditingOptionRoleMenus[:ln-1]
			break
		}
	}

	return nil
}

// RoleMenuOptions retrieves all the records using an executor.
func RoleMenuOptions(mods ...qm.QueryMod) roleMenuOptionQuery {
	mods = append(mods, qm.From("\"role_menu_options\""))
	return roleMenuOptionQuery{NewQuery(mods...)}
}

// FindRoleMenuOptionG retrieves a single record by ID.
func FindRoleMenuOptionG(ctx context.Context, iD int64, selectCols ...string) (*RoleMenuOption, error) {
	return FindRoleMenuOption(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRoleMenuOption retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoleMenuOption(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*RoleMenuOption, error) {
	roleMenuOptionObj := &RoleMenuOption{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"role_menu_options\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, roleMenuOptionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from role_menu_options")
	}

	return roleMenuOptionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RoleMenuOption) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RoleMenuOption) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no role_menu_options provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(roleMenuOptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roleMenuOptionInsertCacheMut.RLock()
	cache, cached := roleMenuOptionInsertCache[key]
	roleMenuOptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roleMenuOptionAllColumns,
			roleMenuOptionColumnsWithDefault,
			roleMenuOptionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roleMenuOptionType, roleMenuOptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roleMenuOptionType, roleMenuOptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"role_menu_options\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"role_menu_options\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into role_menu_options")
	}

	if !cached {
		roleMenuOptionInsertCacheMut.Lock()
		roleMenuOptionInsertCache[key] = cache
		roleMenuOptionInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single RoleMenuOption record using the global executor.
// See Update for more documentation.
func (o *RoleMenuOption) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the RoleMenuOption.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RoleMenuOption) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	roleMenuOptionUpdateCacheMut.RLock()
	cache, cached := roleMenuOptionUpdateCache[key]
	roleMenuOptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roleMenuOptionAllColumns,
			roleMenuOptionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update role_menu_options, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"role_menu_options\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, roleMenuOptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roleMenuOptionType, roleMenuOptionMapping, append(wl, roleMenuOptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update role_menu_options row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for role_menu_options")
	}

	if !cached {
		roleMenuOptionUpdateCacheMut.Lock()
		roleMenuOptionUpdateCache[key] = cache
		roleMenuOptionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q roleMenuOptionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q roleMenuOptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for role_menu_options")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for role_menu_options")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RoleMenuOptionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoleMenuOptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleMenuOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"role_menu_options\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, roleMenuOptionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in roleMenuOption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all roleMenuOption")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RoleMenuOption) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RoleMenuOption) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no role_menu_options provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(roleMenuOptionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roleMenuOptionUpsertCacheMut.RLock()
	cache, cached := roleMenuOptionUpsertCache[key]
	roleMenuOptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			roleMenuOptionAllColumns,
			roleMenuOptionColumnsWithDefault,
			roleMenuOptionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			roleMenuOptionAllColumns,
			roleMenuOptionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert role_menu_options, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(roleMenuOptionPrimaryKeyColumns))
			copy(conflict, roleMenuOptionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"role_menu_options\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(roleMenuOptionType, roleMenuOptionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roleMenuOptionType, roleMenuOptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert role_menu_options")
	}

	if !cached {
		roleMenuOptionUpsertCacheMut.Lock()
		roleMenuOptionUpsertCache[key] = cache
		roleMenuOptionUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single RoleMenuOption record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RoleMenuOption) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single RoleMenuOption record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoleMenuOption) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RoleMenuOption provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roleMenuOptionPrimaryKeyMapping)
	sql := "DELETE FROM \"role_menu_options\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from role_menu_options")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for role_menu_options")
	}

	return rowsAff, nil
}

func (q roleMenuOptionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q roleMenuOptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no roleMenuOptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from role_menu_options")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_menu_options")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RoleMenuOptionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoleMenuOptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleMenuOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"role_menu_options\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleMenuOptionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from roleMenuOption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_menu_options")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RoleMenuOption) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no RoleMenuOption provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoleMenuOption) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoleMenuOption(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleMenuOptionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty RoleMenuOptionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleMenuOptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoleMenuOptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleMenuOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"role_menu_options\".* FROM \"role_menu_options\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleMenuOptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoleMenuOptionSlice")
	}

	*o = slice

	return nil
}

// RoleMenuOptionExistsG checks if the RoleMenuOption row exists.
func RoleMenuOptionExistsG(ctx context.Context, iD int64) (bool, error) {
	return RoleMenuOptionExists(ctx, boil.GetContextDB(), iD)
}

// RoleMenuOptionExists checks if the RoleMenuOption row exists.
func RoleMenuOptionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"role_menu_options\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if role_menu_options exists")
	}

	return exists, nil
}
