// Code generated by "esc -o assets_gen.go -pkg customcommands -ignore .go assets/"; DO NOT EDIT.

package customcommands

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/customcommands.html": {
		local:   "assets/customcommands.html",
		size:    13408,
		modtime: 1525251003,
		compressed: `
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
`,
	},

	"/assets/help-page.md": {
		local:   "assets/help-page.md",
		size:    991,
		modtime: 1524119236,
		compressed: `
H4sIAAAAAAAC/2xTy27bQAy86yvm1sRwontuafq4Fm2BoggCmNZS0iKrpbqk/Pj7YrWKGhc+GSZndoZD
6mlSkwGNDANFp6AQ5IizTDBBk5iM878EOcYVtYX1jOaCCj2r8QAf8fvx67dPH+EVKgMfe7IMGgOfkIEN
RewZk7JDK2kGgdyBYsMOalPbbrGfDBKbWRxqlAyR2fnY4cDpfPHgypWRE5mXqIXWyxQcElMIZ1jv4yto
L5NhoNf8khpFR0EiYy82m/F2X1WPIfw3naInBcGS7zpOOQCvecJ5uqWqV2IpUTnftpw4rlDYeWQFJX6o
Ktxhs3kq+M3mAb+89UXgnRxjYFXqeHZisoRyLFhe1zAmbv1pnmXem3I6cMLN7m6H/RmOW5qC3aKVvGl2
uZj51NhE4U2xePqRJXTWmH31HEGrD/3XLVIX3CeJRj7qFWKztK6wPp+oyeux5poi/5koXKN9545PmfDz
XWrllvXtmCdlEFJGYiQzTrHkWkocOx+Xq/SK504+aGmNLze92agPdd1JoNjdS+rq8bWrS7u+3cK32DWk
DOWo3vyBd/mVKAZlW76X3PdxRaAN1GUUOccuW8yoN/PLAquq+iIJgySGYyMfdAtlnrHPxsMYyPItO2n0
5abOP/VSZr39GwAA//9iIgf23wMAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
