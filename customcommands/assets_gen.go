// Code generated by "esc -o assets_gen.go -pkg customcommands -ignore .go assets/"; DO NOT EDIT.

package customcommands

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/customcommands.html": {
		local:   "assets/customcommands.html",
		size:    7593,
		modtime: 1519761931,
		compressed: `
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
W5zSaejS0X8CAAD//w2aL4ipHQAA
`,
	},

	"/assets/help-page.md": {
		local:   "assets/help-page.md",
		size:    991,
		modtime: 1519494558,
		compressed: `
H4sIAAAAAAAC/2xTy27bQAy86yvm1sRwontuafq4Fm2BoggCmNZS0iKrpbqk/Pj7YrWKGhc+GSZndoZD
6mlSkwGNDANFp6AQ5IizTDBBk5iM878EOcYVtYX1jOaCCj2r8QAf8fvx67dPH+EVKgMfe7IMGgOfkIEN
RewZk7JDK2kGgdyBYsMOalPbbrGfDBKbWRxqlAyR2fnY4cDpfPHgypWRE5mXqIXWyxQcElMIZ1jv4yto
L5NhoNf8khpFR0EiYy82m/F2X1WPIfw3naInBcGS7zpOOQCvecJ5uqWqV2IpUTnftpw4rlDYeWQFJX6o
Ktxhs3kq+M3mAb+89UXgnRxjYFXqeHZisoRyLFhe1zAmbv1pnmXem3I6cMLN7m6H/RmOW5qC3aKVvGl2
uZj51NhE4U2xePqRJXTWmH31HEGrD/3XLVIX3CeJRj7qFWKztK6wPp+oyeux5poi/5koXKN9545PmfDz
XWrllvXtmCdlEFJGYiQzTrHkWkocOx+Xq/SK504+aGmNLze92agPdd1JoNjdS+rq8bWrS7u+3cK32DWk
DOWo3vyBd/mVKAZlW76X3PdxRaAN1GUUOccuW8yoN/PLAquq+iIJgySGYyMfdAtlnrHPxsMYyPItO2n0
5abOP/VSZr39GwAA//9iIgf23wMAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
