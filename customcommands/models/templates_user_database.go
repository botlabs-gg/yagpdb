// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// TemplatesUserDatabase is an object representing the database table.
type TemplatesUserDatabase struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ExpiresAt null.Time `boil:"expires_at" json:"expires_at,omitempty" toml:"expires_at" yaml:"expires_at,omitempty"`
	GuildID   int64     `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	UserID    int64     `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Key       string    `boil:"key" json:"key" toml:"key" yaml:"key"`
	ValueNum  float64   `boil:"value_num" json:"value_num" toml:"value_num" yaml:"value_num"`
	ValueRaw  []byte    `boil:"value_raw" json:"value_raw" toml:"value_raw" yaml:"value_raw"`

	R *templatesUserDatabaseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L templatesUserDatabaseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TemplatesUserDatabaseColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	ExpiresAt string
	GuildID   string
	UserID    string
	Key       string
	ValueNum  string
	ValueRaw  string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	ExpiresAt: "expires_at",
	GuildID:   "guild_id",
	UserID:    "user_id",
	Key:       "key",
	ValueNum:  "value_num",
	ValueRaw:  "value_raw",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var TemplatesUserDatabaseWhere = struct {
	ID        whereHelperint64
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	ExpiresAt whereHelpernull_Time
	GuildID   whereHelperint64
	UserID    whereHelperint64
	Key       whereHelperstring
	ValueNum  whereHelperfloat64
	ValueRaw  whereHelper__byte
}{
	ID:        whereHelperint64{field: "\"templates_user_database\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"templates_user_database\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"templates_user_database\".\"updated_at\""},
	ExpiresAt: whereHelpernull_Time{field: "\"templates_user_database\".\"expires_at\""},
	GuildID:   whereHelperint64{field: "\"templates_user_database\".\"guild_id\""},
	UserID:    whereHelperint64{field: "\"templates_user_database\".\"user_id\""},
	Key:       whereHelperstring{field: "\"templates_user_database\".\"key\""},
	ValueNum:  whereHelperfloat64{field: "\"templates_user_database\".\"value_num\""},
	ValueRaw:  whereHelper__byte{field: "\"templates_user_database\".\"value_raw\""},
}

// TemplatesUserDatabaseRels is where relationship names are stored.
var TemplatesUserDatabaseRels = struct {
}{}

// templatesUserDatabaseR is where relationships are stored.
type templatesUserDatabaseR struct {
}

// NewStruct creates a new relationship struct
func (*templatesUserDatabaseR) NewStruct() *templatesUserDatabaseR {
	return &templatesUserDatabaseR{}
}

// templatesUserDatabaseL is where Load methods for each relationship are stored.
type templatesUserDatabaseL struct{}

var (
	templatesUserDatabaseAllColumns            = []string{"id", "created_at", "updated_at", "expires_at", "guild_id", "user_id", "key", "value_num", "value_raw"}
	templatesUserDatabaseColumnsWithoutDefault = []string{"created_at", "updated_at", "expires_at", "guild_id", "user_id", "key", "value_num", "value_raw"}
	templatesUserDatabaseColumnsWithDefault    = []string{"id"}
	templatesUserDatabasePrimaryKeyColumns     = []string{"id"}
)

type (
	// TemplatesUserDatabaseSlice is an alias for a slice of pointers to TemplatesUserDatabase.
	// This should generally be used opposed to []TemplatesUserDatabase.
	TemplatesUserDatabaseSlice []*TemplatesUserDatabase

	templatesUserDatabaseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	templatesUserDatabaseType                 = reflect.TypeOf(&TemplatesUserDatabase{})
	templatesUserDatabaseMapping              = queries.MakeStructMapping(templatesUserDatabaseType)
	templatesUserDatabasePrimaryKeyMapping, _ = queries.BindMapping(templatesUserDatabaseType, templatesUserDatabaseMapping, templatesUserDatabasePrimaryKeyColumns)
	templatesUserDatabaseInsertCacheMut       sync.RWMutex
	templatesUserDatabaseInsertCache          = make(map[string]insertCache)
	templatesUserDatabaseUpdateCacheMut       sync.RWMutex
	templatesUserDatabaseUpdateCache          = make(map[string]updateCache)
	templatesUserDatabaseUpsertCacheMut       sync.RWMutex
	templatesUserDatabaseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single templatesUserDatabase record from the query using the global executor.
func (q templatesUserDatabaseQuery) OneG(ctx context.Context) (*TemplatesUserDatabase, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single templatesUserDatabase record from the query.
func (q templatesUserDatabaseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TemplatesUserDatabase, error) {
	o := &TemplatesUserDatabase{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for templates_user_database")
	}

	return o, nil
}

// AllG returns all TemplatesUserDatabase records from the query using the global executor.
func (q templatesUserDatabaseQuery) AllG(ctx context.Context) (TemplatesUserDatabaseSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TemplatesUserDatabase records from the query.
func (q templatesUserDatabaseQuery) All(ctx context.Context, exec boil.ContextExecutor) (TemplatesUserDatabaseSlice, error) {
	var o []*TemplatesUserDatabase

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TemplatesUserDatabase slice")
	}

	return o, nil
}

// CountG returns the count of all TemplatesUserDatabase records in the query, and panics on error.
func (q templatesUserDatabaseQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TemplatesUserDatabase records in the query.
func (q templatesUserDatabaseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count templates_user_database rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q templatesUserDatabaseQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q templatesUserDatabaseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if templates_user_database exists")
	}

	return count > 0, nil
}

// TemplatesUserDatabases retrieves all the records using an executor.
func TemplatesUserDatabases(mods ...qm.QueryMod) templatesUserDatabaseQuery {
	mods = append(mods, qm.From("\"templates_user_database\""))
	return templatesUserDatabaseQuery{NewQuery(mods...)}
}

// FindTemplatesUserDatabaseG retrieves a single record by ID.
func FindTemplatesUserDatabaseG(ctx context.Context, iD int64, selectCols ...string) (*TemplatesUserDatabase, error) {
	return FindTemplatesUserDatabase(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTemplatesUserDatabase retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTemplatesUserDatabase(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TemplatesUserDatabase, error) {
	templatesUserDatabaseObj := &TemplatesUserDatabase{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"templates_user_database\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, templatesUserDatabaseObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from templates_user_database")
	}

	return templatesUserDatabaseObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TemplatesUserDatabase) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TemplatesUserDatabase) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no templates_user_database provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(templatesUserDatabaseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	templatesUserDatabaseInsertCacheMut.RLock()
	cache, cached := templatesUserDatabaseInsertCache[key]
	templatesUserDatabaseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			templatesUserDatabaseAllColumns,
			templatesUserDatabaseColumnsWithDefault,
			templatesUserDatabaseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(templatesUserDatabaseType, templatesUserDatabaseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(templatesUserDatabaseType, templatesUserDatabaseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"templates_user_database\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"templates_user_database\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into templates_user_database")
	}

	if !cached {
		templatesUserDatabaseInsertCacheMut.Lock()
		templatesUserDatabaseInsertCache[key] = cache
		templatesUserDatabaseInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single TemplatesUserDatabase record using the global executor.
// See Update for more documentation.
func (o *TemplatesUserDatabase) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TemplatesUserDatabase.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TemplatesUserDatabase) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	templatesUserDatabaseUpdateCacheMut.RLock()
	cache, cached := templatesUserDatabaseUpdateCache[key]
	templatesUserDatabaseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			templatesUserDatabaseAllColumns,
			templatesUserDatabasePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update templates_user_database, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"templates_user_database\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, templatesUserDatabasePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(templatesUserDatabaseType, templatesUserDatabaseMapping, append(wl, templatesUserDatabasePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update templates_user_database row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for templates_user_database")
	}

	if !cached {
		templatesUserDatabaseUpdateCacheMut.Lock()
		templatesUserDatabaseUpdateCache[key] = cache
		templatesUserDatabaseUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q templatesUserDatabaseQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q templatesUserDatabaseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for templates_user_database")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for templates_user_database")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TemplatesUserDatabaseSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TemplatesUserDatabaseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templatesUserDatabasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"templates_user_database\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, templatesUserDatabasePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in templatesUserDatabase slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all templatesUserDatabase")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TemplatesUserDatabase) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TemplatesUserDatabase) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no templates_user_database provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(templatesUserDatabaseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	templatesUserDatabaseUpsertCacheMut.RLock()
	cache, cached := templatesUserDatabaseUpsertCache[key]
	templatesUserDatabaseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			templatesUserDatabaseAllColumns,
			templatesUserDatabaseColumnsWithDefault,
			templatesUserDatabaseColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			templatesUserDatabaseAllColumns,
			templatesUserDatabasePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert templates_user_database, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(templatesUserDatabasePrimaryKeyColumns))
			copy(conflict, templatesUserDatabasePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"templates_user_database\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(templatesUserDatabaseType, templatesUserDatabaseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(templatesUserDatabaseType, templatesUserDatabaseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert templates_user_database")
	}

	if !cached {
		templatesUserDatabaseUpsertCacheMut.Lock()
		templatesUserDatabaseUpsertCache[key] = cache
		templatesUserDatabaseUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single TemplatesUserDatabase record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TemplatesUserDatabase) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TemplatesUserDatabase record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TemplatesUserDatabase) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TemplatesUserDatabase provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), templatesUserDatabasePrimaryKeyMapping)
	sql := "DELETE FROM \"templates_user_database\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from templates_user_database")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for templates_user_database")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q templatesUserDatabaseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no templatesUserDatabaseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from templates_user_database")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for templates_user_database")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TemplatesUserDatabaseSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TemplatesUserDatabaseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templatesUserDatabasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"templates_user_database\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, templatesUserDatabasePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from templatesUserDatabase slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for templates_user_database")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TemplatesUserDatabase) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no TemplatesUserDatabase provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TemplatesUserDatabase) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTemplatesUserDatabase(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TemplatesUserDatabaseSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty TemplatesUserDatabaseSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TemplatesUserDatabaseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TemplatesUserDatabaseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templatesUserDatabasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"templates_user_database\".* FROM \"templates_user_database\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, templatesUserDatabasePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TemplatesUserDatabaseSlice")
	}

	*o = slice

	return nil
}

// TemplatesUserDatabaseExistsG checks if the TemplatesUserDatabase row exists.
func TemplatesUserDatabaseExistsG(ctx context.Context, iD int64) (bool, error) {
	return TemplatesUserDatabaseExists(ctx, boil.GetContextDB(), iD)
}

// TemplatesUserDatabaseExists checks if the TemplatesUserDatabase row exists.
func TemplatesUserDatabaseExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"templates_user_database\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if templates_user_database exists")
	}

	return exists, nil
}
