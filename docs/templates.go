// Code generated by "esc -o templates.go -pkg docs templates/"; DO NOT EDIT.

package docs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/ads.md": {
		local:   "templates/ads.md",
		size:    691,
		modtime: 1519494558,
		compressed: `
H4sIAAAAAAAC/zxSQW7bMBC86xUDtEBsVHYcI4GBnnrooe65H1hTK4k1xRW4Kyvs6wvSiXngYTkznBny
jMTRIIvBRkaQlRMC9wYnKXKCCUYOM2bK6CVVlBM1SI+0xOjjgEzD3F32OPfIsmClaIVXlW0kg85ibaFG
9MwBfWIuCCfRyBkmbsHeRk6QCJ7IB2z+SiRNp9fTj6EM9k6mLaQifnp1kjpsfhfM6fX05XA4vGz3TfOL
Ez8pVCZGx0Y+aCE8XHxvsMOfmiFakoCZIpd9YMXApqAkS+zwcrjWKW6eV8XMCSvz9UFfUo03J+8YXtH7
d+5Ahpevzx3lFmd0giiGkW4Mihma1XiqLVIHNTJtoYsbQQoXvLvCxiTLMGoLHzEHcozM1kIF3p4UVHyr
lYKLTJR1/+lI/b9q5Ph2eD8e3xqU9a0eJSaVeFfQiUIouAs7WpQ/dMNKWXHz6i+BsblDjcw7CiFjFvXm
JXK3rReeITFkUAiygj6Q8FMprMQrwXc3TnlHMUoun+TmO5bNtBh32+fB958GHz3dxfyuTzSxVpmYbSzc
4K9c33DfNM3/AAAA///DWIAXswIAAA==
`,
	},

	"/templates/customembed.md": {
		local:   "templates/customembed.md",
		size:    1434,
		modtime: 1519513138,
		compressed: `
H4sIAAAAAAAC/6xUwY7bNhC96yum6mXX8ErZdY3UymmDtgEKNA3QXLZxYNHUSGKW4gicoZ2tYV/6E731
F/sJhWh74zUCtAiii4h5o/fePJK6owBaOdAelSDowEIdYLfEiuGiQ2bVIMPaSAuaLHmsgE2FS+Uv99W7
21dvfnhZJEemxqwQpEVYksDPv/36Gozrg4A19/t6TdbS2rimgFak5yLPK8OafKX6PtPU5RWu0FKPnvOK
NOcemYLXyLlulXNov40Gr2j5AbVkSdTu1AMoywSB8ZHYIq0IbdYYacMyM5Tvv1wZDsqaP9DnGbwMAh67
AfEgNKxpdeYVeuUFqI5VCtIHKZKkLMsPTG6TAKSanKCTtIBUWsNQcuh78sIlLBZqsYDRiMOSUUYjGFE9
gt2uU/6+orXb7eCfv//6EyLd3NXBaTHkoCa6iEFv5g5Ak2OymFlqYvXF3G3nbu6GruvLF2VZpuPBSJww
LWAz2Etuh0hOJrKKBbbABNIqASPQKdEtckTjfvGDE/URVKOMy+COggd0FXjkYAW4pWArsET3n9vTT5kk
AACpGLE4hPLLA+zX4z1QIWtv+mHQA3xaOTQFbwfw8+fk2BTPZVrAd9Ob6fPJZHwU7pBFdf1AMJvNZlfX
N1eT67c3k2I6K6az7Pmz738/UtREgj6GBvFJjSa3OJPXlcvOjmoMO1crJcpz/izrXXPgHCzgRznMdhCI
yPbosA3d0iljT3W/TPIJr+lUg1+ZUwVp6UlATnVxX2/3yPgrBPdEsTZoK04LeHdgPiqfaP809AA5LB71
AdKVsiHCb4d7aBjqY1uWHrq24/8ilTX9H1JZ0yfS+H6fDKvh6v34eGkKSL55t/+3xrmzN69fvb/YbFiU
GA3pGZRut5fJvwEAAP//djV3NpoFAAA=
`,
	},

	"/templates/docs.ghtml": {
		local:   "templates/docs.ghtml",
		size:    994,
		modtime: 1519494558,
		compressed: `
H4sIAAAAAAAC/5xSTW+cPBA+v/sr5nUviVQvSs+ES3KpVFU5VOqxmrUHsGJmqG1YrSz+ewULCVn11AtY
9swz83zkbKl2TKCsmKgZRzVNh9K76gAAUCK0gepH9UlVpQPjMcZHVSPUqB3XMv/rs6rKwlXwLGboiBMm
Jwxl7JG3Do8n8rB89RkDO25U9fPrS1nMVdWH2hoBQ5AF9fpa4LrN4LcixhEYRx3JCFvtaSSvqsN/c1nO
AbkhOD6LecGG4jQt7QvExuztAneQ2jt+VSvlYlakyHkI/vdA4QJ3Xs4U4PgdO7qfJlXlvJyn6W3DBbGY
Z6ybENt1evm/1lAcb5cGrVdyxeCrw7V56zvc2NNjQ7M/OSfqeo+JQJn+V0toFRxn46wbNz6LhFfo3a0R
r32jH76o3ca791PUBr2XIcH78d2zD9r9aF0EFyG1BHZv/uflCk0a0IMRrl0zhGssXASWBFaYoKVAR/gm
jWNAthDJk0lwkSFApDBSAMcL1ND3FCC4pk1gJDAFuKvFWwoQL91JPAhDJyfn6X5nhHXjJu5y3H7/plL7
sD3PPuhZdQpLCp6GEIjTmre3ULQPf9e4w/Bq5cz6JPaym5DzHNkn4USc9qF9J3LD5DYJtUiicM3CGqI/
AQAA//+stVcF4gMAAA==
`,
	},

	"/templates/helping-out.md": {
		local:   "templates/helping-out.md",
		size:    3415,
		modtime: 1519494558,
		compressed: `
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
`,
	},

	"/templates/index.md": {
		local:   "templates/index.md",
		size:    1674,
		modtime: 1519494558,
		compressed: `
H4sIAAAAAAAC/4xUTW/bOBC9+1cM0kMTwFViu3Hc3JK4+ejmkKbd7bZBgVDSSGIsceghaVkt+t8XQzlu
mu0CexPEmcf3Zt7jx0o70A58hZBTFho0XnlNBgpi+HxycTM/TQaDKy9FWWBG4+sOVsgdaJNRY2v0CMrk
/b+WeAHagGUqGZ0bgiPQBXQUoFXGgyeosLZAwUPL2mtTysVuCLZG5YSFeemhQqe98ij1OYEjIdHD9AWF
NnlkrU1B3PScOwovGaEmWghuQTyUGgNXwJhR06DJI8YDaRO7XbCW2INDXiEPoa10VkGmDKQIBQWTg0pp
hclg8OIFzMkoYbzl8igplwMEYrhLQxeRVf7KWZXh19190bevcrcXewQ8SoLghOWN8oxkhnCqfUb650em
XDWEt75CxtDEGV9rj3J0PBjAq8fOY6i8t+54f79t28T2P5OMmv1OlTZPpXQDeQx396PLkB9dfhrfTu2H
i2BP518W79bLxfm35ccP5YPh/PT+6+737058kMHOktO+N7Gm3PnxY+8J3JlyVYScLz+P31OKBY8ulrfV
YvKlu5mer/6cVKfpt7Yop7+HFIVPYR+1CubB+mA2Ph+pPDsbqdl0mh0dKvV2djYZ43hyMBu9nqmDbHw4
mxw+w8YNyFPg7dzg7v76ejq9Pvljnb95v/xU8uX66O/FyB++cYu381vq8N1fzwDrTfMWcHBGxqvMQ4O/
ejuGyBADUy3OhKaDuXYZcb5xWO+jWxTTyfKvnAvoHv0k5q3USg50PIBW+yripuSHMZO4VhI6UCCGFlMw
+sBGmhw16Cv5qvUCYedc6RpzSJJkp8+BUG10WXm5BgUBQWVMzoGCNJQxLlvKJzdX0KhOorBhZZnSGhs3
FKtL6YRzsIp9F/XpDMFXym+pLQOyRge7ugBluj15Rf4FpY2cQSbpF4KuolDn/5VR2K0pUx5z2Bx7spAq
3osBqTFuZWGoleAGWYp2yWBwUntkSe8K6264DaKqHQFZFAr9zIF62LsL7S9DClaVGAe/2cLX3ce0ldpX
IY1BeyCj3NHro03i9iCu+RyVDywCyhKdvFDbTffzV0+O4h0KDLZQbPqIQTeWaYXyLLu+wgCutYvmIYM/
laAW34OTJ05Bg84J8d+PkPiZZv2rZkZL/0/nk8Ek8LFCqJX3coNB2bVlLJAZ8yE4bTKEK/BC0JN0lhjX
Y0qXwOCfAAAA//9GoFGYigYAAA==
`,
	},

	"/templates/quickstart.md": {
		local:   "templates/quickstart.md",
		size:    1290,
		modtime: 1519494558,
		compressed: `
H4sIAAAAAAAC/3xUTW/cNhC961e8ugfHgCy3TQsYvqUxYAQt2gBOD0HRA0WOJHYpjjocriL/+oJcbbYB
itwIzcd782aemg+TT1jMSFh9CJgoLNg445/s7SFsSKTIC3Qi9Kxd0zyT5uWhab7v8MRQxqS6pIe7u82M
i+u7T9vLHZofOvwea1VeFpJb8eOkt5YlkrSwwdsDOOLqVx59xB/JxxGPPlkWd9W87vDs5yVsCDWca3jj
LOccWCFHUb0JqUWfFY7jtWJlka0tqddCBWDPv05YqU9eCZHXFivBMSIrRlKYuIGHE8AXjUufENAThJwX
skoOHC3VyJFgsk4s/oUcPr55ev/4cxHk6GmtoyeSI0m60OmaHzu8OdfsJUWxUmY5RrJanpWJsZZz1K75
6ata5uhIcJUolGKzg161SCcJ98CFT13vaqKel1qI4TdWesBHzrAmgmPYYJz7nOKrPJjMkTCbWO5l77aQ
zD4lzzF1TfPnh4mE4BNMSAyDo3fE0Kws3gTMxhH6Db/4OL7lXsy39/ffvcY6eTvBcpVr5qRlHwV7IKNZ
KLUofb/569Xna+Osuevp7uXp/j0dlsfbw+Gmac4DRF6LoIMfsxDWySj9d/QOb+sJ6iScx6lCHY14zicz
JJjoQJ+WwEIwCF41UFlNolO7i3jDQFJGf3eSSHKEj8r1qnxKuZD/m/1pgykvC4uexTM9H6mFCTpVHksg
k+ptqmwFbh+AsyJpHob6KueRKAwXYr3XFiZh3qB+Lh2j+wJPyczXaQ/6hOBnr+RaRAbHurCRVIvPFuMd
BhZo+TW88kOZRKcSenc9I3B148yRtuKwiVMtK4gry6G8Odbimw7PvDuz+Gw27nxIl48Gg0kKobRwTASW
4k6lEGqiMoTMaRjHNmHwkrTS2m3VU4GU7Aj/K3ILO5loy06FzkUjx2gqfm9iJHfT/RsAAP//TTPcCwoF
AAA=
`,
	},

	"/templates/templates.md": {
		local:   "templates/templates.md",
		size:    4902,
		modtime: 1519762933,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}
