// Code generated by "esc -o templates.go -pkg docs templates/"; DO NOT EDIT.

package docs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/ads.md": {
		local:   "templates/ads.md",
		size:    691,
		modtime: 1524119236,
		compressed: `
H4sIAAAAAAAC/zxSQW7bMBC86xUDtEBsVHYcI4GBnnrooe65H1hTK4k1xRW4Kyvs6wvSiXngYTkznBny
jMTRIIvBRkaQlRMC9wYnKXKCCUYOM2bK6CVVlBM1SI+0xOjjgEzD3F32OPfIsmClaIVXlW0kg85ibaFG
9MwBfWIuCCfRyBkmbsHeRk6QCJ7IB2z+SiRNp9fTj6EM9k6mLaQifnp1kjpsfhfM6fX05XA4vGz3TfOL
Ez8pVCZGx0Y+aCE8XHxvsMOfmiFakoCZIpd9YMXApqAkS+zwcrjWKW6eV8XMCSvz9UFfUo03J+8YXtH7
d+5Ahpevzx3lFmd0giiGkW4Mihma1XiqLVIHNTJtoYsbQQoXvLvCxiTLMGoLHzEHcozM1kIF3p4UVHyr
lYKLTJR1/+lI/b9q5Ph2eD8e3xqU9a0eJSaVeFfQiUIouAs7WpQ/dMNKWXHz6i+BsblDjcw7CiFjFvXm
JXK3rReeITFkUAiygj6Q8FMprMQrwXc3TnlHMUoun+TmO5bNtBh32+fB958GHz3dxfyuTzSxVpmYbSzc
4K9c33DfNM3/AAAA///DWIAXswIAAA==
`,
	},

	"/templates/customembed.md": {
		local:   "templates/customembed.md",
		size:    1434,
		modtime: 1524119236,
		compressed: `
H4sIAAAAAAAC/6xUwY7bNhC96yum6mXX8ErZdY3UymmDtgEKNA3QXLZxYNHUSGKW4gicoZ2tYV/6E731
F/sJhWh74zUCtAiii4h5o/fePJK6owBaOdAelSDowEIdYLfEiuGiQ2bVIMPaSAuaLHmsgE2FS+Uv99W7
21dvfnhZJEemxqwQpEVYksDPv/36Gozrg4A19/t6TdbS2rimgFak5yLPK8OafKX6PtPU5RWu0FKPnvOK
NOcemYLXyLlulXNov40Gr2j5AbVkSdTu1AMoywSB8ZHYIq0IbdYYacMyM5Tvv1wZDsqaP9DnGbwMAh67
AfEgNKxpdeYVeuUFqI5VCtIHKZKkLMsPTG6TAKSanKCTtIBUWsNQcuh78sIlLBZqsYDRiMOSUUYjGFE9
gt2uU/6+orXb7eCfv//6EyLd3NXBaTHkoCa6iEFv5g5Ak2OymFlqYvXF3G3nbu6GruvLF2VZpuPBSJww
LWAz2Etuh0hOJrKKBbbABNIqASPQKdEtckTjfvGDE/URVKOMy+COggd0FXjkYAW4pWArsET3n9vTT5kk
AACpGLE4hPLLA+zX4z1QIWtv+mHQA3xaOTQFbwfw8+fk2BTPZVrAd9Ob6fPJZHwU7pBFdf1AMJvNZlfX
N1eT67c3k2I6K6az7Pmz738/UtREgj6GBvFJjSa3OJPXlcvOjmoMO1crJcpz/izrXXPgHCzgRznMdhCI
yPbosA3d0iljT3W/TPIJr+lUg1+ZUwVp6UlATnVxX2/3yPgrBPdEsTZoK04LeHdgPiqfaP809AA5LB71
AdKVsiHCb4d7aBjqY1uWHrq24/8ilTX9H1JZ0yfS+H6fDKvh6v34eGkKSL55t/+3xrmzN69fvb/YbFiU
GA3pGZRut5fJvwEAAP//djV3NpoFAAA=
`,
	},

	"/templates/docs.ghtml": {
		local:   "templates/docs.ghtml",
		size:    994,
		modtime: 1524119236,
		compressed: `
H4sIAAAAAAAC/5xSTW+cPBA+v/sr5nUviVQvSs+ES3KpVFU5VOqxmrUHsGJmqG1YrSz+ewULCVn11AtY
9swz83zkbKl2TKCsmKgZRzVNh9K76gAAUCK0gepH9UlVpQPjMcZHVSPUqB3XMv/rs6rKwlXwLGboiBMm
Jwxl7JG3Do8n8rB89RkDO25U9fPrS1nMVdWH2hoBQ5AF9fpa4LrN4LcixhEYRx3JCFvtaSSvqsN/c1nO
AbkhOD6LecGG4jQt7QvExuztAneQ2jt+VSvlYlakyHkI/vdA4QJ3Xs4U4PgdO7qfJlXlvJyn6W3DBbGY
Z6ybENt1evm/1lAcb5cGrVdyxeCrw7V56zvc2NNjQ7M/OSfqeo+JQJn+V0toFRxn46wbNz6LhFfo3a0R
r32jH76o3ca791PUBr2XIcH78d2zD9r9aF0EFyG1BHZv/uflCk0a0IMRrl0zhGssXASWBFaYoKVAR/gm
jWNAthDJk0lwkSFApDBSAMcL1ND3FCC4pk1gJDAFuKvFWwoQL91JPAhDJyfn6X5nhHXjJu5y3H7/plL7
sD3PPuhZdQpLCp6GEIjTmre3ULQPf9e4w/Bq5cz6JPaym5DzHNkn4USc9qF9J3LD5DYJtUiicM3CGqI/
AQAA//+stVcF4gMAAA==
`,
	},

	"/templates/helping-out.md": {
		local:   "templates/helping-out.md",
		size:    3418,
		modtime: 1524119236,
		compressed: `
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
AAA=
`,
	},

	"/templates/index.md": {
		local:   "templates/index.md",
		size:    1674,
		modtime: 1524119236,
		compressed: `
H4sIAAAAAAAC/4xUTW/bOBC9+1cM0kMTwFViu3Hc3JK4+ejmkKbd7bZBgVDSSGIsceghaVkt+t8XQzlu
mu0CexPEmcf3Zt7jx0o70A58hZBTFho0XnlNBgpi+HxycTM/TQaDKy9FWWBG4+sOVsgdaJNRY2v0CMrk
/b+WeAHagGUqGZ0bgiPQBXQUoFXGgyeosLZAwUPL2mtTysVuCLZG5YSFeemhQqe98ij1OYEjIdHD9AWF
NnlkrU1B3PScOwovGaEmWghuQTyUGgNXwJhR06DJI8YDaRO7XbCW2INDXiEPoa10VkGmDKQIBQWTg0pp
hclg8OIFzMkoYbzl8igplwMEYrhLQxeRVf7KWZXh19190bevcrcXewQ8SoLghOWN8oxkhnCqfUb650em
XDWEt75CxtDEGV9rj3J0PBjAq8fOY6i8t+54f79t28T2P5OMmv1OlTZPpXQDeQx396PLkB9dfhrfTu2H
i2BP518W79bLxfm35ccP5YPh/PT+6+737058kMHOktO+N7Gm3PnxY+8J3JlyVYScLz+P31OKBY8ulrfV
YvKlu5mer/6cVKfpt7Yop7+HFIVPYR+1CubB+mA2Ph+pPDsbqdl0mh0dKvV2djYZ43hyMBu9nqmDbHw4
mxw+w8YNyFPg7dzg7v76ejq9Pvljnb95v/xU8uX66O/FyB++cYu381vq8N1fzwDrTfMWcHBGxqvMQ4O/
ejuGyBADUy3OhKaDuXYZcb5xWO+jWxTTyfKvnAvoHv0k5q3USg50PIBW+yripuSHMZO4VhI6UCCGFlMw
+sBGmhw16Cv5qvUCYedc6RpzSJJkp8+BUG10WXm5BgUBQWVMzoGCNJQxLlvKJzdX0KhOorBhZZnSGhs3
FKtL6YRzsIp9F/XpDMFXym+pLQOyRge7ugBluj15Rf4FpY2cQSbpF4KuolDn/5VR2K0pUx5z2Bx7spAq
3osBqTFuZWGoleAGWYp2yWBwUntkSe8K6264DaKqHQFZFAr9zIF62LsL7S9DClaVGAe/2cLX3ce0ldpX
IY1BeyCj3NHro03i9iCu+RyVDywCyhKdvFDbTffzV0+O4h0KDLZQbPqIQTeWaYXyLLu+wgCutYvmIYM/
laAW34OTJ05Bg84J8d+PkPiZZv2rZkZL/0/nk8Ek8LFCqJX3coNB2bVlLJAZ8yE4bTKEK/BC0JN0lhjX
Y0qXwOCfAAAA//9GoFGYigYAAA==
`,
	},

	"/templates/quickstart.md": {
		local:   "templates/quickstart.md",
		size:    1290,
		modtime: 1524119236,
		compressed: `
H4sIAAAAAAAC/3xUTW/cNhC961e8ugfHgCy3TQsYvqUxYAQt2gBOD0HRA0WOJHYpjjocriL/+oJcbbYB
itwIzcd782aemg+TT1jMSFh9CJgoLNg445/s7SFsSKTIC3Qi9Kxd0zyT5uWhab7v8MRQxqS6pIe7u82M
i+u7T9vLHZofOvwea1VeFpJb8eOkt5YlkrSwwdsDOOLqVx59xB/JxxGPPlkWd9W87vDs5yVsCDWca3jj
LOccWCFHUb0JqUWfFY7jtWJlka0tqddCBWDPv05YqU9eCZHXFivBMSIrRlKYuIGHE8AXjUufENAThJwX
skoOHC3VyJFgsk4s/oUcPr55ev/4cxHk6GmtoyeSI0m60OmaHzu8OdfsJUWxUmY5RrJanpWJsZZz1K75
6ata5uhIcJUolGKzg161SCcJ98CFT13vaqKel1qI4TdWesBHzrAmgmPYYJz7nOKrPJjMkTCbWO5l77aQ
zD4lzzF1TfPnh4mE4BNMSAyDo3fE0Kws3gTMxhH6Db/4OL7lXsy39/ffvcY6eTvBcpVr5qRlHwV7IKNZ
KLUofb/569Xna+Osuevp7uXp/j0dlsfbw+Gmac4DRF6LoIMfsxDWySj9d/QOb+sJ6iScx6lCHY14zicz
JJjoQJ+WwEIwCF41UFlNolO7i3jDQFJGf3eSSHKEj8r1qnxKuZD/m/1pgykvC4uexTM9H6mFCTpVHksg
k+ptqmwFbh+AsyJpHob6KueRKAwXYr3XFiZh3qB+Lh2j+wJPyczXaQ/6hOBnr+RaRAbHurCRVIvPFuMd
BhZo+TW88kOZRKcSenc9I3B148yRtuKwiVMtK4gry6G8Odbimw7PvDuz+Gw27nxIl48Gg0kKobRwTASW
4k6lEGqiMoTMaRjHNmHwkrTS2m3VU4GU7Aj/K3ILO5loy06FzkUjx2gqfm9iJHfT/RsAAP//TTPcCwoF
AAA=
`,
	},

	"/templates/templates.md": {
		local:   "templates/templates.md",
		size:    5169,
		modtime: 1525739939,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}
