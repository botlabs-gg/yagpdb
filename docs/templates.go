// Code generated by "esc -o templates.go -pkg docs templates/"; DO NOT EDIT.

package docs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/ads.md": {
		local:   "templates/ads.md",
		size:    663,
		modtime: 1515404254,
		compressed: `
H4sIAAAAAAAC/zxSQW7bMBC86xVzKJAEtZ3EaBCgpx7ra9EPrMmVtDXFFbgrK+zrAypxeOBhMTM7M+QJ
hbNDF4ePjKQrFyTuHUFL5gJXjJxmzFTRa9lQQc2hPcqSs+QBlYY5nneQHlUXrJS98TZlH8lhs276GT1z
Ql+YGyBodgqOiXdg8ZELNIMnkoT7f5rJyuuP119DGxyCTg/QgigWtMRD1/3mwncG04kR2UmSNf7Xxp8d
9vi7+c1eNGGmzO0e2DCwG6jokiOeny7bFFfh1TBzwcp8+aIvZYsyFwkMMfTyxhHkeP72GKnuIIiKrI6R
rgzKFVbNedoaowhzcoMtYQQZQpJwgY9Fl2E0SMacKDAq+w6mEL8zUHNt3qpsIlnXw82Pyf/NxvHl6e14
fOnQznf8YTLNH2ybKKWGOXOgxfhTM61UDVcxOSfeQZopJ5dAKVXMauKimeO26gTNqYJS0hX0CYRMragW
qwXeX7nUPeWstX2Eq0TW+2lxjg+Pg/Q3a6dbPx9isu8LTWybTK4+Nm6SC29vd+i67j0AAP//PGczQZcC
AAA=
`,
	},

	"/templates/docs.ghtml": {
		local:   "templates/docs.ghtml",
		size:    700,
		modtime: 1515404254,
		compressed: `
H4sIAAAAAAAC/1xRsY7cIBCt46+YkCYpWLSpfTR3TZroupTRnBl70bHDBmOvToh/j2DxyreNjeC9N+/N
S8nQaJlAGD/MknEVOXe9s7oDAOgRToHGJ/FN6N7C4HCen8SIMKK0PPryH69C98pqePHDciaOGK1n6OcL
8sZw+EYO6ldeMbDlSeg/v157VVD6E3ZEwBB8Vb29KmxuFreBGFdgXOVMg2cjHa3khO6+FFhKAXkiOLz4
4RUnmnOu9CqxJbtf4E5SOsvvokVWZSMqpSW4fwuFD/ju/JUCHH7jmX7kLHRK9Zzz3WFVVGVGc0Js2vT+
q5SgDo+mQcoWTi1Odzfyxuse6rngRKWflCKdLw4jgRguf0+ERsChFGfsuuWpK7xJ724H76Sb5PGn2Dk+
HbfnMkEWPQo13/MSAnFsm7zHPR137J36GcO78VeWb9587CakVMp49hyJ474OZezaYO3cfo8ZR+8jhVvK
tp7/AQAA//8lzjWpvAIAAA==
`,
	},

	"/templates/helping-out.md": {
		local:   "templates/helping-out.md",
		size:    3226,
		modtime: 1517841405,
		compressed: `
H4sIAAAAAAAC/4xWS4/dNg/d+1dwkkUnwH0gbdoA3TUZ9AG0TYAJUBSDAKEt2lbGEvVJ9L3jFv3vHyjp
vpJJ0aUtijw8PKT45w8/vb15BTZBS9YP4NAQoDcQ0UO7wHMY5gVQ3AocgVsSTX0+txu4ZUC/wEhTAAsd
ehhI1BWGEKmzKGQ2TfNupEj6O9GOIk6wxyXBwnO+km87vNfgFUxLIhRX2cSw/0pgxB2BMNx73ueYHRu9
IJzvXzUNrOGPaEV/Gu5mR15QLPsNvBsJWhbwRCbBzfnhFdwSQT9HGSlCSxPvoecIjhWw7xnYw/5Rt+cB
OzaUf/xMU9AfPAtw9hmIw6S+wNjUcTTZ7kf7APsRRfkAWQKnTOkQ0TmMQDFyzNn31hu4lkwgRgKnuXMP
MpJ7pp7uXs2LfgEaSAE7en+9NdylLZr0rGmePn16RCmj/ST9pjlV31BvvRWaFmBPNUYhomMXJttpNZXI
lNPLmFYZthpGwsQeMEGSYki93lU2ZcSsCgshUk8RujkJO/sXtnaysmQnibo56gcrJxPzfVqVIOoCYWJR
UBdFUKdaVTI5TuVaGPp5mhaYxU72r6Lm2RuKSQ5we0KZI6X8oeIIkXfWUNo0zeuRuvt8MMzWUJWF7bUg
X2VdCEVKmmTug3xQFKrV+d9MScFl38rIvTYOnwlAq/IUbq1TtCUG+0MLIHQj+iGngZ+kG3CgpoHnG/iR
433tlgYAYA2vI6HQ9lcerNe7g5Vxbuvh77izA0p2qomFyB+pk+wQ7pTk99ejSEjfb7fl4qZjt/3IHtPL
Fy+3Cw7BtM+qt7eRUmGuVxjtLMK+ga838CfPkEaeJ60/YFuqkYggsSMZNcHJ3lPRYubn6i7n8rYi+h0d
wS8OB3p//fffqiXbwRPD3ToTtX6+1pib4Icn//zzrIFvNjVzQPC0hzai70boI7uM0NCu/vsMfDUt8CG3
2NXdq4uf9stAvl6X++tiekJUqjHZqqHPALzxHR2kxP4TmxV0x5uX+HBA60u7LSEPFASvZKn49ug9wmB3
+TNeBry6qwxVh/+S1DeHpLp845TUiw380AvVXl4uysy+BD3Rv3oEf7XX+Z1wgQ+F6O/P8ZZ8tBAfGvh2
A79hVgrVjkg1n1/6s5yd2pz3TJjmwfp1CtTZ3nb5eVgdH5s8T8s88vCh2mrYLaZEkrZqvta22Djz4T8F
HMjnR+0ykOFTmDyPhVyYUChtHx4eHs68vwlUVNDbKZNZGrCM1nBUKxkrBy6PhT1V7sVaDc7E+HiBPzM7
02ymO5ej8l0g6POXM2bnrICjlHCgFRhKXbSttvT+IApjzWPgvl2Xy+t6+cv4HrM8g3hq3ormMHu+O1NL
mKcJIuU5XO/9xNCitlUZf5FZoOfJUITrgctz3QNOU2lHG6kTjpbSIfDtcXxVHWMIhHEFeysj4KEwnh5E
g1hRkav5k9fsgr7cuZpnyJ48wtN368r8lwm6MDlj5pYEWkzHrhOGG9o9EuPlWs1qn385zmdmZ7FuSuXp
su4nudZxc1mHlxv4A63khzpSCuwTlTHtqLSNs8MoeYPUxyJXmLykUrnMc4gcOJE5CdSVonMqBI8cqLz9
VmBvp0nnk6M4kLlqyjb0mr1E287HxS3vp3kHsCmLXchr2w582m721JZnv8cub7Jz0uth0pn887vffi34
WmZJEjGUjUazSE5V9RF3qJwFKe9M9RtpczZcsnIO4+WIkn15MXv7kHU2rACNATysMDVUncIHeYbILbbT
Ap7F9otuIL2NSXSjPy4aNqWZgCMk8nmbdhq6dt7ZxqLuj3O/7ON7TFKHhViXn6NO1Wf1BHBKDHuOOU5+
41DK2vNfNuSmWb97c/Nm/f8AAAD//1MtC8eaDAAA
`,
	},

	"/templates/index.md": {
		local:   "templates/index.md",
		size:    1650,
		modtime: 1516722053,
		compressed: `
H4sIAAAAAAAC/4xUTW/bSAy9+1cQ6aEJ4Dqx3ThubvlOujmkaXe7bRAglERLE0tDmUPZVov+9wUl2+t0
u0Bvgjh88x753nzKXAAXQDOChOOqIK+ojj1MWODLydXd+Wmv07lROxRXIuQ1r2FOUoPzMRdlTkqAPmn/
LVim4DyUwqlQCF0IDG4CNVewQK+gDBnlJXClsBCnzqd2cYAyJwxGwr9WyCg4RSU7njAENg4tSntg4nzS
kHZ+wlK0lGuuXgtBzjw1WFOgGXlwIBRzUZBPGghleGbnm/5QlSWLQiCZkwBGPKdep/PqFZyzR6O3uXnN
P7ECAQs8RFXdoGDyJpQY0+PuvonZxyTsNT0x+lYAVME4lahC7LsQOY3Z/fsRY8i6QJqRVEUzz9wpWeW4
04E3cNc2HkOmWobj/f3FYtFbofViLvZrTMsksqOnLeIxPDz1r6vk6Prz4H5UfryqytPzr9P3y9n08tvs
08f02Uty+vS4+/17sJ3HsDOTFZte6dOdHz/2tuDOMGQN5Pnsy+ADRzSR/tXsPpsOv9Z3o8v5n8PsNPq2
mKSjX0OawG3YC5NKVWGYB8uD8eCyj0l81sfxaBQfHSJejM+GAxoMD8b9t2M8iAeH4+HhT9i0AtkGvl3P
DR6ebm9Ho9uTP5bJuw+zz6lcL4/+nvb18F2YXpzfc03v//oJcD30DWDnjL1irFDQSx83gfEsIJybDaGo
IXEhZklWZmptdE/mL9v9TQgVhbWdzKkZzq3gmgIsnGYNbsTabdxLS7SAAYLZ10whpJV4awpckGb2lbsp
wc4lupwS6PV6O63rjWrh0kztGjIEAoyFQwCEqEq7rYYV5ZO7GyiwhmjDqhSOcipCF9ocwVASKFG0bvS5
mEAz1A21WUXiKMCumwD6es9ejP9AOW81iC3qRjBkXOXJ/8ZxN+cYlRJYlZVLiFD22oBQs5Wp54XltrKl
uNDrdE5yJbHwzimvNzHEPDBwSR6wnThwC/qQOs2qCEpMaf1o2A4ed9dZaw80MXtmj+Ho7dEqb3vQLPmS
UCsx+mlKwR6jzZ7b6eNWqbkDwdMCJqs+FnBFKTwne4BDe8IDLV1orMOeuhsh5Mz1EOw5QygoBCP+6wGy
vJTsXkoWKvn3ZG7NpTVOjqp2gSdbdCk0IRFKIDgfEzhQo6dsjSk1q/Fp6EHnnwAAAP//ctWFvnIGAAA=
`,
	},

	"/templates/quickstart.md": {
		local:   "templates/quickstart.md",
		size:    1286,
		modtime: 1517840492,
		compressed: `
H4sIAAAAAAAC/3xUTY/cRBC9+1c8lsNkpVkvEJBWewustIpAECnhECEObXfZbqbdZaqqx/H+etQ9Mxki
IW4t18d79aqemw9TUCxuJKwhRkwUF2yc8XcO/SFuUDLkBTYROra2ad6T5eWxab5t8cwwxmS26OP9/ebG
xXftp+3lHs13LX5LtSovC8mdhHGyu54lkezRx9AfwAk3v/AYEn7XkEY8Be1Z/E3zusX7MC9xQ6zhXMMb
Z4E/5aAX8pQsuKh7dNngOe0MK4ts+5K6EyoA5/ydYqVOgxESr3usBM9IbBjJ4NIGHk4AXzQufWJERxDy
Qag38uDUU40cCS7bxBJeyOPjm+d3Tz8WQY6B1jq6khxJ9Eqnbb5v8eZScy4pipWynlOi3sqzMnF9zzlZ
2/zwv1rm5ElwoxRLsTuD3uyhJwnPgSufut7VJbsstRDDr2z0iI+c0bsETnGD8/5zSqjyYHJHwuxSuZdz
t4VkDqqBk7ZN88eHiYQQFC4qw+EYPDEsG0twEbPzhG7DzyGNP3En7uuHh29eY51CP6HnKtfMamUfBXsg
Z1lI9yh9v/rz1edr42y57ej+5fnhHR2Wp7vD4bZpLgMkXougQxizENbJGf179MsJ2iScx6lCHZ0Ezicz
KFzyoE9LZCE4xGAWqaxG6dTuKt4wkJTR354kkpwQknG9qqCaSfEXh9MCNS8Li120cx0faQ8Xbao0lkhO
62mabAXtzJ+zQS0PQ32V61CKw5VXFwxOMW+wMJeGyX8BZ+TmndZgWU0MczDyeyQGp/ppJLNissUFj4EF
Vv4Lr8JQxrCphN7uZkSuVpw50VbsNbHWsgK4shzKm1Mtvt1D+WzLYrLZ+csVXT86DE4NQrpwUgJLsaZR
jDXRGELuNIvnXjEEUau0zp7qqEBK9oT/lrifXOrLPoUuNSOn5Cp851Iif9v+EwAA//8iHA2NBgUAAA==
`,
	},

	"/templates/templates.md": {
		local:   "templates/templates.md",
		size:    4489,
		modtime: 1517841446,
		compressed: `
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
mUz+FwAA//99wtxUiREAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}
