// Code generated by "esc -o assets_gen.go -pkg commands -ignore .go assets/"; DO NOT EDIT.

package commands

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/commands.html": {
		local:   "assets/commands.html",
		size:    11008,
		modtime: 1515404254,
		compressed: `
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
`,
	},

	"/assets/help-page.md": {
		local:   "assets/help-page.md",
		size:    4653,
		modtime: 1517841237,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
