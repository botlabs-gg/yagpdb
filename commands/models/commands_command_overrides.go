// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"emperror.dev/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// CommandsCommandOverride is an object representing the database table.
type CommandsCommandOverride struct {
	ID                          int64             `boil:"id" json:"id" toml:"id" yaml:"id"`
	GuildID                     int64             `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	CommandsChannelsOverridesID int64             `boil:"commands_channels_overrides_id" json:"commands_channels_overrides_id" toml:"commands_channels_overrides_id" yaml:"commands_channels_overrides_id"`
	Commands                    types.StringArray `boil:"commands" json:"commands" toml:"commands" yaml:"commands"`
	CommandsEnabled             bool              `boil:"commands_enabled" json:"commands_enabled" toml:"commands_enabled" yaml:"commands_enabled"`
	AutodeleteResponse          bool              `boil:"autodelete_response" json:"autodelete_response" toml:"autodelete_response" yaml:"autodelete_response"`
	AutodeleteTrigger           bool              `boil:"autodelete_trigger" json:"autodelete_trigger" toml:"autodelete_trigger" yaml:"autodelete_trigger"`
	AutodeleteResponseDelay     int               `boil:"autodelete_response_delay" json:"autodelete_response_delay" toml:"autodelete_response_delay" yaml:"autodelete_response_delay"`
	AutodeleteTriggerDelay      int               `boil:"autodelete_trigger_delay" json:"autodelete_trigger_delay" toml:"autodelete_trigger_delay" yaml:"autodelete_trigger_delay"`
	RequireRoles                types.Int64Array  `boil:"require_roles" json:"require_roles" toml:"require_roles" yaml:"require_roles"`
	IgnoreRoles                 types.Int64Array  `boil:"ignore_roles" json:"ignore_roles" toml:"ignore_roles" yaml:"ignore_roles"`

	R *commandsCommandOverrideR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L commandsCommandOverrideL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommandsCommandOverrideColumns = struct {
	ID                          string
	GuildID                     string
	CommandsChannelsOverridesID string
	Commands                    string
	CommandsEnabled             string
	AutodeleteResponse          string
	AutodeleteTrigger           string
	AutodeleteResponseDelay     string
	AutodeleteTriggerDelay      string
	RequireRoles                string
	IgnoreRoles                 string
}{
	ID:                          "id",
	GuildID:                     "guild_id",
	CommandsChannelsOverridesID: "commands_channels_overrides_id",
	Commands:                    "commands",
	CommandsEnabled:             "commands_enabled",
	AutodeleteResponse:          "autodelete_response",
	AutodeleteTrigger:           "autodelete_trigger",
	AutodeleteResponseDelay:     "autodelete_response_delay",
	AutodeleteTriggerDelay:      "autodelete_trigger_delay",
	RequireRoles:                "require_roles",
	IgnoreRoles:                 "ignore_roles",
}

// Generated where

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CommandsCommandOverrideWhere = struct {
	ID                          whereHelperint64
	GuildID                     whereHelperint64
	CommandsChannelsOverridesID whereHelperint64
	Commands                    whereHelpertypes_StringArray
	CommandsEnabled             whereHelperbool
	AutodeleteResponse          whereHelperbool
	AutodeleteTrigger           whereHelperbool
	AutodeleteResponseDelay     whereHelperint
	AutodeleteTriggerDelay      whereHelperint
	RequireRoles                whereHelpertypes_Int64Array
	IgnoreRoles                 whereHelpertypes_Int64Array
}{
	ID:                          whereHelperint64{field: "\"commands_command_overrides\".\"id\""},
	GuildID:                     whereHelperint64{field: "\"commands_command_overrides\".\"guild_id\""},
	CommandsChannelsOverridesID: whereHelperint64{field: "\"commands_command_overrides\".\"commands_channels_overrides_id\""},
	Commands:                    whereHelpertypes_StringArray{field: "\"commands_command_overrides\".\"commands\""},
	CommandsEnabled:             whereHelperbool{field: "\"commands_command_overrides\".\"commands_enabled\""},
	AutodeleteResponse:          whereHelperbool{field: "\"commands_command_overrides\".\"autodelete_response\""},
	AutodeleteTrigger:           whereHelperbool{field: "\"commands_command_overrides\".\"autodelete_trigger\""},
	AutodeleteResponseDelay:     whereHelperint{field: "\"commands_command_overrides\".\"autodelete_response_delay\""},
	AutodeleteTriggerDelay:      whereHelperint{field: "\"commands_command_overrides\".\"autodelete_trigger_delay\""},
	RequireRoles:                whereHelpertypes_Int64Array{field: "\"commands_command_overrides\".\"require_roles\""},
	IgnoreRoles:                 whereHelpertypes_Int64Array{field: "\"commands_command_overrides\".\"ignore_roles\""},
}

// CommandsCommandOverrideRels is where relationship names are stored.
var CommandsCommandOverrideRels = struct {
	CommandsChannelsOverride string
}{
	CommandsChannelsOverride: "CommandsChannelsOverride",
}

// commandsCommandOverrideR is where relationships are stored.
type commandsCommandOverrideR struct {
	CommandsChannelsOverride *CommandsChannelsOverride
}

// NewStruct creates a new relationship struct
func (*commandsCommandOverrideR) NewStruct() *commandsCommandOverrideR {
	return &commandsCommandOverrideR{}
}

// commandsCommandOverrideL is where Load methods for each relationship are stored.
type commandsCommandOverrideL struct{}

var (
	commandsCommandOverrideAllColumns            = []string{"id", "guild_id", "commands_channels_overrides_id", "commands", "commands_enabled", "autodelete_response", "autodelete_trigger", "autodelete_response_delay", "autodelete_trigger_delay", "require_roles", "ignore_roles"}
	commandsCommandOverrideColumnsWithoutDefault = []string{"guild_id", "commands_channels_overrides_id", "commands", "commands_enabled", "autodelete_response", "autodelete_trigger", "autodelete_response_delay", "autodelete_trigger_delay", "require_roles", "ignore_roles"}
	commandsCommandOverrideColumnsWithDefault    = []string{"id"}
	commandsCommandOverridePrimaryKeyColumns     = []string{"id"}
)

type (
	// CommandsCommandOverrideSlice is an alias for a slice of pointers to CommandsCommandOverride.
	// This should generally be used opposed to []CommandsCommandOverride.
	CommandsCommandOverrideSlice []*CommandsCommandOverride

	commandsCommandOverrideQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	commandsCommandOverrideType                 = reflect.TypeOf(&CommandsCommandOverride{})
	commandsCommandOverrideMapping              = queries.MakeStructMapping(commandsCommandOverrideType)
	commandsCommandOverridePrimaryKeyMapping, _ = queries.BindMapping(commandsCommandOverrideType, commandsCommandOverrideMapping, commandsCommandOverridePrimaryKeyColumns)
	commandsCommandOverrideInsertCacheMut       sync.RWMutex
	commandsCommandOverrideInsertCache          = make(map[string]insertCache)
	commandsCommandOverrideUpdateCacheMut       sync.RWMutex
	commandsCommandOverrideUpdateCache          = make(map[string]updateCache)
	commandsCommandOverrideUpsertCacheMut       sync.RWMutex
	commandsCommandOverrideUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single commandsCommandOverride record from the query using the global executor.
func (q commandsCommandOverrideQuery) OneG(ctx context.Context) (*CommandsCommandOverride, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single commandsCommandOverride record from the query.
func (q commandsCommandOverrideQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CommandsCommandOverride, error) {
	o := &CommandsCommandOverride{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.WrapIf(err, "models: failed to execute a one query for commands_command_overrides")
	}

	return o, nil
}

// AllG returns all CommandsCommandOverride records from the query using the global executor.
func (q commandsCommandOverrideQuery) AllG(ctx context.Context) (CommandsCommandOverrideSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CommandsCommandOverride records from the query.
func (q commandsCommandOverrideQuery) All(ctx context.Context, exec boil.ContextExecutor) (CommandsCommandOverrideSlice, error) {
	var o []*CommandsCommandOverride

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.WrapIf(err, "models: failed to assign all query results to CommandsCommandOverride slice")
	}

	return o, nil
}

// CountG returns the count of all CommandsCommandOverride records in the query, and panics on error.
func (q commandsCommandOverrideQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CommandsCommandOverride records in the query.
func (q commandsCommandOverrideQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to count commands_command_overrides rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q commandsCommandOverrideQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q commandsCommandOverrideQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.WrapIf(err, "models: failed to check if commands_command_overrides exists")
	}

	return count > 0, nil
}

// CommandsChannelsOverride pointed to by the foreign key.
func (o *CommandsCommandOverride) CommandsChannelsOverride(mods ...qm.QueryMod) commandsChannelsOverrideQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CommandsChannelsOverridesID),
	}

	queryMods = append(queryMods, mods...)

	query := CommandsChannelsOverrides(queryMods...)
	queries.SetFrom(query.Query, "\"commands_channels_overrides\"")

	return query
}

// LoadCommandsChannelsOverride allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (commandsCommandOverrideL) LoadCommandsChannelsOverride(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommandsCommandOverride interface{}, mods queries.Applicator) error {
	var slice []*CommandsCommandOverride
	var object *CommandsCommandOverride

	if singular {
		object = maybeCommandsCommandOverride.(*CommandsCommandOverride)
	} else {
		slice = *maybeCommandsCommandOverride.(*[]*CommandsCommandOverride)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &commandsCommandOverrideR{}
		}
		args = append(args, object.CommandsChannelsOverridesID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commandsCommandOverrideR{}
			}

			for _, a := range args {
				if a == obj.CommandsChannelsOverridesID {
					continue Outer
				}
			}

			args = append(args, obj.CommandsChannelsOverridesID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`commands_channels_overrides`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.WrapIf(err, "failed to eager load CommandsChannelsOverride")
	}

	var resultSlice []*CommandsChannelsOverride
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.WrapIf(err, "failed to bind eager loaded slice CommandsChannelsOverride")
	}

	if err = results.Close(); err != nil {
		return errors.WrapIf(err, "failed to close results of eager load for commands_channels_overrides")
	}
	if err = results.Err(); err != nil {
		return errors.WrapIf(err, "error occurred during iteration of eager loaded relations for commands_channels_overrides")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CommandsChannelsOverride = foreign
		if foreign.R == nil {
			foreign.R = &commandsChannelsOverrideR{}
		}
		foreign.R.CommandsCommandOverrides = append(foreign.R.CommandsCommandOverrides, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CommandsChannelsOverridesID == foreign.ID {
				local.R.CommandsChannelsOverride = foreign
				if foreign.R == nil {
					foreign.R = &commandsChannelsOverrideR{}
				}
				foreign.R.CommandsCommandOverrides = append(foreign.R.CommandsCommandOverrides, local)
				break
			}
		}
	}

	return nil
}

// SetCommandsChannelsOverrideG of the commandsCommandOverride to the related item.
// Sets o.R.CommandsChannelsOverride to related.
// Adds o to related.R.CommandsCommandOverrides.
// Uses the global database handle.
func (o *CommandsCommandOverride) SetCommandsChannelsOverrideG(ctx context.Context, insert bool, related *CommandsChannelsOverride) error {
	return o.SetCommandsChannelsOverride(ctx, boil.GetContextDB(), insert, related)
}

// SetCommandsChannelsOverride of the commandsCommandOverride to the related item.
// Sets o.R.CommandsChannelsOverride to related.
// Adds o to related.R.CommandsCommandOverrides.
func (o *CommandsCommandOverride) SetCommandsChannelsOverride(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CommandsChannelsOverride) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.WrapIf(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"commands_command_overrides\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"commands_channels_overrides_id"}),
		strmangle.WhereClause("\"", "\"", 2, commandsCommandOverridePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.WrapIf(err, "failed to update local table")
	}

	o.CommandsChannelsOverridesID = related.ID
	if o.R == nil {
		o.R = &commandsCommandOverrideR{
			CommandsChannelsOverride: related,
		}
	} else {
		o.R.CommandsChannelsOverride = related
	}

	if related.R == nil {
		related.R = &commandsChannelsOverrideR{
			CommandsCommandOverrides: CommandsCommandOverrideSlice{o},
		}
	} else {
		related.R.CommandsCommandOverrides = append(related.R.CommandsCommandOverrides, o)
	}

	return nil
}

// CommandsCommandOverrides retrieves all the records using an executor.
func CommandsCommandOverrides(mods ...qm.QueryMod) commandsCommandOverrideQuery {
	mods = append(mods, qm.From("\"commands_command_overrides\""))
	return commandsCommandOverrideQuery{NewQuery(mods...)}
}

// FindCommandsCommandOverrideG retrieves a single record by ID.
func FindCommandsCommandOverrideG(ctx context.Context, iD int64, selectCols ...string) (*CommandsCommandOverride, error) {
	return FindCommandsCommandOverride(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindCommandsCommandOverride retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommandsCommandOverride(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CommandsCommandOverride, error) {
	commandsCommandOverrideObj := &CommandsCommandOverride{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"commands_command_overrides\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, commandsCommandOverrideObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.WrapIf(err, "models: unable to select from commands_command_overrides")
	}

	return commandsCommandOverrideObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CommandsCommandOverride) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CommandsCommandOverride) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no commands_command_overrides provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(commandsCommandOverrideColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	commandsCommandOverrideInsertCacheMut.RLock()
	cache, cached := commandsCommandOverrideInsertCache[key]
	commandsCommandOverrideInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			commandsCommandOverrideAllColumns,
			commandsCommandOverrideColumnsWithDefault,
			commandsCommandOverrideColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(commandsCommandOverrideType, commandsCommandOverrideMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(commandsCommandOverrideType, commandsCommandOverrideMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"commands_command_overrides\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"commands_command_overrides\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.WrapIf(err, "models: unable to insert into commands_command_overrides")
	}

	if !cached {
		commandsCommandOverrideInsertCacheMut.Lock()
		commandsCommandOverrideInsertCache[key] = cache
		commandsCommandOverrideInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single CommandsCommandOverride record using the global executor.
// See Update for more documentation.
func (o *CommandsCommandOverride) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CommandsCommandOverride.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CommandsCommandOverride) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	commandsCommandOverrideUpdateCacheMut.RLock()
	cache, cached := commandsCommandOverrideUpdateCache[key]
	commandsCommandOverrideUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			commandsCommandOverrideAllColumns,
			commandsCommandOverridePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update commands_command_overrides, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"commands_command_overrides\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, commandsCommandOverridePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(commandsCommandOverrideType, commandsCommandOverrideMapping, append(wl, commandsCommandOverridePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to update commands_command_overrides row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to get rows affected by update for commands_command_overrides")
	}

	if !cached {
		commandsCommandOverrideUpdateCacheMut.Lock()
		commandsCommandOverrideUpdateCache[key] = cache
		commandsCommandOverrideUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q commandsCommandOverrideQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q commandsCommandOverrideQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to update all for commands_command_overrides")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to retrieve rows affected for commands_command_overrides")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CommandsCommandOverrideSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommandsCommandOverrideSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commandsCommandOverridePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"commands_command_overrides\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, commandsCommandOverridePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to update all in commandsCommandOverride slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to retrieve rows affected all in update all commandsCommandOverride")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CommandsCommandOverride) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CommandsCommandOverride) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no commands_command_overrides provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(commandsCommandOverrideColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	commandsCommandOverrideUpsertCacheMut.RLock()
	cache, cached := commandsCommandOverrideUpsertCache[key]
	commandsCommandOverrideUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			commandsCommandOverrideAllColumns,
			commandsCommandOverrideColumnsWithDefault,
			commandsCommandOverrideColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			commandsCommandOverrideAllColumns,
			commandsCommandOverridePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert commands_command_overrides, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(commandsCommandOverridePrimaryKeyColumns))
			copy(conflict, commandsCommandOverridePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"commands_command_overrides\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(commandsCommandOverrideType, commandsCommandOverrideMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(commandsCommandOverrideType, commandsCommandOverrideMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.WrapIf(err, "models: unable to upsert commands_command_overrides")
	}

	if !cached {
		commandsCommandOverrideUpsertCacheMut.Lock()
		commandsCommandOverrideUpsertCache[key] = cache
		commandsCommandOverrideUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single CommandsCommandOverride record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CommandsCommandOverride) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CommandsCommandOverride record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CommandsCommandOverride) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CommandsCommandOverride provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), commandsCommandOverridePrimaryKeyMapping)
	sql := "DELETE FROM \"commands_command_overrides\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to delete from commands_command_overrides")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to get rows affected by delete for commands_command_overrides")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q commandsCommandOverrideQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no commandsCommandOverrideQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to delete all from commands_command_overrides")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to get rows affected by deleteall for commands_command_overrides")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CommandsCommandOverrideSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommandsCommandOverrideSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commandsCommandOverridePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"commands_command_overrides\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commandsCommandOverridePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to delete all from commandsCommandOverride slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to get rows affected by deleteall for commands_command_overrides")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CommandsCommandOverride) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no CommandsCommandOverride provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CommandsCommandOverride) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCommandsCommandOverride(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommandsCommandOverrideSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CommandsCommandOverrideSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommandsCommandOverrideSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CommandsCommandOverrideSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commandsCommandOverridePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"commands_command_overrides\".* FROM \"commands_command_overrides\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commandsCommandOverridePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.WrapIf(err, "models: unable to reload all in CommandsCommandOverrideSlice")
	}

	*o = slice

	return nil
}

// CommandsCommandOverrideExistsG checks if the CommandsCommandOverride row exists.
func CommandsCommandOverrideExistsG(ctx context.Context, iD int64) (bool, error) {
	return CommandsCommandOverrideExists(ctx, boil.GetContextDB(), iD)
}

// CommandsCommandOverrideExists checks if the CommandsCommandOverride row exists.
func CommandsCommandOverrideExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"commands_command_overrides\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.WrapIf(err, "models: unable to check if commands_command_overrides exists")
	}

	return exists, nil
}
