// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Note is an object representing the database table.
type Note struct {
	GuildID  int64             `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	MemberID int64             `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	Notes    types.StringArray `boil:"notes" json:"notes" toml:"notes" yaml:"notes"`

	R *noteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L noteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NoteColumns = struct {
	GuildID  string
	MemberID string
	Notes    string
}{
	GuildID:  "guild_id",
	MemberID: "member_id",
	Notes:    "notes",
}

var NoteTableColumns = struct {
	GuildID  string
	MemberID string
	Notes    string
}{
	GuildID:  "notes.guild_id",
	MemberID: "notes.member_id",
	Notes:    "notes.notes",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var NoteWhere = struct {
	GuildID  whereHelperint64
	MemberID whereHelperint64
	Notes    whereHelpertypes_StringArray
}{
	GuildID:  whereHelperint64{field: "\"notes\".\"guild_id\""},
	MemberID: whereHelperint64{field: "\"notes\".\"member_id\""},
	Notes:    whereHelpertypes_StringArray{field: "\"notes\".\"notes\""},
}

// NoteRels is where relationship names are stored.
var NoteRels = struct {
}{}

// noteR is where relationships are stored.
type noteR struct {
}

// NewStruct creates a new relationship struct
func (*noteR) NewStruct() *noteR {
	return &noteR{}
}

// noteL is where Load methods for each relationship are stored.
type noteL struct{}

var (
	noteAllColumns            = []string{"guild_id", "member_id", "notes"}
	noteColumnsWithoutDefault = []string{"guild_id", "member_id", "notes"}
	noteColumnsWithDefault    = []string{}
	notePrimaryKeyColumns     = []string{"guild_id", "member_id"}
	noteGeneratedColumns      = []string{}
)

type (
	// NoteSlice is an alias for a slice of pointers to Note.
	// This should almost always be used instead of []Note.
	NoteSlice []*Note

	noteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	noteType                 = reflect.TypeOf(&Note{})
	noteMapping              = queries.MakeStructMapping(noteType)
	notePrimaryKeyMapping, _ = queries.BindMapping(noteType, noteMapping, notePrimaryKeyColumns)
	noteInsertCacheMut       sync.RWMutex
	noteInsertCache          = make(map[string]insertCache)
	noteUpdateCacheMut       sync.RWMutex
	noteUpdateCache          = make(map[string]updateCache)
	noteUpsertCacheMut       sync.RWMutex
	noteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single note record from the query using the global executor.
func (q noteQuery) OneG(ctx context.Context) (*Note, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single note record from the query.
func (q noteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Note, error) {
	o := &Note{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for notes")
	}

	return o, nil
}

// AllG returns all Note records from the query using the global executor.
func (q noteQuery) AllG(ctx context.Context) (NoteSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Note records from the query.
func (q noteQuery) All(ctx context.Context, exec boil.ContextExecutor) (NoteSlice, error) {
	var o []*Note

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Note slice")
	}

	return o, nil
}

// CountG returns the count of all Note records in the query using the global executor
func (q noteQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Note records in the query.
func (q noteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count notes rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q noteQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q noteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if notes exists")
	}

	return count > 0, nil
}

// Notes retrieves all the records using an executor.
func Notes(mods ...qm.QueryMod) noteQuery {
	mods = append(mods, qm.From("\"notes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"notes\".*"})
	}

	return noteQuery{q}
}

// FindNoteG retrieves a single record by ID.
func FindNoteG(ctx context.Context, guildID int64, memberID int64, selectCols ...string) (*Note, error) {
	return FindNote(ctx, boil.GetContextDB(), guildID, memberID, selectCols...)
}

// FindNote retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNote(ctx context.Context, exec boil.ContextExecutor, guildID int64, memberID int64, selectCols ...string) (*Note, error) {
	noteObj := &Note{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"notes\" where \"guild_id\"=$1 AND \"member_id\"=$2", sel,
	)

	q := queries.Raw(query, guildID, memberID)

	err := q.Bind(ctx, exec, noteObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from notes")
	}

	return noteObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Note) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Note) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notes provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(noteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	noteInsertCacheMut.RLock()
	cache, cached := noteInsertCache[key]
	noteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			noteAllColumns,
			noteColumnsWithDefault,
			noteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(noteType, noteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(noteType, noteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"notes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"notes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into notes")
	}

	if !cached {
		noteInsertCacheMut.Lock()
		noteInsertCache[key] = cache
		noteInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Note record using the global executor.
// See Update for more documentation.
func (o *Note) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Note.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Note) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	noteUpdateCacheMut.RLock()
	cache, cached := noteUpdateCache[key]
	noteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			noteAllColumns,
			notePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update notes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"notes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, notePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(noteType, noteMapping, append(wl, notePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update notes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for notes")
	}

	if !cached {
		noteUpdateCacheMut.Lock()
		noteUpdateCache[key] = cache
		noteUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q noteQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q noteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for notes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for notes")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o NoteSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NoteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"notes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, notePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in note slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all note")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Note) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Note) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no notes provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(noteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	noteUpsertCacheMut.RLock()
	cache, cached := noteUpsertCache[key]
	noteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			noteAllColumns,
			noteColumnsWithDefault,
			noteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			noteAllColumns,
			notePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert notes, could not build update column list")
		}

		ret := strmangle.SetComplement(noteAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(notePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert notes, could not build conflict column list")
			}

			conflict = make([]string, len(notePrimaryKeyColumns))
			copy(conflict, notePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"notes\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(noteType, noteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(noteType, noteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert notes")
	}

	if !cached {
		noteUpsertCacheMut.Lock()
		noteUpsertCache[key] = cache
		noteUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Note record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Note) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Note record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Note) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Note provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), notePrimaryKeyMapping)
	sql := "DELETE FROM \"notes\" WHERE \"guild_id\"=$1 AND \"member_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from notes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for notes")
	}

	return rowsAff, nil
}

func (q noteQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q noteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no noteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notes")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o NoteSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NoteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"notes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, notePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from note slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notes")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Note) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Note provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Note) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNote(ctx, exec, o.GuildID, o.MemberID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NoteSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty NoteSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NoteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NoteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"notes\".* FROM \"notes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, notePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NoteSlice")
	}

	*o = slice

	return nil
}

// NoteExistsG checks if the Note row exists.
func NoteExistsG(ctx context.Context, guildID int64, memberID int64) (bool, error) {
	return NoteExists(ctx, boil.GetContextDB(), guildID, memberID)
}

// NoteExists checks if the Note row exists.
func NoteExists(ctx context.Context, exec boil.ContextExecutor, guildID int64, memberID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"notes\" where \"guild_id\"=$1 AND \"member_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, guildID, memberID)
	}
	row := exec.QueryRowContext(ctx, sql, guildID, memberID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if notes exists")
	}

	return exists, nil
}

// Exists checks if the Note row exists.
func (o *Note) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NoteExists(ctx, exec, o.GuildID, o.MemberID)
}
