// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAutomodRulesetConditions(t *testing.T) {
	t.Parallel()

	query := AutomodRulesetConditions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAutomodRulesetConditionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRulesetCondition{}
	if err = randomize.Struct(seed, o, automodRulesetConditionDBTypes, true, automodRulesetConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutomodRulesetConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutomodRulesetConditionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRulesetCondition{}
	if err = randomize.Struct(seed, o, automodRulesetConditionDBTypes, true, automodRulesetConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AutomodRulesetConditions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutomodRulesetConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutomodRulesetConditionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRulesetCondition{}
	if err = randomize.Struct(seed, o, automodRulesetConditionDBTypes, true, automodRulesetConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AutomodRulesetConditionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutomodRulesetConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutomodRulesetConditionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRulesetCondition{}
	if err = randomize.Struct(seed, o, automodRulesetConditionDBTypes, true, automodRulesetConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AutomodRulesetConditionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AutomodRulesetCondition exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AutomodRulesetConditionExists to return true, but got false.")
	}
}

func testAutomodRulesetConditionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRulesetCondition{}
	if err = randomize.Struct(seed, o, automodRulesetConditionDBTypes, true, automodRulesetConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	automodRulesetConditionFound, err := FindAutomodRulesetCondition(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if automodRulesetConditionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAutomodRulesetConditionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRulesetCondition{}
	if err = randomize.Struct(seed, o, automodRulesetConditionDBTypes, true, automodRulesetConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AutomodRulesetConditions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAutomodRulesetConditionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRulesetCondition{}
	if err = randomize.Struct(seed, o, automodRulesetConditionDBTypes, true, automodRulesetConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AutomodRulesetConditions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAutomodRulesetConditionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	automodRulesetConditionOne := &AutomodRulesetCondition{}
	automodRulesetConditionTwo := &AutomodRulesetCondition{}
	if err = randomize.Struct(seed, automodRulesetConditionOne, automodRulesetConditionDBTypes, false, automodRulesetConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}
	if err = randomize.Struct(seed, automodRulesetConditionTwo, automodRulesetConditionDBTypes, false, automodRulesetConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = automodRulesetConditionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = automodRulesetConditionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AutomodRulesetConditions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAutomodRulesetConditionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	automodRulesetConditionOne := &AutomodRulesetCondition{}
	automodRulesetConditionTwo := &AutomodRulesetCondition{}
	if err = randomize.Struct(seed, automodRulesetConditionOne, automodRulesetConditionDBTypes, false, automodRulesetConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}
	if err = randomize.Struct(seed, automodRulesetConditionTwo, automodRulesetConditionDBTypes, false, automodRulesetConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = automodRulesetConditionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = automodRulesetConditionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutomodRulesetConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testAutomodRulesetConditionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRulesetCondition{}
	if err = randomize.Struct(seed, o, automodRulesetConditionDBTypes, true, automodRulesetConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutomodRulesetConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAutomodRulesetConditionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRulesetCondition{}
	if err = randomize.Struct(seed, o, automodRulesetConditionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(automodRulesetConditionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AutomodRulesetConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAutomodRulesetConditionToOneAutomodRulesetUsingRuleset(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AutomodRulesetCondition
	var foreign AutomodRuleset

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, automodRulesetConditionDBTypes, false, automodRulesetConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, automodRulesetDBTypes, false, automodRulesetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRuleset struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RulesetID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Ruleset().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AutomodRulesetConditionSlice{&local}
	if err = local.L.LoadRuleset(ctx, tx, false, (*[]*AutomodRulesetCondition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ruleset == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Ruleset = nil
	if err = local.L.LoadRuleset(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ruleset == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAutomodRulesetConditionToOneSetOpAutomodRulesetUsingRuleset(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutomodRulesetCondition
	var b, c AutomodRuleset

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, automodRulesetConditionDBTypes, false, strmangle.SetComplement(automodRulesetConditionPrimaryKeyColumns, automodRulesetConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, automodRulesetDBTypes, false, strmangle.SetComplement(automodRulesetPrimaryKeyColumns, automodRulesetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, automodRulesetDBTypes, false, strmangle.SetComplement(automodRulesetPrimaryKeyColumns, automodRulesetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AutomodRuleset{&b, &c} {
		err = a.SetRuleset(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Ruleset != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RulesetAutomodRulesetConditions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RulesetID != x.ID {
			t.Error("foreign key was wrong value", a.RulesetID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RulesetID))
		reflect.Indirect(reflect.ValueOf(&a.RulesetID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RulesetID != x.ID {
			t.Error("foreign key was wrong value", a.RulesetID, x.ID)
		}
	}
}

func testAutomodRulesetConditionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRulesetCondition{}
	if err = randomize.Struct(seed, o, automodRulesetConditionDBTypes, true, automodRulesetConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAutomodRulesetConditionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRulesetCondition{}
	if err = randomize.Struct(seed, o, automodRulesetConditionDBTypes, true, automodRulesetConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AutomodRulesetConditionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAutomodRulesetConditionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRulesetCondition{}
	if err = randomize.Struct(seed, o, automodRulesetConditionDBTypes, true, automodRulesetConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AutomodRulesetConditions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	automodRulesetConditionDBTypes = map[string]string{`GuildID`: `bigint`, `ID`: `bigint`, `Kind`: `integer`, `RulesetID`: `bigint`, `Settings`: `jsonb`, `TypeID`: `integer`}
	_                              = bytes.MinRead
)

func testAutomodRulesetConditionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(automodRulesetConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(automodRulesetConditionColumns) == len(automodRulesetConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRulesetCondition{}
	if err = randomize.Struct(seed, o, automodRulesetConditionDBTypes, true, automodRulesetConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutomodRulesetConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, automodRulesetConditionDBTypes, true, automodRulesetConditionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAutomodRulesetConditionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(automodRulesetConditionColumns) == len(automodRulesetConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRulesetCondition{}
	if err = randomize.Struct(seed, o, automodRulesetConditionDBTypes, true, automodRulesetConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutomodRulesetConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, automodRulesetConditionDBTypes, true, automodRulesetConditionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(automodRulesetConditionColumns, automodRulesetConditionPrimaryKeyColumns) {
		fields = automodRulesetConditionColumns
	} else {
		fields = strmangle.SetComplement(
			automodRulesetConditionColumns,
			automodRulesetConditionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AutomodRulesetConditionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAutomodRulesetConditionsUpsert(t *testing.T) {
	t.Parallel()

	if len(automodRulesetConditionColumns) == len(automodRulesetConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AutomodRulesetCondition{}
	if err = randomize.Struct(seed, &o, automodRulesetConditionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AutomodRulesetCondition: %s", err)
	}

	count, err := AutomodRulesetConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, automodRulesetConditionDBTypes, false, automodRulesetConditionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutomodRulesetCondition struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AutomodRulesetCondition: %s", err)
	}

	count, err = AutomodRulesetConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
