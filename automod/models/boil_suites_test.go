// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AutomodLists", testAutomodLists)
	t.Run("AutomodRuleData", testAutomodRuleData)
	t.Run("AutomodRules", testAutomodRules)
	t.Run("AutomodRulesetConditions", testAutomodRulesetConditions)
	t.Run("AutomodRulesets", testAutomodRulesets)
	t.Run("AutomodTriggeredRules", testAutomodTriggeredRules)
	t.Run("AutomodViolations", testAutomodViolations)
}

func TestDelete(t *testing.T) {
	t.Run("AutomodLists", testAutomodListsDelete)
	t.Run("AutomodRuleData", testAutomodRuleDataDelete)
	t.Run("AutomodRules", testAutomodRulesDelete)
	t.Run("AutomodRulesetConditions", testAutomodRulesetConditionsDelete)
	t.Run("AutomodRulesets", testAutomodRulesetsDelete)
	t.Run("AutomodTriggeredRules", testAutomodTriggeredRulesDelete)
	t.Run("AutomodViolations", testAutomodViolationsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AutomodLists", testAutomodListsQueryDeleteAll)
	t.Run("AutomodRuleData", testAutomodRuleDataQueryDeleteAll)
	t.Run("AutomodRules", testAutomodRulesQueryDeleteAll)
	t.Run("AutomodRulesetConditions", testAutomodRulesetConditionsQueryDeleteAll)
	t.Run("AutomodRulesets", testAutomodRulesetsQueryDeleteAll)
	t.Run("AutomodTriggeredRules", testAutomodTriggeredRulesQueryDeleteAll)
	t.Run("AutomodViolations", testAutomodViolationsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AutomodLists", testAutomodListsSliceDeleteAll)
	t.Run("AutomodRuleData", testAutomodRuleDataSliceDeleteAll)
	t.Run("AutomodRules", testAutomodRulesSliceDeleteAll)
	t.Run("AutomodRulesetConditions", testAutomodRulesetConditionsSliceDeleteAll)
	t.Run("AutomodRulesets", testAutomodRulesetsSliceDeleteAll)
	t.Run("AutomodTriggeredRules", testAutomodTriggeredRulesSliceDeleteAll)
	t.Run("AutomodViolations", testAutomodViolationsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AutomodLists", testAutomodListsExists)
	t.Run("AutomodRuleData", testAutomodRuleDataExists)
	t.Run("AutomodRules", testAutomodRulesExists)
	t.Run("AutomodRulesetConditions", testAutomodRulesetConditionsExists)
	t.Run("AutomodRulesets", testAutomodRulesetsExists)
	t.Run("AutomodTriggeredRules", testAutomodTriggeredRulesExists)
	t.Run("AutomodViolations", testAutomodViolationsExists)
}

func TestFind(t *testing.T) {
	t.Run("AutomodLists", testAutomodListsFind)
	t.Run("AutomodRuleData", testAutomodRuleDataFind)
	t.Run("AutomodRules", testAutomodRulesFind)
	t.Run("AutomodRulesetConditions", testAutomodRulesetConditionsFind)
	t.Run("AutomodRulesets", testAutomodRulesetsFind)
	t.Run("AutomodTriggeredRules", testAutomodTriggeredRulesFind)
	t.Run("AutomodViolations", testAutomodViolationsFind)
}

func TestBind(t *testing.T) {
	t.Run("AutomodLists", testAutomodListsBind)
	t.Run("AutomodRuleData", testAutomodRuleDataBind)
	t.Run("AutomodRules", testAutomodRulesBind)
	t.Run("AutomodRulesetConditions", testAutomodRulesetConditionsBind)
	t.Run("AutomodRulesets", testAutomodRulesetsBind)
	t.Run("AutomodTriggeredRules", testAutomodTriggeredRulesBind)
	t.Run("AutomodViolations", testAutomodViolationsBind)
}

func TestOne(t *testing.T) {
	t.Run("AutomodLists", testAutomodListsOne)
	t.Run("AutomodRuleData", testAutomodRuleDataOne)
	t.Run("AutomodRules", testAutomodRulesOne)
	t.Run("AutomodRulesetConditions", testAutomodRulesetConditionsOne)
	t.Run("AutomodRulesets", testAutomodRulesetsOne)
	t.Run("AutomodTriggeredRules", testAutomodTriggeredRulesOne)
	t.Run("AutomodViolations", testAutomodViolationsOne)
}

func TestAll(t *testing.T) {
	t.Run("AutomodLists", testAutomodListsAll)
	t.Run("AutomodRuleData", testAutomodRuleDataAll)
	t.Run("AutomodRules", testAutomodRulesAll)
	t.Run("AutomodRulesetConditions", testAutomodRulesetConditionsAll)
	t.Run("AutomodRulesets", testAutomodRulesetsAll)
	t.Run("AutomodTriggeredRules", testAutomodTriggeredRulesAll)
	t.Run("AutomodViolations", testAutomodViolationsAll)
}

func TestCount(t *testing.T) {
	t.Run("AutomodLists", testAutomodListsCount)
	t.Run("AutomodRuleData", testAutomodRuleDataCount)
	t.Run("AutomodRules", testAutomodRulesCount)
	t.Run("AutomodRulesetConditions", testAutomodRulesetConditionsCount)
	t.Run("AutomodRulesets", testAutomodRulesetsCount)
	t.Run("AutomodTriggeredRules", testAutomodTriggeredRulesCount)
	t.Run("AutomodViolations", testAutomodViolationsCount)
}

func TestInsert(t *testing.T) {
	t.Run("AutomodLists", testAutomodListsInsert)
	t.Run("AutomodLists", testAutomodListsInsertWhitelist)
	t.Run("AutomodRuleData", testAutomodRuleDataInsert)
	t.Run("AutomodRuleData", testAutomodRuleDataInsertWhitelist)
	t.Run("AutomodRules", testAutomodRulesInsert)
	t.Run("AutomodRules", testAutomodRulesInsertWhitelist)
	t.Run("AutomodRulesetConditions", testAutomodRulesetConditionsInsert)
	t.Run("AutomodRulesetConditions", testAutomodRulesetConditionsInsertWhitelist)
	t.Run("AutomodRulesets", testAutomodRulesetsInsert)
	t.Run("AutomodRulesets", testAutomodRulesetsInsertWhitelist)
	t.Run("AutomodTriggeredRules", testAutomodTriggeredRulesInsert)
	t.Run("AutomodTriggeredRules", testAutomodTriggeredRulesInsertWhitelist)
	t.Run("AutomodViolations", testAutomodViolationsInsert)
	t.Run("AutomodViolations", testAutomodViolationsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AutomodRuleDatumToAutomodRuleUsingRule", testAutomodRuleDatumToOneAutomodRuleUsingRule)
	t.Run("AutomodRuleToAutomodRulesetUsingRuleset", testAutomodRuleToOneAutomodRulesetUsingRuleset)
	t.Run("AutomodRulesetConditionToAutomodRulesetUsingRuleset", testAutomodRulesetConditionToOneAutomodRulesetUsingRuleset)
	t.Run("AutomodTriggeredRuleToAutomodRuleDatumUsingTrigger", testAutomodTriggeredRuleToOneAutomodRuleDatumUsingTrigger)
	t.Run("AutomodTriggeredRuleToAutomodRuleUsingRule", testAutomodTriggeredRuleToOneAutomodRuleUsingRule)
	t.Run("AutomodViolationToAutomodRuleUsingRule", testAutomodViolationToOneAutomodRuleUsingRule)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AutomodRuleDatumToTriggerAutomodTriggeredRules", testAutomodRuleDatumToManyTriggerAutomodTriggeredRules)
	t.Run("AutomodRuleToRuleAutomodRuleData", testAutomodRuleToManyRuleAutomodRuleData)
	t.Run("AutomodRuleToRuleAutomodTriggeredRules", testAutomodRuleToManyRuleAutomodTriggeredRules)
	t.Run("AutomodRuleToRuleAutomodViolations", testAutomodRuleToManyRuleAutomodViolations)
	t.Run("AutomodRulesetToRulesetAutomodRules", testAutomodRulesetToManyRulesetAutomodRules)
	t.Run("AutomodRulesetToRulesetAutomodRulesetConditions", testAutomodRulesetToManyRulesetAutomodRulesetConditions)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AutomodRuleDatumToAutomodRuleUsingRuleAutomodRuleData", testAutomodRuleDatumToOneSetOpAutomodRuleUsingRule)
	t.Run("AutomodRuleToAutomodRulesetUsingRulesetAutomodRules", testAutomodRuleToOneSetOpAutomodRulesetUsingRuleset)
	t.Run("AutomodRulesetConditionToAutomodRulesetUsingRulesetAutomodRulesetConditions", testAutomodRulesetConditionToOneSetOpAutomodRulesetUsingRuleset)
	t.Run("AutomodTriggeredRuleToAutomodRuleDatumUsingTriggerAutomodTriggeredRules", testAutomodTriggeredRuleToOneSetOpAutomodRuleDatumUsingTrigger)
	t.Run("AutomodTriggeredRuleToAutomodRuleUsingRuleAutomodTriggeredRules", testAutomodTriggeredRuleToOneSetOpAutomodRuleUsingRule)
	t.Run("AutomodViolationToAutomodRuleUsingRuleAutomodViolations", testAutomodViolationToOneSetOpAutomodRuleUsingRule)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("AutomodTriggeredRuleToAutomodRuleDatumUsingTriggerAutomodTriggeredRules", testAutomodTriggeredRuleToOneRemoveOpAutomodRuleDatumUsingTrigger)
	t.Run("AutomodTriggeredRuleToAutomodRuleUsingRuleAutomodTriggeredRules", testAutomodTriggeredRuleToOneRemoveOpAutomodRuleUsingRule)
	t.Run("AutomodViolationToAutomodRuleUsingRuleAutomodViolations", testAutomodViolationToOneRemoveOpAutomodRuleUsingRule)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AutomodRuleDatumToTriggerAutomodTriggeredRules", testAutomodRuleDatumToManyAddOpTriggerAutomodTriggeredRules)
	t.Run("AutomodRuleToRuleAutomodRuleData", testAutomodRuleToManyAddOpRuleAutomodRuleData)
	t.Run("AutomodRuleToRuleAutomodTriggeredRules", testAutomodRuleToManyAddOpRuleAutomodTriggeredRules)
	t.Run("AutomodRuleToRuleAutomodViolations", testAutomodRuleToManyAddOpRuleAutomodViolations)
	t.Run("AutomodRulesetToRulesetAutomodRules", testAutomodRulesetToManyAddOpRulesetAutomodRules)
	t.Run("AutomodRulesetToRulesetAutomodRulesetConditions", testAutomodRulesetToManyAddOpRulesetAutomodRulesetConditions)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("AutomodRuleDatumToTriggerAutomodTriggeredRules", testAutomodRuleDatumToManySetOpTriggerAutomodTriggeredRules)
	t.Run("AutomodRuleToRuleAutomodTriggeredRules", testAutomodRuleToManySetOpRuleAutomodTriggeredRules)
	t.Run("AutomodRuleToRuleAutomodViolations", testAutomodRuleToManySetOpRuleAutomodViolations)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("AutomodRuleDatumToTriggerAutomodTriggeredRules", testAutomodRuleDatumToManyRemoveOpTriggerAutomodTriggeredRules)
	t.Run("AutomodRuleToRuleAutomodTriggeredRules", testAutomodRuleToManyRemoveOpRuleAutomodTriggeredRules)
	t.Run("AutomodRuleToRuleAutomodViolations", testAutomodRuleToManyRemoveOpRuleAutomodViolations)
}

func TestReload(t *testing.T) {
	t.Run("AutomodLists", testAutomodListsReload)
	t.Run("AutomodRuleData", testAutomodRuleDataReload)
	t.Run("AutomodRules", testAutomodRulesReload)
	t.Run("AutomodRulesetConditions", testAutomodRulesetConditionsReload)
	t.Run("AutomodRulesets", testAutomodRulesetsReload)
	t.Run("AutomodTriggeredRules", testAutomodTriggeredRulesReload)
	t.Run("AutomodViolations", testAutomodViolationsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AutomodLists", testAutomodListsReloadAll)
	t.Run("AutomodRuleData", testAutomodRuleDataReloadAll)
	t.Run("AutomodRules", testAutomodRulesReloadAll)
	t.Run("AutomodRulesetConditions", testAutomodRulesetConditionsReloadAll)
	t.Run("AutomodRulesets", testAutomodRulesetsReloadAll)
	t.Run("AutomodTriggeredRules", testAutomodTriggeredRulesReloadAll)
	t.Run("AutomodViolations", testAutomodViolationsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AutomodLists", testAutomodListsSelect)
	t.Run("AutomodRuleData", testAutomodRuleDataSelect)
	t.Run("AutomodRules", testAutomodRulesSelect)
	t.Run("AutomodRulesetConditions", testAutomodRulesetConditionsSelect)
	t.Run("AutomodRulesets", testAutomodRulesetsSelect)
	t.Run("AutomodTriggeredRules", testAutomodTriggeredRulesSelect)
	t.Run("AutomodViolations", testAutomodViolationsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AutomodLists", testAutomodListsUpdate)
	t.Run("AutomodRuleData", testAutomodRuleDataUpdate)
	t.Run("AutomodRules", testAutomodRulesUpdate)
	t.Run("AutomodRulesetConditions", testAutomodRulesetConditionsUpdate)
	t.Run("AutomodRulesets", testAutomodRulesetsUpdate)
	t.Run("AutomodTriggeredRules", testAutomodTriggeredRulesUpdate)
	t.Run("AutomodViolations", testAutomodViolationsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AutomodLists", testAutomodListsSliceUpdateAll)
	t.Run("AutomodRuleData", testAutomodRuleDataSliceUpdateAll)
	t.Run("AutomodRules", testAutomodRulesSliceUpdateAll)
	t.Run("AutomodRulesetConditions", testAutomodRulesetConditionsSliceUpdateAll)
	t.Run("AutomodRulesets", testAutomodRulesetsSliceUpdateAll)
	t.Run("AutomodTriggeredRules", testAutomodTriggeredRulesSliceUpdateAll)
	t.Run("AutomodViolations", testAutomodViolationsSliceUpdateAll)
}
