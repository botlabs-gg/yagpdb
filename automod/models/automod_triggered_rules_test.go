// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAutomodTriggeredRules(t *testing.T) {
	t.Parallel()

	query := AutomodTriggeredRules()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAutomodTriggeredRulesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodTriggeredRule{}
	if err = randomize.Struct(seed, o, automodTriggeredRuleDBTypes, true, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutomodTriggeredRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutomodTriggeredRulesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodTriggeredRule{}
	if err = randomize.Struct(seed, o, automodTriggeredRuleDBTypes, true, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AutomodTriggeredRules().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutomodTriggeredRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutomodTriggeredRulesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodTriggeredRule{}
	if err = randomize.Struct(seed, o, automodTriggeredRuleDBTypes, true, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AutomodTriggeredRuleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutomodTriggeredRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutomodTriggeredRulesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodTriggeredRule{}
	if err = randomize.Struct(seed, o, automodTriggeredRuleDBTypes, true, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AutomodTriggeredRuleExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AutomodTriggeredRule exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AutomodTriggeredRuleExists to return true, but got false.")
	}
}

func testAutomodTriggeredRulesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodTriggeredRule{}
	if err = randomize.Struct(seed, o, automodTriggeredRuleDBTypes, true, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	automodTriggeredRuleFound, err := FindAutomodTriggeredRule(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if automodTriggeredRuleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAutomodTriggeredRulesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodTriggeredRule{}
	if err = randomize.Struct(seed, o, automodTriggeredRuleDBTypes, true, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AutomodTriggeredRules().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAutomodTriggeredRulesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodTriggeredRule{}
	if err = randomize.Struct(seed, o, automodTriggeredRuleDBTypes, true, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AutomodTriggeredRules().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAutomodTriggeredRulesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	automodTriggeredRuleOne := &AutomodTriggeredRule{}
	automodTriggeredRuleTwo := &AutomodTriggeredRule{}
	if err = randomize.Struct(seed, automodTriggeredRuleOne, automodTriggeredRuleDBTypes, false, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}
	if err = randomize.Struct(seed, automodTriggeredRuleTwo, automodTriggeredRuleDBTypes, false, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = automodTriggeredRuleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = automodTriggeredRuleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AutomodTriggeredRules().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAutomodTriggeredRulesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	automodTriggeredRuleOne := &AutomodTriggeredRule{}
	automodTriggeredRuleTwo := &AutomodTriggeredRule{}
	if err = randomize.Struct(seed, automodTriggeredRuleOne, automodTriggeredRuleDBTypes, false, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}
	if err = randomize.Struct(seed, automodTriggeredRuleTwo, automodTriggeredRuleDBTypes, false, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = automodTriggeredRuleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = automodTriggeredRuleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutomodTriggeredRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testAutomodTriggeredRulesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodTriggeredRule{}
	if err = randomize.Struct(seed, o, automodTriggeredRuleDBTypes, true, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutomodTriggeredRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAutomodTriggeredRulesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodTriggeredRule{}
	if err = randomize.Struct(seed, o, automodTriggeredRuleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(automodTriggeredRuleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AutomodTriggeredRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAutomodTriggeredRuleToOneAutomodRuleDatumUsingTrigger(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AutomodTriggeredRule
	var foreign AutomodRuleDatum

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, automodTriggeredRuleDBTypes, true, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, automodRuleDatumDBTypes, false, automodRuleDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRuleDatum struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TriggerID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Trigger().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AutomodTriggeredRuleSlice{&local}
	if err = local.L.LoadTrigger(ctx, tx, false, (*[]*AutomodTriggeredRule)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Trigger == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Trigger = nil
	if err = local.L.LoadTrigger(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Trigger == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAutomodTriggeredRuleToOneAutomodRuleUsingRule(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AutomodTriggeredRule
	var foreign AutomodRule

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, automodTriggeredRuleDBTypes, true, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, automodRuleDBTypes, false, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.RuleID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Rule().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AutomodTriggeredRuleSlice{&local}
	if err = local.L.LoadRule(ctx, tx, false, (*[]*AutomodTriggeredRule)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Rule == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Rule = nil
	if err = local.L.LoadRule(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Rule == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAutomodTriggeredRuleToOneSetOpAutomodRuleDatumUsingTrigger(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutomodTriggeredRule
	var b, c AutomodRuleDatum

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, automodTriggeredRuleDBTypes, false, strmangle.SetComplement(automodTriggeredRulePrimaryKeyColumns, automodTriggeredRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, automodRuleDatumDBTypes, false, strmangle.SetComplement(automodRuleDatumPrimaryKeyColumns, automodRuleDatumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, automodRuleDatumDBTypes, false, strmangle.SetComplement(automodRuleDatumPrimaryKeyColumns, automodRuleDatumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AutomodRuleDatum{&b, &c} {
		err = a.SetTrigger(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Trigger != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TriggerAutomodTriggeredRules[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TriggerID, x.ID) {
			t.Error("foreign key was wrong value", a.TriggerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TriggerID))
		reflect.Indirect(reflect.ValueOf(&a.TriggerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TriggerID, x.ID) {
			t.Error("foreign key was wrong value", a.TriggerID, x.ID)
		}
	}
}

func testAutomodTriggeredRuleToOneRemoveOpAutomodRuleDatumUsingTrigger(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutomodTriggeredRule
	var b AutomodRuleDatum

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, automodTriggeredRuleDBTypes, false, strmangle.SetComplement(automodTriggeredRulePrimaryKeyColumns, automodTriggeredRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, automodRuleDatumDBTypes, false, strmangle.SetComplement(automodRuleDatumPrimaryKeyColumns, automodRuleDatumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTrigger(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTrigger(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Trigger().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Trigger != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TriggerID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.TriggerAutomodTriggeredRules) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAutomodTriggeredRuleToOneSetOpAutomodRuleUsingRule(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutomodTriggeredRule
	var b, c AutomodRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, automodTriggeredRuleDBTypes, false, strmangle.SetComplement(automodTriggeredRulePrimaryKeyColumns, automodTriggeredRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, automodRuleDBTypes, false, strmangle.SetComplement(automodRulePrimaryKeyColumns, automodRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, automodRuleDBTypes, false, strmangle.SetComplement(automodRulePrimaryKeyColumns, automodRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AutomodRule{&b, &c} {
		err = a.SetRule(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Rule != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RuleAutomodTriggeredRules[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.RuleID, x.ID) {
			t.Error("foreign key was wrong value", a.RuleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RuleID))
		reflect.Indirect(reflect.ValueOf(&a.RuleID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.RuleID, x.ID) {
			t.Error("foreign key was wrong value", a.RuleID, x.ID)
		}
	}
}

func testAutomodTriggeredRuleToOneRemoveOpAutomodRuleUsingRule(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutomodTriggeredRule
	var b AutomodRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, automodTriggeredRuleDBTypes, false, strmangle.SetComplement(automodTriggeredRulePrimaryKeyColumns, automodTriggeredRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, automodRuleDBTypes, false, strmangle.SetComplement(automodRulePrimaryKeyColumns, automodRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRule(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRule(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Rule().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Rule != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.RuleID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RuleAutomodTriggeredRules) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAutomodTriggeredRulesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodTriggeredRule{}
	if err = randomize.Struct(seed, o, automodTriggeredRuleDBTypes, true, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAutomodTriggeredRulesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodTriggeredRule{}
	if err = randomize.Struct(seed, o, automodTriggeredRuleDBTypes, true, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AutomodTriggeredRuleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAutomodTriggeredRulesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodTriggeredRule{}
	if err = randomize.Struct(seed, o, automodTriggeredRuleDBTypes, true, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AutomodTriggeredRules().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	automodTriggeredRuleDBTypes = map[string]string{`ChannelID`: `bigint`, `ChannelName`: `text`, `CreatedAt`: `timestamp with time zone`, `Extradata`: `jsonb`, `GuildID`: `bigint`, `ID`: `bigint`, `RuleID`: `bigint`, `RuleName`: `text`, `RulesetName`: `text`, `TriggerID`: `bigint`, `TriggerTypeid`: `integer`, `UserID`: `bigint`, `UserName`: `text`}
	_                           = bytes.MinRead
)

func testAutomodTriggeredRulesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(automodTriggeredRulePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(automodTriggeredRuleColumns) == len(automodTriggeredRulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AutomodTriggeredRule{}
	if err = randomize.Struct(seed, o, automodTriggeredRuleDBTypes, true, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutomodTriggeredRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, automodTriggeredRuleDBTypes, true, automodTriggeredRulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAutomodTriggeredRulesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(automodTriggeredRuleColumns) == len(automodTriggeredRulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AutomodTriggeredRule{}
	if err = randomize.Struct(seed, o, automodTriggeredRuleDBTypes, true, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutomodTriggeredRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, automodTriggeredRuleDBTypes, true, automodTriggeredRulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(automodTriggeredRuleColumns, automodTriggeredRulePrimaryKeyColumns) {
		fields = automodTriggeredRuleColumns
	} else {
		fields = strmangle.SetComplement(
			automodTriggeredRuleColumns,
			automodTriggeredRulePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AutomodTriggeredRuleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAutomodTriggeredRulesUpsert(t *testing.T) {
	t.Parallel()

	if len(automodTriggeredRuleColumns) == len(automodTriggeredRulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AutomodTriggeredRule{}
	if err = randomize.Struct(seed, &o, automodTriggeredRuleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AutomodTriggeredRule: %s", err)
	}

	count, err := AutomodTriggeredRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, automodTriggeredRuleDBTypes, false, automodTriggeredRulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutomodTriggeredRule struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AutomodTriggeredRule: %s", err)
	}

	count, err = AutomodTriggeredRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
