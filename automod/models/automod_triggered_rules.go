// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// AutomodTriggeredRule is an object representing the database table.
type AutomodTriggeredRule struct {
	ID            int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt     time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ChannelID     int64      `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	ChannelName   string     `boil:"channel_name" json:"channel_name" toml:"channel_name" yaml:"channel_name"`
	GuildID       int64      `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	TriggerID     null.Int64 `boil:"trigger_id" json:"trigger_id,omitempty" toml:"trigger_id" yaml:"trigger_id,omitempty"`
	TriggerTypeid null.Int   `boil:"trigger_typeid" json:"trigger_typeid,omitempty" toml:"trigger_typeid" yaml:"trigger_typeid,omitempty"`
	RuleID        null.Int64 `boil:"rule_id" json:"rule_id,omitempty" toml:"rule_id" yaml:"rule_id,omitempty"`
	RuleName      string     `boil:"rule_name" json:"rule_name" toml:"rule_name" yaml:"rule_name"`
	RulesetName   string     `boil:"ruleset_name" json:"ruleset_name" toml:"ruleset_name" yaml:"ruleset_name"`
	UserID        int64      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	UserName      string     `boil:"user_name" json:"user_name" toml:"user_name" yaml:"user_name"`
	Extradata     types.JSON `boil:"extradata" json:"extradata" toml:"extradata" yaml:"extradata"`

	R *automodTriggeredRuleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L automodTriggeredRuleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AutomodTriggeredRuleColumns = struct {
	ID            string
	CreatedAt     string
	ChannelID     string
	ChannelName   string
	GuildID       string
	TriggerID     string
	TriggerTypeid string
	RuleID        string
	RuleName      string
	RulesetName   string
	UserID        string
	UserName      string
	Extradata     string
}{
	ID:            "id",
	CreatedAt:     "created_at",
	ChannelID:     "channel_id",
	ChannelName:   "channel_name",
	GuildID:       "guild_id",
	TriggerID:     "trigger_id",
	TriggerTypeid: "trigger_typeid",
	RuleID:        "rule_id",
	RuleName:      "rule_name",
	RulesetName:   "ruleset_name",
	UserID:        "user_id",
	UserName:      "user_name",
	Extradata:     "extradata",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AutomodTriggeredRuleWhere = struct {
	ID            whereHelperint64
	CreatedAt     whereHelpertime_Time
	ChannelID     whereHelperint64
	ChannelName   whereHelperstring
	GuildID       whereHelperint64
	TriggerID     whereHelpernull_Int64
	TriggerTypeid whereHelpernull_Int
	RuleID        whereHelpernull_Int64
	RuleName      whereHelperstring
	RulesetName   whereHelperstring
	UserID        whereHelperint64
	UserName      whereHelperstring
	Extradata     whereHelpertypes_JSON
}{
	ID:            whereHelperint64{field: "\"automod_triggered_rules\".\"id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"automod_triggered_rules\".\"created_at\""},
	ChannelID:     whereHelperint64{field: "\"automod_triggered_rules\".\"channel_id\""},
	ChannelName:   whereHelperstring{field: "\"automod_triggered_rules\".\"channel_name\""},
	GuildID:       whereHelperint64{field: "\"automod_triggered_rules\".\"guild_id\""},
	TriggerID:     whereHelpernull_Int64{field: "\"automod_triggered_rules\".\"trigger_id\""},
	TriggerTypeid: whereHelpernull_Int{field: "\"automod_triggered_rules\".\"trigger_typeid\""},
	RuleID:        whereHelpernull_Int64{field: "\"automod_triggered_rules\".\"rule_id\""},
	RuleName:      whereHelperstring{field: "\"automod_triggered_rules\".\"rule_name\""},
	RulesetName:   whereHelperstring{field: "\"automod_triggered_rules\".\"ruleset_name\""},
	UserID:        whereHelperint64{field: "\"automod_triggered_rules\".\"user_id\""},
	UserName:      whereHelperstring{field: "\"automod_triggered_rules\".\"user_name\""},
	Extradata:     whereHelpertypes_JSON{field: "\"automod_triggered_rules\".\"extradata\""},
}

// AutomodTriggeredRuleRels is where relationship names are stored.
var AutomodTriggeredRuleRels = struct {
	Rule    string
	Trigger string
}{
	Rule:    "Rule",
	Trigger: "Trigger",
}

// automodTriggeredRuleR is where relationships are stored.
type automodTriggeredRuleR struct {
	Rule    *AutomodRule
	Trigger *AutomodRuleDatum
}

// NewStruct creates a new relationship struct
func (*automodTriggeredRuleR) NewStruct() *automodTriggeredRuleR {
	return &automodTriggeredRuleR{}
}

// automodTriggeredRuleL is where Load methods for each relationship are stored.
type automodTriggeredRuleL struct{}

var (
	automodTriggeredRuleAllColumns            = []string{"id", "created_at", "channel_id", "channel_name", "guild_id", "trigger_id", "trigger_typeid", "rule_id", "rule_name", "ruleset_name", "user_id", "user_name", "extradata"}
	automodTriggeredRuleColumnsWithoutDefault = []string{"created_at", "channel_id", "channel_name", "guild_id", "trigger_id", "trigger_typeid", "rule_id", "rule_name", "ruleset_name", "user_id", "user_name", "extradata"}
	automodTriggeredRuleColumnsWithDefault    = []string{"id"}
	automodTriggeredRulePrimaryKeyColumns     = []string{"id"}
)

type (
	// AutomodTriggeredRuleSlice is an alias for a slice of pointers to AutomodTriggeredRule.
	// This should generally be used opposed to []AutomodTriggeredRule.
	AutomodTriggeredRuleSlice []*AutomodTriggeredRule

	automodTriggeredRuleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	automodTriggeredRuleType                 = reflect.TypeOf(&AutomodTriggeredRule{})
	automodTriggeredRuleMapping              = queries.MakeStructMapping(automodTriggeredRuleType)
	automodTriggeredRulePrimaryKeyMapping, _ = queries.BindMapping(automodTriggeredRuleType, automodTriggeredRuleMapping, automodTriggeredRulePrimaryKeyColumns)
	automodTriggeredRuleInsertCacheMut       sync.RWMutex
	automodTriggeredRuleInsertCache          = make(map[string]insertCache)
	automodTriggeredRuleUpdateCacheMut       sync.RWMutex
	automodTriggeredRuleUpdateCache          = make(map[string]updateCache)
	automodTriggeredRuleUpsertCacheMut       sync.RWMutex
	automodTriggeredRuleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single automodTriggeredRule record from the query using the global executor.
func (q automodTriggeredRuleQuery) OneG(ctx context.Context) (*AutomodTriggeredRule, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single automodTriggeredRule record from the query.
func (q automodTriggeredRuleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AutomodTriggeredRule, error) {
	o := &AutomodTriggeredRule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for automod_triggered_rules")
	}

	return o, nil
}

// AllG returns all AutomodTriggeredRule records from the query using the global executor.
func (q automodTriggeredRuleQuery) AllG(ctx context.Context) (AutomodTriggeredRuleSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AutomodTriggeredRule records from the query.
func (q automodTriggeredRuleQuery) All(ctx context.Context, exec boil.ContextExecutor) (AutomodTriggeredRuleSlice, error) {
	var o []*AutomodTriggeredRule

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AutomodTriggeredRule slice")
	}

	return o, nil
}

// CountG returns the count of all AutomodTriggeredRule records in the query, and panics on error.
func (q automodTriggeredRuleQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AutomodTriggeredRule records in the query.
func (q automodTriggeredRuleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count automod_triggered_rules rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q automodTriggeredRuleQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q automodTriggeredRuleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if automod_triggered_rules exists")
	}

	return count > 0, nil
}

// Rule pointed to by the foreign key.
func (o *AutomodTriggeredRule) Rule(mods ...qm.QueryMod) automodRuleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RuleID),
	}

	queryMods = append(queryMods, mods...)

	query := AutomodRules(queryMods...)
	queries.SetFrom(query.Query, "\"automod_rules\"")

	return query
}

// Trigger pointed to by the foreign key.
func (o *AutomodTriggeredRule) Trigger(mods ...qm.QueryMod) automodRuleDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TriggerID),
	}

	queryMods = append(queryMods, mods...)

	query := AutomodRuleData(queryMods...)
	queries.SetFrom(query.Query, "\"automod_rule_data\"")

	return query
}

// LoadRule allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (automodTriggeredRuleL) LoadRule(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutomodTriggeredRule interface{}, mods queries.Applicator) error {
	var slice []*AutomodTriggeredRule
	var object *AutomodTriggeredRule

	if singular {
		object = maybeAutomodTriggeredRule.(*AutomodTriggeredRule)
	} else {
		slice = *maybeAutomodTriggeredRule.(*[]*AutomodTriggeredRule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &automodTriggeredRuleR{}
		}
		if !queries.IsNil(object.RuleID) {
			args = append(args, object.RuleID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &automodTriggeredRuleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RuleID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RuleID) {
				args = append(args, obj.RuleID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`automod_rules`), qm.WhereIn(`automod_rules.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AutomodRule")
	}

	var resultSlice []*AutomodRule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AutomodRule")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for automod_rules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for automod_rules")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Rule = foreign
		if foreign.R == nil {
			foreign.R = &automodRuleR{}
		}
		foreign.R.RuleAutomodTriggeredRules = append(foreign.R.RuleAutomodTriggeredRules, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RuleID, foreign.ID) {
				local.R.Rule = foreign
				if foreign.R == nil {
					foreign.R = &automodRuleR{}
				}
				foreign.R.RuleAutomodTriggeredRules = append(foreign.R.RuleAutomodTriggeredRules, local)
				break
			}
		}
	}

	return nil
}

// LoadTrigger allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (automodTriggeredRuleL) LoadTrigger(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutomodTriggeredRule interface{}, mods queries.Applicator) error {
	var slice []*AutomodTriggeredRule
	var object *AutomodTriggeredRule

	if singular {
		object = maybeAutomodTriggeredRule.(*AutomodTriggeredRule)
	} else {
		slice = *maybeAutomodTriggeredRule.(*[]*AutomodTriggeredRule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &automodTriggeredRuleR{}
		}
		if !queries.IsNil(object.TriggerID) {
			args = append(args, object.TriggerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &automodTriggeredRuleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TriggerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TriggerID) {
				args = append(args, obj.TriggerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`automod_rule_data`), qm.WhereIn(`automod_rule_data.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AutomodRuleDatum")
	}

	var resultSlice []*AutomodRuleDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AutomodRuleDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for automod_rule_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for automod_rule_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Trigger = foreign
		if foreign.R == nil {
			foreign.R = &automodRuleDatumR{}
		}
		foreign.R.TriggerAutomodTriggeredRules = append(foreign.R.TriggerAutomodTriggeredRules, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TriggerID, foreign.ID) {
				local.R.Trigger = foreign
				if foreign.R == nil {
					foreign.R = &automodRuleDatumR{}
				}
				foreign.R.TriggerAutomodTriggeredRules = append(foreign.R.TriggerAutomodTriggeredRules, local)
				break
			}
		}
	}

	return nil
}

// SetRuleG of the automodTriggeredRule to the related item.
// Sets o.R.Rule to related.
// Adds o to related.R.RuleAutomodTriggeredRules.
// Uses the global database handle.
func (o *AutomodTriggeredRule) SetRuleG(ctx context.Context, insert bool, related *AutomodRule) error {
	return o.SetRule(ctx, boil.GetContextDB(), insert, related)
}

// SetRule of the automodTriggeredRule to the related item.
// Sets o.R.Rule to related.
// Adds o to related.R.RuleAutomodTriggeredRules.
func (o *AutomodTriggeredRule) SetRule(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AutomodRule) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"automod_triggered_rules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"rule_id"}),
		strmangle.WhereClause("\"", "\"", 2, automodTriggeredRulePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RuleID, related.ID)
	if o.R == nil {
		o.R = &automodTriggeredRuleR{
			Rule: related,
		}
	} else {
		o.R.Rule = related
	}

	if related.R == nil {
		related.R = &automodRuleR{
			RuleAutomodTriggeredRules: AutomodTriggeredRuleSlice{o},
		}
	} else {
		related.R.RuleAutomodTriggeredRules = append(related.R.RuleAutomodTriggeredRules, o)
	}

	return nil
}

// RemoveRuleG relationship.
// Sets o.R.Rule to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *AutomodTriggeredRule) RemoveRuleG(ctx context.Context, related *AutomodRule) error {
	return o.RemoveRule(ctx, boil.GetContextDB(), related)
}

// RemoveRule relationship.
// Sets o.R.Rule to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *AutomodTriggeredRule) RemoveRule(ctx context.Context, exec boil.ContextExecutor, related *AutomodRule) error {
	var err error

	queries.SetScanner(&o.RuleID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("rule_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Rule = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RuleAutomodTriggeredRules {
		if queries.Equal(o.RuleID, ri.RuleID) {
			continue
		}

		ln := len(related.R.RuleAutomodTriggeredRules)
		if ln > 1 && i < ln-1 {
			related.R.RuleAutomodTriggeredRules[i] = related.R.RuleAutomodTriggeredRules[ln-1]
		}
		related.R.RuleAutomodTriggeredRules = related.R.RuleAutomodTriggeredRules[:ln-1]
		break
	}
	return nil
}

// SetTriggerG of the automodTriggeredRule to the related item.
// Sets o.R.Trigger to related.
// Adds o to related.R.TriggerAutomodTriggeredRules.
// Uses the global database handle.
func (o *AutomodTriggeredRule) SetTriggerG(ctx context.Context, insert bool, related *AutomodRuleDatum) error {
	return o.SetTrigger(ctx, boil.GetContextDB(), insert, related)
}

// SetTrigger of the automodTriggeredRule to the related item.
// Sets o.R.Trigger to related.
// Adds o to related.R.TriggerAutomodTriggeredRules.
func (o *AutomodTriggeredRule) SetTrigger(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AutomodRuleDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"automod_triggered_rules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"trigger_id"}),
		strmangle.WhereClause("\"", "\"", 2, automodTriggeredRulePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TriggerID, related.ID)
	if o.R == nil {
		o.R = &automodTriggeredRuleR{
			Trigger: related,
		}
	} else {
		o.R.Trigger = related
	}

	if related.R == nil {
		related.R = &automodRuleDatumR{
			TriggerAutomodTriggeredRules: AutomodTriggeredRuleSlice{o},
		}
	} else {
		related.R.TriggerAutomodTriggeredRules = append(related.R.TriggerAutomodTriggeredRules, o)
	}

	return nil
}

// RemoveTriggerG relationship.
// Sets o.R.Trigger to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *AutomodTriggeredRule) RemoveTriggerG(ctx context.Context, related *AutomodRuleDatum) error {
	return o.RemoveTrigger(ctx, boil.GetContextDB(), related)
}

// RemoveTrigger relationship.
// Sets o.R.Trigger to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *AutomodTriggeredRule) RemoveTrigger(ctx context.Context, exec boil.ContextExecutor, related *AutomodRuleDatum) error {
	var err error

	queries.SetScanner(&o.TriggerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("trigger_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Trigger = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TriggerAutomodTriggeredRules {
		if queries.Equal(o.TriggerID, ri.TriggerID) {
			continue
		}

		ln := len(related.R.TriggerAutomodTriggeredRules)
		if ln > 1 && i < ln-1 {
			related.R.TriggerAutomodTriggeredRules[i] = related.R.TriggerAutomodTriggeredRules[ln-1]
		}
		related.R.TriggerAutomodTriggeredRules = related.R.TriggerAutomodTriggeredRules[:ln-1]
		break
	}
	return nil
}

// AutomodTriggeredRules retrieves all the records using an executor.
func AutomodTriggeredRules(mods ...qm.QueryMod) automodTriggeredRuleQuery {
	mods = append(mods, qm.From("\"automod_triggered_rules\""))
	return automodTriggeredRuleQuery{NewQuery(mods...)}
}

// FindAutomodTriggeredRuleG retrieves a single record by ID.
func FindAutomodTriggeredRuleG(ctx context.Context, iD int64, selectCols ...string) (*AutomodTriggeredRule, error) {
	return FindAutomodTriggeredRule(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAutomodTriggeredRule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAutomodTriggeredRule(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*AutomodTriggeredRule, error) {
	automodTriggeredRuleObj := &AutomodTriggeredRule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"automod_triggered_rules\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, automodTriggeredRuleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from automod_triggered_rules")
	}

	return automodTriggeredRuleObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AutomodTriggeredRule) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AutomodTriggeredRule) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no automod_triggered_rules provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(automodTriggeredRuleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	automodTriggeredRuleInsertCacheMut.RLock()
	cache, cached := automodTriggeredRuleInsertCache[key]
	automodTriggeredRuleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			automodTriggeredRuleAllColumns,
			automodTriggeredRuleColumnsWithDefault,
			automodTriggeredRuleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(automodTriggeredRuleType, automodTriggeredRuleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(automodTriggeredRuleType, automodTriggeredRuleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"automod_triggered_rules\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"automod_triggered_rules\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into automod_triggered_rules")
	}

	if !cached {
		automodTriggeredRuleInsertCacheMut.Lock()
		automodTriggeredRuleInsertCache[key] = cache
		automodTriggeredRuleInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single AutomodTriggeredRule record using the global executor.
// See Update for more documentation.
func (o *AutomodTriggeredRule) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AutomodTriggeredRule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AutomodTriggeredRule) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	automodTriggeredRuleUpdateCacheMut.RLock()
	cache, cached := automodTriggeredRuleUpdateCache[key]
	automodTriggeredRuleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			automodTriggeredRuleAllColumns,
			automodTriggeredRulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update automod_triggered_rules, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"automod_triggered_rules\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, automodTriggeredRulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(automodTriggeredRuleType, automodTriggeredRuleMapping, append(wl, automodTriggeredRulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update automod_triggered_rules row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for automod_triggered_rules")
	}

	if !cached {
		automodTriggeredRuleUpdateCacheMut.Lock()
		automodTriggeredRuleUpdateCache[key] = cache
		automodTriggeredRuleUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q automodTriggeredRuleQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q automodTriggeredRuleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for automod_triggered_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for automod_triggered_rules")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AutomodTriggeredRuleSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AutomodTriggeredRuleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), automodTriggeredRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"automod_triggered_rules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, automodTriggeredRulePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in automodTriggeredRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all automodTriggeredRule")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AutomodTriggeredRule) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AutomodTriggeredRule) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no automod_triggered_rules provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(automodTriggeredRuleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	automodTriggeredRuleUpsertCacheMut.RLock()
	cache, cached := automodTriggeredRuleUpsertCache[key]
	automodTriggeredRuleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			automodTriggeredRuleAllColumns,
			automodTriggeredRuleColumnsWithDefault,
			automodTriggeredRuleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			automodTriggeredRuleAllColumns,
			automodTriggeredRulePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert automod_triggered_rules, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(automodTriggeredRulePrimaryKeyColumns))
			copy(conflict, automodTriggeredRulePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"automod_triggered_rules\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(automodTriggeredRuleType, automodTriggeredRuleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(automodTriggeredRuleType, automodTriggeredRuleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert automod_triggered_rules")
	}

	if !cached {
		automodTriggeredRuleUpsertCacheMut.Lock()
		automodTriggeredRuleUpsertCache[key] = cache
		automodTriggeredRuleUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single AutomodTriggeredRule record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AutomodTriggeredRule) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AutomodTriggeredRule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AutomodTriggeredRule) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AutomodTriggeredRule provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), automodTriggeredRulePrimaryKeyMapping)
	sql := "DELETE FROM \"automod_triggered_rules\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from automod_triggered_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for automod_triggered_rules")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q automodTriggeredRuleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no automodTriggeredRuleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from automod_triggered_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for automod_triggered_rules")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AutomodTriggeredRuleSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AutomodTriggeredRuleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), automodTriggeredRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"automod_triggered_rules\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, automodTriggeredRulePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from automodTriggeredRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for automod_triggered_rules")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AutomodTriggeredRule) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no AutomodTriggeredRule provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AutomodTriggeredRule) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAutomodTriggeredRule(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AutomodTriggeredRuleSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AutomodTriggeredRuleSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AutomodTriggeredRuleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AutomodTriggeredRuleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), automodTriggeredRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"automod_triggered_rules\".* FROM \"automod_triggered_rules\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, automodTriggeredRulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AutomodTriggeredRuleSlice")
	}

	*o = slice

	return nil
}

// AutomodTriggeredRuleExistsG checks if the AutomodTriggeredRule row exists.
func AutomodTriggeredRuleExistsG(ctx context.Context, iD int64) (bool, error) {
	return AutomodTriggeredRuleExists(ctx, boil.GetContextDB(), iD)
}

// AutomodTriggeredRuleExists checks if the AutomodTriggeredRule row exists.
func AutomodTriggeredRuleExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"automod_triggered_rules\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if automod_triggered_rules exists")
	}

	return exists, nil
}
