// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAutomodRules(t *testing.T) {
	t.Parallel()

	query := AutomodRules()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAutomodRulesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRule{}
	if err = randomize.Struct(seed, o, automodRuleDBTypes, true, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutomodRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutomodRulesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRule{}
	if err = randomize.Struct(seed, o, automodRuleDBTypes, true, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AutomodRules().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutomodRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutomodRulesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRule{}
	if err = randomize.Struct(seed, o, automodRuleDBTypes, true, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AutomodRuleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutomodRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutomodRulesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRule{}
	if err = randomize.Struct(seed, o, automodRuleDBTypes, true, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AutomodRuleExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AutomodRule exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AutomodRuleExists to return true, but got false.")
	}
}

func testAutomodRulesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRule{}
	if err = randomize.Struct(seed, o, automodRuleDBTypes, true, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	automodRuleFound, err := FindAutomodRule(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if automodRuleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAutomodRulesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRule{}
	if err = randomize.Struct(seed, o, automodRuleDBTypes, true, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AutomodRules().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAutomodRulesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRule{}
	if err = randomize.Struct(seed, o, automodRuleDBTypes, true, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AutomodRules().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAutomodRulesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	automodRuleOne := &AutomodRule{}
	automodRuleTwo := &AutomodRule{}
	if err = randomize.Struct(seed, automodRuleOne, automodRuleDBTypes, false, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}
	if err = randomize.Struct(seed, automodRuleTwo, automodRuleDBTypes, false, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = automodRuleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = automodRuleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AutomodRules().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAutomodRulesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	automodRuleOne := &AutomodRule{}
	automodRuleTwo := &AutomodRule{}
	if err = randomize.Struct(seed, automodRuleOne, automodRuleDBTypes, false, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}
	if err = randomize.Struct(seed, automodRuleTwo, automodRuleDBTypes, false, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = automodRuleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = automodRuleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutomodRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testAutomodRulesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRule{}
	if err = randomize.Struct(seed, o, automodRuleDBTypes, true, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutomodRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAutomodRulesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRule{}
	if err = randomize.Struct(seed, o, automodRuleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(automodRuleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AutomodRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAutomodRuleToManyRuleAutomodRuleData(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutomodRule
	var b, c AutomodRuleDatum

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, automodRuleDBTypes, true, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, automodRuleDatumDBTypes, false, automodRuleDatumColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, automodRuleDatumDBTypes, false, automodRuleDatumColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RuleID = a.ID
	c.RuleID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	automodRuleDatum, err := a.RuleAutomodRuleData().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range automodRuleDatum {
		if v.RuleID == b.RuleID {
			bFound = true
		}
		if v.RuleID == c.RuleID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AutomodRuleSlice{&a}
	if err = a.L.LoadRuleAutomodRuleData(ctx, tx, false, (*[]*AutomodRule)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RuleAutomodRuleData); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RuleAutomodRuleData = nil
	if err = a.L.LoadRuleAutomodRuleData(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RuleAutomodRuleData); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", automodRuleDatum)
	}
}

func testAutomodRuleToManyRuleAutomodTriggeredRules(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutomodRule
	var b, c AutomodTriggeredRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, automodRuleDBTypes, true, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, automodTriggeredRuleDBTypes, false, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, automodTriggeredRuleDBTypes, false, automodTriggeredRuleColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.RuleID, a.ID)
	queries.Assign(&c.RuleID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	automodTriggeredRule, err := a.RuleAutomodTriggeredRules().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range automodTriggeredRule {
		if queries.Equal(v.RuleID, b.RuleID) {
			bFound = true
		}
		if queries.Equal(v.RuleID, c.RuleID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AutomodRuleSlice{&a}
	if err = a.L.LoadRuleAutomodTriggeredRules(ctx, tx, false, (*[]*AutomodRule)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RuleAutomodTriggeredRules); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RuleAutomodTriggeredRules = nil
	if err = a.L.LoadRuleAutomodTriggeredRules(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RuleAutomodTriggeredRules); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", automodTriggeredRule)
	}
}

func testAutomodRuleToManyRuleAutomodViolations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutomodRule
	var b, c AutomodViolation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, automodRuleDBTypes, true, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, automodViolationDBTypes, false, automodViolationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, automodViolationDBTypes, false, automodViolationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.RuleID, a.ID)
	queries.Assign(&c.RuleID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	automodViolation, err := a.RuleAutomodViolations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range automodViolation {
		if queries.Equal(v.RuleID, b.RuleID) {
			bFound = true
		}
		if queries.Equal(v.RuleID, c.RuleID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AutomodRuleSlice{&a}
	if err = a.L.LoadRuleAutomodViolations(ctx, tx, false, (*[]*AutomodRule)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RuleAutomodViolations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RuleAutomodViolations = nil
	if err = a.L.LoadRuleAutomodViolations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RuleAutomodViolations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", automodViolation)
	}
}

func testAutomodRuleToManyAddOpRuleAutomodRuleData(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutomodRule
	var b, c, d, e AutomodRuleDatum

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, automodRuleDBTypes, false, strmangle.SetComplement(automodRulePrimaryKeyColumns, automodRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AutomodRuleDatum{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, automodRuleDatumDBTypes, false, strmangle.SetComplement(automodRuleDatumPrimaryKeyColumns, automodRuleDatumColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AutomodRuleDatum{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRuleAutomodRuleData(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RuleID {
			t.Error("foreign key was wrong value", a.ID, first.RuleID)
		}
		if a.ID != second.RuleID {
			t.Error("foreign key was wrong value", a.ID, second.RuleID)
		}

		if first.R.Rule != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Rule != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RuleAutomodRuleData[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RuleAutomodRuleData[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RuleAutomodRuleData().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAutomodRuleToManyAddOpRuleAutomodTriggeredRules(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutomodRule
	var b, c, d, e AutomodTriggeredRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, automodRuleDBTypes, false, strmangle.SetComplement(automodRulePrimaryKeyColumns, automodRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AutomodTriggeredRule{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, automodTriggeredRuleDBTypes, false, strmangle.SetComplement(automodTriggeredRulePrimaryKeyColumns, automodTriggeredRuleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AutomodTriggeredRule{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRuleAutomodTriggeredRules(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.RuleID) {
			t.Error("foreign key was wrong value", a.ID, first.RuleID)
		}
		if !queries.Equal(a.ID, second.RuleID) {
			t.Error("foreign key was wrong value", a.ID, second.RuleID)
		}

		if first.R.Rule != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Rule != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RuleAutomodTriggeredRules[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RuleAutomodTriggeredRules[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RuleAutomodTriggeredRules().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAutomodRuleToManySetOpRuleAutomodTriggeredRules(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutomodRule
	var b, c, d, e AutomodTriggeredRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, automodRuleDBTypes, false, strmangle.SetComplement(automodRulePrimaryKeyColumns, automodRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AutomodTriggeredRule{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, automodTriggeredRuleDBTypes, false, strmangle.SetComplement(automodTriggeredRulePrimaryKeyColumns, automodTriggeredRuleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetRuleAutomodTriggeredRules(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RuleAutomodTriggeredRules().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRuleAutomodTriggeredRules(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RuleAutomodTriggeredRules().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RuleID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RuleID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.RuleID) {
		t.Error("foreign key was wrong value", a.ID, d.RuleID)
	}
	if !queries.Equal(a.ID, e.RuleID) {
		t.Error("foreign key was wrong value", a.ID, e.RuleID)
	}

	if b.R.Rule != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Rule != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Rule != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Rule != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.RuleAutomodTriggeredRules[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RuleAutomodTriggeredRules[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAutomodRuleToManyRemoveOpRuleAutomodTriggeredRules(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutomodRule
	var b, c, d, e AutomodTriggeredRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, automodRuleDBTypes, false, strmangle.SetComplement(automodRulePrimaryKeyColumns, automodRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AutomodTriggeredRule{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, automodTriggeredRuleDBTypes, false, strmangle.SetComplement(automodTriggeredRulePrimaryKeyColumns, automodTriggeredRuleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddRuleAutomodTriggeredRules(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RuleAutomodTriggeredRules().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRuleAutomodTriggeredRules(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RuleAutomodTriggeredRules().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RuleID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RuleID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Rule != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Rule != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Rule != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Rule != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.RuleAutomodTriggeredRules) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RuleAutomodTriggeredRules[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RuleAutomodTriggeredRules[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAutomodRuleToManyAddOpRuleAutomodViolations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutomodRule
	var b, c, d, e AutomodViolation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, automodRuleDBTypes, false, strmangle.SetComplement(automodRulePrimaryKeyColumns, automodRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AutomodViolation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, automodViolationDBTypes, false, strmangle.SetComplement(automodViolationPrimaryKeyColumns, automodViolationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AutomodViolation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRuleAutomodViolations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.RuleID) {
			t.Error("foreign key was wrong value", a.ID, first.RuleID)
		}
		if !queries.Equal(a.ID, second.RuleID) {
			t.Error("foreign key was wrong value", a.ID, second.RuleID)
		}

		if first.R.Rule != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Rule != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RuleAutomodViolations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RuleAutomodViolations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RuleAutomodViolations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAutomodRuleToManySetOpRuleAutomodViolations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutomodRule
	var b, c, d, e AutomodViolation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, automodRuleDBTypes, false, strmangle.SetComplement(automodRulePrimaryKeyColumns, automodRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AutomodViolation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, automodViolationDBTypes, false, strmangle.SetComplement(automodViolationPrimaryKeyColumns, automodViolationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetRuleAutomodViolations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RuleAutomodViolations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRuleAutomodViolations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RuleAutomodViolations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RuleID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RuleID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.RuleID) {
		t.Error("foreign key was wrong value", a.ID, d.RuleID)
	}
	if !queries.Equal(a.ID, e.RuleID) {
		t.Error("foreign key was wrong value", a.ID, e.RuleID)
	}

	if b.R.Rule != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Rule != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Rule != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Rule != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.RuleAutomodViolations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RuleAutomodViolations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAutomodRuleToManyRemoveOpRuleAutomodViolations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutomodRule
	var b, c, d, e AutomodViolation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, automodRuleDBTypes, false, strmangle.SetComplement(automodRulePrimaryKeyColumns, automodRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AutomodViolation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, automodViolationDBTypes, false, strmangle.SetComplement(automodViolationPrimaryKeyColumns, automodViolationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddRuleAutomodViolations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RuleAutomodViolations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRuleAutomodViolations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RuleAutomodViolations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RuleID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RuleID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Rule != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Rule != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Rule != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Rule != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.RuleAutomodViolations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RuleAutomodViolations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RuleAutomodViolations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAutomodRuleToOneAutomodRulesetUsingRuleset(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AutomodRule
	var foreign AutomodRuleset

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, automodRuleDBTypes, false, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, automodRulesetDBTypes, false, automodRulesetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRuleset struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RulesetID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Ruleset().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AutomodRuleSlice{&local}
	if err = local.L.LoadRuleset(ctx, tx, false, (*[]*AutomodRule)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ruleset == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Ruleset = nil
	if err = local.L.LoadRuleset(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ruleset == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAutomodRuleToOneSetOpAutomodRulesetUsingRuleset(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutomodRule
	var b, c AutomodRuleset

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, automodRuleDBTypes, false, strmangle.SetComplement(automodRulePrimaryKeyColumns, automodRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, automodRulesetDBTypes, false, strmangle.SetComplement(automodRulesetPrimaryKeyColumns, automodRulesetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, automodRulesetDBTypes, false, strmangle.SetComplement(automodRulesetPrimaryKeyColumns, automodRulesetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AutomodRuleset{&b, &c} {
		err = a.SetRuleset(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Ruleset != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RulesetAutomodRules[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RulesetID != x.ID {
			t.Error("foreign key was wrong value", a.RulesetID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RulesetID))
		reflect.Indirect(reflect.ValueOf(&a.RulesetID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RulesetID != x.ID {
			t.Error("foreign key was wrong value", a.RulesetID, x.ID)
		}
	}
}

func testAutomodRulesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRule{}
	if err = randomize.Struct(seed, o, automodRuleDBTypes, true, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAutomodRulesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRule{}
	if err = randomize.Struct(seed, o, automodRuleDBTypes, true, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AutomodRuleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAutomodRulesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRule{}
	if err = randomize.Struct(seed, o, automodRuleDBTypes, true, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AutomodRules().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	automodRuleDBTypes = map[string]string{`GuildID`: `bigint`, `ID`: `bigint`, `Name`: `text`, `RulesetID`: `bigint`, `TriggerCounter`: `bigint`}
	_                  = bytes.MinRead
)

func testAutomodRulesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(automodRulePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(automodRuleColumns) == len(automodRulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRule{}
	if err = randomize.Struct(seed, o, automodRuleDBTypes, true, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutomodRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, automodRuleDBTypes, true, automodRulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAutomodRulesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(automodRuleColumns) == len(automodRulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AutomodRule{}
	if err = randomize.Struct(seed, o, automodRuleDBTypes, true, automodRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutomodRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, automodRuleDBTypes, true, automodRulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(automodRuleColumns, automodRulePrimaryKeyColumns) {
		fields = automodRuleColumns
	} else {
		fields = strmangle.SetComplement(
			automodRuleColumns,
			automodRulePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AutomodRuleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAutomodRulesUpsert(t *testing.T) {
	t.Parallel()

	if len(automodRuleColumns) == len(automodRulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AutomodRule{}
	if err = randomize.Struct(seed, &o, automodRuleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AutomodRule: %s", err)
	}

	count, err := AutomodRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, automodRuleDBTypes, false, automodRulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutomodRule struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AutomodRule: %s", err)
	}

	count, err = AutomodRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
