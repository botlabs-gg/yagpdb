// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// AutomodRule is an object representing the database table.
type AutomodRule struct {
	ID              int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	GuildID         int64  `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	RulesetID       int64  `boil:"ruleset_id" json:"ruleset_id" toml:"ruleset_id" yaml:"ruleset_id"`
	Name            string `boil:"name" json:"name" toml:"name" yaml:"name"`
	TriggerCounter  int64  `boil:"trigger_counter" json:"trigger_counter" toml:"trigger_counter" yaml:"trigger_counter"`
	TriggerModeOr   bool   `boil:"trigger_mode_or" json:"trigger_mode_or" toml:"trigger_mode_or" yaml:"trigger_mode_or"`
	ConditionModeOr bool   `boil:"condition_mode_or" json:"condition_mode_or" toml:"condition_mode_or" yaml:"condition_mode_or"`

	R *automodRuleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L automodRuleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AutomodRuleColumns = struct {
	ID              string
	GuildID         string
	RulesetID       string
	Name            string
	TriggerCounter  string
	TriggerModeOr   string
	ConditionModeOr string
}{
	ID:              "id",
	GuildID:         "guild_id",
	RulesetID:       "ruleset_id",
	Name:            "name",
	TriggerCounter:  "trigger_counter",
	TriggerModeOr:   "trigger_mode_or",
	ConditionModeOr: "condition_mode_or",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var AutomodRuleWhere = struct {
	ID              whereHelperint64
	GuildID         whereHelperint64
	RulesetID       whereHelperint64
	Name            whereHelperstring
	TriggerCounter  whereHelperint64
	TriggerModeOr   whereHelperbool
	ConditionModeOr whereHelperbool
}{
	ID:              whereHelperint64{field: "\"automod_rules\".\"id\""},
	GuildID:         whereHelperint64{field: "\"automod_rules\".\"guild_id\""},
	RulesetID:       whereHelperint64{field: "\"automod_rules\".\"ruleset_id\""},
	Name:            whereHelperstring{field: "\"automod_rules\".\"name\""},
	TriggerCounter:  whereHelperint64{field: "\"automod_rules\".\"trigger_counter\""},
	TriggerModeOr:   whereHelperbool{field: "\"automod_rules\".\"trigger_mode_or\""},
	ConditionModeOr: whereHelperbool{field: "\"automod_rules\".\"condition_mode_or\""},
}

// AutomodRuleRels is where relationship names are stored.
var AutomodRuleRels = struct {
	Ruleset                   string
	RuleAutomodRuleData       string
	RuleAutomodTriggeredRules string
	RuleAutomodViolations     string
}{
	Ruleset:                   "Ruleset",
	RuleAutomodRuleData:       "RuleAutomodRuleData",
	RuleAutomodTriggeredRules: "RuleAutomodTriggeredRules",
	RuleAutomodViolations:     "RuleAutomodViolations",
}

// automodRuleR is where relationships are stored.
type automodRuleR struct {
	Ruleset                   *AutomodRuleset
	RuleAutomodRuleData       AutomodRuleDatumSlice
	RuleAutomodTriggeredRules AutomodTriggeredRuleSlice
	RuleAutomodViolations     AutomodViolationSlice
}

// NewStruct creates a new relationship struct
func (*automodRuleR) NewStruct() *automodRuleR {
	return &automodRuleR{}
}

// automodRuleL is where Load methods for each relationship are stored.
type automodRuleL struct{}

var (
	automodRuleAllColumns            = []string{"id", "guild_id", "ruleset_id", "name", "trigger_counter", "trigger_mode_or", "condition_mode_or"}
	automodRuleColumnsWithoutDefault = []string{"guild_id", "ruleset_id", "name", "trigger_counter"}
	automodRuleColumnsWithDefault    = []string{"id", "trigger_mode_or", "condition_mode_or"}
	automodRulePrimaryKeyColumns     = []string{"id"}
)

type (
	// AutomodRuleSlice is an alias for a slice of pointers to AutomodRule.
	// This should generally be used opposed to []AutomodRule.
	AutomodRuleSlice []*AutomodRule

	automodRuleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	automodRuleType                 = reflect.TypeOf(&AutomodRule{})
	automodRuleMapping              = queries.MakeStructMapping(automodRuleType)
	automodRulePrimaryKeyMapping, _ = queries.BindMapping(automodRuleType, automodRuleMapping, automodRulePrimaryKeyColumns)
	automodRuleInsertCacheMut       sync.RWMutex
	automodRuleInsertCache          = make(map[string]insertCache)
	automodRuleUpdateCacheMut       sync.RWMutex
	automodRuleUpdateCache          = make(map[string]updateCache)
	automodRuleUpsertCacheMut       sync.RWMutex
	automodRuleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single automodRule record from the query using the global executor.
func (q automodRuleQuery) OneG(ctx context.Context) (*AutomodRule, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single automodRule record from the query.
func (q automodRuleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AutomodRule, error) {
	o := &AutomodRule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for automod_rules")
	}

	return o, nil
}

// AllG returns all AutomodRule records from the query using the global executor.
func (q automodRuleQuery) AllG(ctx context.Context) (AutomodRuleSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AutomodRule records from the query.
func (q automodRuleQuery) All(ctx context.Context, exec boil.ContextExecutor) (AutomodRuleSlice, error) {
	var o []*AutomodRule

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AutomodRule slice")
	}

	return o, nil
}

// CountG returns the count of all AutomodRule records in the query, and panics on error.
func (q automodRuleQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AutomodRule records in the query.
func (q automodRuleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count automod_rules rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q automodRuleQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q automodRuleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if automod_rules exists")
	}

	return count > 0, nil
}

// Ruleset pointed to by the foreign key.
func (o *AutomodRule) Ruleset(mods ...qm.QueryMod) automodRulesetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RulesetID),
	}

	queryMods = append(queryMods, mods...)

	query := AutomodRulesets(queryMods...)
	queries.SetFrom(query.Query, "\"automod_rulesets\"")

	return query
}

// RuleAutomodRuleData retrieves all the automod_rule_datum's AutomodRuleData with an executor via rule_id column.
func (o *AutomodRule) RuleAutomodRuleData(mods ...qm.QueryMod) automodRuleDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"automod_rule_data\".\"rule_id\"=?", o.ID),
	)

	query := AutomodRuleData(queryMods...)
	queries.SetFrom(query.Query, "\"automod_rule_data\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"automod_rule_data\".*"})
	}

	return query
}

// RuleAutomodTriggeredRules retrieves all the automod_triggered_rule's AutomodTriggeredRules with an executor via rule_id column.
func (o *AutomodRule) RuleAutomodTriggeredRules(mods ...qm.QueryMod) automodTriggeredRuleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"automod_triggered_rules\".\"rule_id\"=?", o.ID),
	)

	query := AutomodTriggeredRules(queryMods...)
	queries.SetFrom(query.Query, "\"automod_triggered_rules\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"automod_triggered_rules\".*"})
	}

	return query
}

// RuleAutomodViolations retrieves all the automod_violation's AutomodViolations with an executor via rule_id column.
func (o *AutomodRule) RuleAutomodViolations(mods ...qm.QueryMod) automodViolationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"automod_violations\".\"rule_id\"=?", o.ID),
	)

	query := AutomodViolations(queryMods...)
	queries.SetFrom(query.Query, "\"automod_violations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"automod_violations\".*"})
	}

	return query
}

// LoadRuleset allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (automodRuleL) LoadRuleset(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutomodRule interface{}, mods queries.Applicator) error {
	var slice []*AutomodRule
	var object *AutomodRule

	if singular {
		object = maybeAutomodRule.(*AutomodRule)
	} else {
		slice = *maybeAutomodRule.(*[]*AutomodRule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &automodRuleR{}
		}
		args = append(args, object.RulesetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &automodRuleR{}
			}

			for _, a := range args {
				if a == obj.RulesetID {
					continue Outer
				}
			}

			args = append(args, obj.RulesetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`automod_rulesets`), qm.WhereIn(`automod_rulesets.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AutomodRuleset")
	}

	var resultSlice []*AutomodRuleset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AutomodRuleset")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for automod_rulesets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for automod_rulesets")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Ruleset = foreign
		if foreign.R == nil {
			foreign.R = &automodRulesetR{}
		}
		foreign.R.RulesetAutomodRules = append(foreign.R.RulesetAutomodRules, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RulesetID == foreign.ID {
				local.R.Ruleset = foreign
				if foreign.R == nil {
					foreign.R = &automodRulesetR{}
				}
				foreign.R.RulesetAutomodRules = append(foreign.R.RulesetAutomodRules, local)
				break
			}
		}
	}

	return nil
}

// LoadRuleAutomodRuleData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (automodRuleL) LoadRuleAutomodRuleData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutomodRule interface{}, mods queries.Applicator) error {
	var slice []*AutomodRule
	var object *AutomodRule

	if singular {
		object = maybeAutomodRule.(*AutomodRule)
	} else {
		slice = *maybeAutomodRule.(*[]*AutomodRule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &automodRuleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &automodRuleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`automod_rule_data`), qm.WhereIn(`automod_rule_data.rule_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load automod_rule_data")
	}

	var resultSlice []*AutomodRuleDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice automod_rule_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on automod_rule_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for automod_rule_data")
	}

	if singular {
		object.R.RuleAutomodRuleData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &automodRuleDatumR{}
			}
			foreign.R.Rule = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RuleID {
				local.R.RuleAutomodRuleData = append(local.R.RuleAutomodRuleData, foreign)
				if foreign.R == nil {
					foreign.R = &automodRuleDatumR{}
				}
				foreign.R.Rule = local
				break
			}
		}
	}

	return nil
}

// LoadRuleAutomodTriggeredRules allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (automodRuleL) LoadRuleAutomodTriggeredRules(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutomodRule interface{}, mods queries.Applicator) error {
	var slice []*AutomodRule
	var object *AutomodRule

	if singular {
		object = maybeAutomodRule.(*AutomodRule)
	} else {
		slice = *maybeAutomodRule.(*[]*AutomodRule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &automodRuleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &automodRuleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`automod_triggered_rules`), qm.WhereIn(`automod_triggered_rules.rule_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load automod_triggered_rules")
	}

	var resultSlice []*AutomodTriggeredRule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice automod_triggered_rules")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on automod_triggered_rules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for automod_triggered_rules")
	}

	if singular {
		object.R.RuleAutomodTriggeredRules = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &automodTriggeredRuleR{}
			}
			foreign.R.Rule = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RuleID) {
				local.R.RuleAutomodTriggeredRules = append(local.R.RuleAutomodTriggeredRules, foreign)
				if foreign.R == nil {
					foreign.R = &automodTriggeredRuleR{}
				}
				foreign.R.Rule = local
				break
			}
		}
	}

	return nil
}

// LoadRuleAutomodViolations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (automodRuleL) LoadRuleAutomodViolations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutomodRule interface{}, mods queries.Applicator) error {
	var slice []*AutomodRule
	var object *AutomodRule

	if singular {
		object = maybeAutomodRule.(*AutomodRule)
	} else {
		slice = *maybeAutomodRule.(*[]*AutomodRule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &automodRuleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &automodRuleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`automod_violations`), qm.WhereIn(`automod_violations.rule_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load automod_violations")
	}

	var resultSlice []*AutomodViolation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice automod_violations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on automod_violations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for automod_violations")
	}

	if singular {
		object.R.RuleAutomodViolations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &automodViolationR{}
			}
			foreign.R.Rule = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RuleID) {
				local.R.RuleAutomodViolations = append(local.R.RuleAutomodViolations, foreign)
				if foreign.R == nil {
					foreign.R = &automodViolationR{}
				}
				foreign.R.Rule = local
				break
			}
		}
	}

	return nil
}

// SetRulesetG of the automodRule to the related item.
// Sets o.R.Ruleset to related.
// Adds o to related.R.RulesetAutomodRules.
// Uses the global database handle.
func (o *AutomodRule) SetRulesetG(ctx context.Context, insert bool, related *AutomodRuleset) error {
	return o.SetRuleset(ctx, boil.GetContextDB(), insert, related)
}

// SetRuleset of the automodRule to the related item.
// Sets o.R.Ruleset to related.
// Adds o to related.R.RulesetAutomodRules.
func (o *AutomodRule) SetRuleset(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AutomodRuleset) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"automod_rules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ruleset_id"}),
		strmangle.WhereClause("\"", "\"", 2, automodRulePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RulesetID = related.ID
	if o.R == nil {
		o.R = &automodRuleR{
			Ruleset: related,
		}
	} else {
		o.R.Ruleset = related
	}

	if related.R == nil {
		related.R = &automodRulesetR{
			RulesetAutomodRules: AutomodRuleSlice{o},
		}
	} else {
		related.R.RulesetAutomodRules = append(related.R.RulesetAutomodRules, o)
	}

	return nil
}

// AddRuleAutomodRuleDataG adds the given related objects to the existing relationships
// of the automod_rule, optionally inserting them as new records.
// Appends related to o.R.RuleAutomodRuleData.
// Sets related.R.Rule appropriately.
// Uses the global database handle.
func (o *AutomodRule) AddRuleAutomodRuleDataG(ctx context.Context, insert bool, related ...*AutomodRuleDatum) error {
	return o.AddRuleAutomodRuleData(ctx, boil.GetContextDB(), insert, related...)
}

// AddRuleAutomodRuleData adds the given related objects to the existing relationships
// of the automod_rule, optionally inserting them as new records.
// Appends related to o.R.RuleAutomodRuleData.
// Sets related.R.Rule appropriately.
func (o *AutomodRule) AddRuleAutomodRuleData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AutomodRuleDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RuleID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"automod_rule_data\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"rule_id"}),
				strmangle.WhereClause("\"", "\"", 2, automodRuleDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RuleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &automodRuleR{
			RuleAutomodRuleData: related,
		}
	} else {
		o.R.RuleAutomodRuleData = append(o.R.RuleAutomodRuleData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &automodRuleDatumR{
				Rule: o,
			}
		} else {
			rel.R.Rule = o
		}
	}
	return nil
}

// AddRuleAutomodTriggeredRulesG adds the given related objects to the existing relationships
// of the automod_rule, optionally inserting them as new records.
// Appends related to o.R.RuleAutomodTriggeredRules.
// Sets related.R.Rule appropriately.
// Uses the global database handle.
func (o *AutomodRule) AddRuleAutomodTriggeredRulesG(ctx context.Context, insert bool, related ...*AutomodTriggeredRule) error {
	return o.AddRuleAutomodTriggeredRules(ctx, boil.GetContextDB(), insert, related...)
}

// AddRuleAutomodTriggeredRules adds the given related objects to the existing relationships
// of the automod_rule, optionally inserting them as new records.
// Appends related to o.R.RuleAutomodTriggeredRules.
// Sets related.R.Rule appropriately.
func (o *AutomodRule) AddRuleAutomodTriggeredRules(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AutomodTriggeredRule) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RuleID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"automod_triggered_rules\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"rule_id"}),
				strmangle.WhereClause("\"", "\"", 2, automodTriggeredRulePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RuleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &automodRuleR{
			RuleAutomodTriggeredRules: related,
		}
	} else {
		o.R.RuleAutomodTriggeredRules = append(o.R.RuleAutomodTriggeredRules, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &automodTriggeredRuleR{
				Rule: o,
			}
		} else {
			rel.R.Rule = o
		}
	}
	return nil
}

// SetRuleAutomodTriggeredRulesG removes all previously related items of the
// automod_rule replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Rule's RuleAutomodTriggeredRules accordingly.
// Replaces o.R.RuleAutomodTriggeredRules with related.
// Sets related.R.Rule's RuleAutomodTriggeredRules accordingly.
// Uses the global database handle.
func (o *AutomodRule) SetRuleAutomodTriggeredRulesG(ctx context.Context, insert bool, related ...*AutomodTriggeredRule) error {
	return o.SetRuleAutomodTriggeredRules(ctx, boil.GetContextDB(), insert, related...)
}

// SetRuleAutomodTriggeredRules removes all previously related items of the
// automod_rule replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Rule's RuleAutomodTriggeredRules accordingly.
// Replaces o.R.RuleAutomodTriggeredRules with related.
// Sets related.R.Rule's RuleAutomodTriggeredRules accordingly.
func (o *AutomodRule) SetRuleAutomodTriggeredRules(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AutomodTriggeredRule) error {
	query := "update \"automod_triggered_rules\" set \"rule_id\" = null where \"rule_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RuleAutomodTriggeredRules {
			queries.SetScanner(&rel.RuleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Rule = nil
		}

		o.R.RuleAutomodTriggeredRules = nil
	}
	return o.AddRuleAutomodTriggeredRules(ctx, exec, insert, related...)
}

// RemoveRuleAutomodTriggeredRulesG relationships from objects passed in.
// Removes related items from R.RuleAutomodTriggeredRules (uses pointer comparison, removal does not keep order)
// Sets related.R.Rule.
// Uses the global database handle.
func (o *AutomodRule) RemoveRuleAutomodTriggeredRulesG(ctx context.Context, related ...*AutomodTriggeredRule) error {
	return o.RemoveRuleAutomodTriggeredRules(ctx, boil.GetContextDB(), related...)
}

// RemoveRuleAutomodTriggeredRules relationships from objects passed in.
// Removes related items from R.RuleAutomodTriggeredRules (uses pointer comparison, removal does not keep order)
// Sets related.R.Rule.
func (o *AutomodRule) RemoveRuleAutomodTriggeredRules(ctx context.Context, exec boil.ContextExecutor, related ...*AutomodTriggeredRule) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RuleID, nil)
		if rel.R != nil {
			rel.R.Rule = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("rule_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RuleAutomodTriggeredRules {
			if rel != ri {
				continue
			}

			ln := len(o.R.RuleAutomodTriggeredRules)
			if ln > 1 && i < ln-1 {
				o.R.RuleAutomodTriggeredRules[i] = o.R.RuleAutomodTriggeredRules[ln-1]
			}
			o.R.RuleAutomodTriggeredRules = o.R.RuleAutomodTriggeredRules[:ln-1]
			break
		}
	}

	return nil
}

// AddRuleAutomodViolationsG adds the given related objects to the existing relationships
// of the automod_rule, optionally inserting them as new records.
// Appends related to o.R.RuleAutomodViolations.
// Sets related.R.Rule appropriately.
// Uses the global database handle.
func (o *AutomodRule) AddRuleAutomodViolationsG(ctx context.Context, insert bool, related ...*AutomodViolation) error {
	return o.AddRuleAutomodViolations(ctx, boil.GetContextDB(), insert, related...)
}

// AddRuleAutomodViolations adds the given related objects to the existing relationships
// of the automod_rule, optionally inserting them as new records.
// Appends related to o.R.RuleAutomodViolations.
// Sets related.R.Rule appropriately.
func (o *AutomodRule) AddRuleAutomodViolations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AutomodViolation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RuleID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"automod_violations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"rule_id"}),
				strmangle.WhereClause("\"", "\"", 2, automodViolationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RuleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &automodRuleR{
			RuleAutomodViolations: related,
		}
	} else {
		o.R.RuleAutomodViolations = append(o.R.RuleAutomodViolations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &automodViolationR{
				Rule: o,
			}
		} else {
			rel.R.Rule = o
		}
	}
	return nil
}

// SetRuleAutomodViolationsG removes all previously related items of the
// automod_rule replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Rule's RuleAutomodViolations accordingly.
// Replaces o.R.RuleAutomodViolations with related.
// Sets related.R.Rule's RuleAutomodViolations accordingly.
// Uses the global database handle.
func (o *AutomodRule) SetRuleAutomodViolationsG(ctx context.Context, insert bool, related ...*AutomodViolation) error {
	return o.SetRuleAutomodViolations(ctx, boil.GetContextDB(), insert, related...)
}

// SetRuleAutomodViolations removes all previously related items of the
// automod_rule replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Rule's RuleAutomodViolations accordingly.
// Replaces o.R.RuleAutomodViolations with related.
// Sets related.R.Rule's RuleAutomodViolations accordingly.
func (o *AutomodRule) SetRuleAutomodViolations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AutomodViolation) error {
	query := "update \"automod_violations\" set \"rule_id\" = null where \"rule_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RuleAutomodViolations {
			queries.SetScanner(&rel.RuleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Rule = nil
		}

		o.R.RuleAutomodViolations = nil
	}
	return o.AddRuleAutomodViolations(ctx, exec, insert, related...)
}

// RemoveRuleAutomodViolationsG relationships from objects passed in.
// Removes related items from R.RuleAutomodViolations (uses pointer comparison, removal does not keep order)
// Sets related.R.Rule.
// Uses the global database handle.
func (o *AutomodRule) RemoveRuleAutomodViolationsG(ctx context.Context, related ...*AutomodViolation) error {
	return o.RemoveRuleAutomodViolations(ctx, boil.GetContextDB(), related...)
}

// RemoveRuleAutomodViolations relationships from objects passed in.
// Removes related items from R.RuleAutomodViolations (uses pointer comparison, removal does not keep order)
// Sets related.R.Rule.
func (o *AutomodRule) RemoveRuleAutomodViolations(ctx context.Context, exec boil.ContextExecutor, related ...*AutomodViolation) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RuleID, nil)
		if rel.R != nil {
			rel.R.Rule = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("rule_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RuleAutomodViolations {
			if rel != ri {
				continue
			}

			ln := len(o.R.RuleAutomodViolations)
			if ln > 1 && i < ln-1 {
				o.R.RuleAutomodViolations[i] = o.R.RuleAutomodViolations[ln-1]
			}
			o.R.RuleAutomodViolations = o.R.RuleAutomodViolations[:ln-1]
			break
		}
	}

	return nil
}

// AutomodRules retrieves all the records using an executor.
func AutomodRules(mods ...qm.QueryMod) automodRuleQuery {
	mods = append(mods, qm.From("\"automod_rules\""))
	return automodRuleQuery{NewQuery(mods...)}
}

// FindAutomodRuleG retrieves a single record by ID.
func FindAutomodRuleG(ctx context.Context, iD int64, selectCols ...string) (*AutomodRule, error) {
	return FindAutomodRule(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAutomodRule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAutomodRule(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*AutomodRule, error) {
	automodRuleObj := &AutomodRule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"automod_rules\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, automodRuleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from automod_rules")
	}

	return automodRuleObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AutomodRule) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AutomodRule) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no automod_rules provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(automodRuleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	automodRuleInsertCacheMut.RLock()
	cache, cached := automodRuleInsertCache[key]
	automodRuleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			automodRuleAllColumns,
			automodRuleColumnsWithDefault,
			automodRuleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(automodRuleType, automodRuleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(automodRuleType, automodRuleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"automod_rules\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"automod_rules\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into automod_rules")
	}

	if !cached {
		automodRuleInsertCacheMut.Lock()
		automodRuleInsertCache[key] = cache
		automodRuleInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single AutomodRule record using the global executor.
// See Update for more documentation.
func (o *AutomodRule) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AutomodRule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AutomodRule) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	automodRuleUpdateCacheMut.RLock()
	cache, cached := automodRuleUpdateCache[key]
	automodRuleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			automodRuleAllColumns,
			automodRulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update automod_rules, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"automod_rules\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, automodRulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(automodRuleType, automodRuleMapping, append(wl, automodRulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update automod_rules row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for automod_rules")
	}

	if !cached {
		automodRuleUpdateCacheMut.Lock()
		automodRuleUpdateCache[key] = cache
		automodRuleUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q automodRuleQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q automodRuleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for automod_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for automod_rules")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AutomodRuleSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AutomodRuleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), automodRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"automod_rules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, automodRulePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in automodRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all automodRule")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AutomodRule) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AutomodRule) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no automod_rules provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(automodRuleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	automodRuleUpsertCacheMut.RLock()
	cache, cached := automodRuleUpsertCache[key]
	automodRuleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			automodRuleAllColumns,
			automodRuleColumnsWithDefault,
			automodRuleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			automodRuleAllColumns,
			automodRulePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert automod_rules, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(automodRulePrimaryKeyColumns))
			copy(conflict, automodRulePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"automod_rules\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(automodRuleType, automodRuleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(automodRuleType, automodRuleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert automod_rules")
	}

	if !cached {
		automodRuleUpsertCacheMut.Lock()
		automodRuleUpsertCache[key] = cache
		automodRuleUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single AutomodRule record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AutomodRule) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AutomodRule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AutomodRule) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AutomodRule provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), automodRulePrimaryKeyMapping)
	sql := "DELETE FROM \"automod_rules\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from automod_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for automod_rules")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q automodRuleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no automodRuleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from automod_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for automod_rules")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AutomodRuleSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AutomodRuleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), automodRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"automod_rules\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, automodRulePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from automodRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for automod_rules")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AutomodRule) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no AutomodRule provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AutomodRule) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAutomodRule(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AutomodRuleSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AutomodRuleSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AutomodRuleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AutomodRuleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), automodRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"automod_rules\".* FROM \"automod_rules\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, automodRulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AutomodRuleSlice")
	}

	*o = slice

	return nil
}

// AutomodRuleExistsG checks if the AutomodRule row exists.
func AutomodRuleExistsG(ctx context.Context, iD int64) (bool, error) {
	return AutomodRuleExists(ctx, boil.GetContextDB(), iD)
}

// AutomodRuleExists checks if the AutomodRule row exists.
func AutomodRuleExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"automod_rules\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if automod_rules exists")
	}

	return exists, nil
}
