// Code generated by "esc -o assets_gen.go -pkg automod -ignore .go assets/"; DO NOT EDIT.

package automod

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/automod.html": {
		local:   "assets/automod.html",
		size:    12753,
		modtime: 1518879672,
		compressed: `
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
`,
	},

	"/assets/help-page.md": {
		local:   "assets/help-page.md",
		size:    1625,
		modtime: 1518359152,
		compressed: `
H4sIAAAAAAAC/3RVwY4bNwy9+yt4S7p1nSyQU4AeUiCHoM2lSXteesTxCJbIiUjZ678vKM14bTTr4/Dx
iXzvSf5UTbIEwJTkrHCRCiagZFBnUMkE6Ag0CpAlUEGLwiDs0AJK5URlCykeCfbIHPkAZ9prNNLt9cso
NUFCPlQ8ECAHUAHh3WbzfSIIcRypEBuUmqgPMSCvU6CBTQRZMrF93GzgN3h4+Jbk7PM8PHyEf5SKAhbq
W1DoK3CAjM/w9PwEmVTxQAqR4enyBEqDcNBO9RVVwbmjsNN9XcE2ocEgbBgZshTyL9wIK8cfldYuhbd0
onIR7stNVG5qQfiN81S2X5bhm2oQ+eQyvX7mAvB1xCZa5VZ4e1NxbRQzLcVbHZbj/op8bKf8TWolDtbE
cV9kdCgkB3TsH8hX/+5bZhriGIdr9QYvJbwG9tJms/mU0mLuhCcCbN7KCIPk7HGam1SruZ8Z96lZ+2UE
m6JCVBgmGo4Utm1h5/KP1JBh2/U5RyWI9kYhRG2FzvdvlITdDHqeows0GhU/4PvC7qSY3SMfK0euRrCn
0V1HqC1hpxeatkXnCluI44KBCRUe1/ZEo60c0Ra4toTYRAz7QnjUl33wgJG3veZjnf43tsVMcI4pwZ6g
kIvYEhC1N+/gWw/EdRgTOCyIjHxZRlM4R5ukGvi3m3NGKd6fva+fuduA/36Fxw8f3l/bf4dHCHhZa37P
HuFMdHTB/U5Vo3d/xuH4zgNyVdt+qvbN+S3+nuBCP6qL2yZCyM53dL49chN8pVo0eN9li9blYWpXYZ7T
pSPnylEnv5M7+HxyZI++T/JS66/IGp4etXx3NZtnV8u0n6Z2tSTLicJqcbfhHnLGwhR2i05fDuzpKNLj
3tLYshCEFFhs3UFgJpkTNeP6St50TzNMyExJ76lcp1YP/vy154ISDf6irw3tHfakF4I5IWv33/wNxeUf
Yukdq9VCsK/W0+jRgxOm6pJ5JqWWgXab/wIAAP//kcU6UVkGAAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
