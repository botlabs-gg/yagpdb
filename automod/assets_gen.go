// Code generated by "esc -o assets_gen.go -pkg automod -ignore .go assets/"; DO NOT EDIT.

package automod

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/automod.html": {
		local:   "assets/automod.html",
		size:    12708,
		modtime: 1515404254,
		compressed: `
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
`,
	},

	"/assets/help-page.md": {
		local:   "assets/help-page.md",
		size:    1625,
		modtime: 1517868033,
		compressed: `
H4sIAAAAAAAC/3RVwY4bNwy9+yt4S7p1nSyQU4AeUiCHoM2lSXteesTxCJbIiUjZ678vKM14bTTr4/Dx
iXzvSf5UTbIEwJTkrHCRCiagZFBnUMkE6Ag0CpAlUEGLwiDs0AJK5URlCykeCfbIHPkAZ9prNNLt9cso
NUFCPlQ8ECAHUAHh3WbzfSIIcRypEBuUmqgPMSCvU6CBTQRZMrF93GzgN3h4+Jbk7PM8PHyEf5SKAhbq
W1DoK3CAjM/w9PwEmVTxQAqR4enyBEqDcNBO9RVVwbmjsNN9XcE2ocEgbBgZshTyL9wIK8cfldYuhbd0
onIR7stNVG5qQfiN81S2X5bhm2oQ+eQyvX7mAvB1xCZa5VZ4e1NxbRQzLcVbHZbj/op8bKf8TWolDtbE
cV9kdCgkB3TsH8hX/+5bZhriGIdr9QYvJbwG9tJms/mU0mLuhCcCbN7KCIPk7HGam1SruZ8Z96lZ+2UE
m6JCVBgmGo4Utm1h5/KP1JBh2/U5RyWI9kYhRG2FzvdvlITdDHqeows0GhU/4PvC7qSY3SMfK0euRrCn
0V1HqC1hpxeatkXnCluI44KBCRUe1/ZEo60c0Ra4toTYRAz7QnjUl33wgJG3veZjnf43tsVMcI4pwZ6g
kIvYEhC1N+/gWw/EdRgTOCyIjHxZRlM4R5ukGvi3m3NGKd6fva+fuduA/36Fxw8f3l/bf4dHCHhZa37P
HuFMdHTB/U5Vo3d/xuH4zgNyVdt+qvbN+S3+nuBCP6qL2yZCyM53dL49chN8pVo0eN9li9blYWpXYZ7T
pSPnylEnv5M7+HxyZI++T/JS66/IGp4etXx3NZtnV8u0n6Z2tSTLicJqcbfhHnLGwhR2i05fDuzpKNLj
3tLYshCEFFhs3UFgJpkTNeP6St50TzNMyExJ76lcp1YP/vy154ISDf6irw3tHfakF4I5IWv33/wNxeUf
Yukdq9VCsK/W0+jRgxOm6pJ5JqWWgXab/wIAAP//kcU6UVkGAAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
