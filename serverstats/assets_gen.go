// Code generated by "esc -o assets_gen.go -pkg serverstats -ignore .go assets/"; DO NOT EDIT.

package serverstats

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/schema.sql": {
		local:   "assets/schema.sql",
		size:    376,
		modtime: 1521566047,
		compressed: `
H4sIAAAAAAAC/3yPwUrDQBCGzztPMccW8gY9RV0hGKOkEdrTsrpDHUh3y86siE8vNalFqL1+fPwz321v
68HiUN+0Fpt77J4GtJtmPaxRKH9QdqJexR0ocwqCCzAc8JV3Qpn9+ON3L22Lz33zWPdbfLDbCgwYUZ+V
AqLynkT9/qBfFZhQsldO8TjBUSsAsys8BscB8ReaIpQndGZv7z5GGt10f2apRMWzBssVwNzUdHd2c7Hp
T5I73f/EFC9GL07GcnV1eyp2/+/MxvHH7wAAAP//TnSGKXgBAAA=
`,
	},

	"/assets/serverstats.html": {
		local:   "assets/serverstats.html",
		size:    7161,
		modtime: 1521566047,
		compressed: `
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
Bvp/AQAA//++/pIA+RsAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
