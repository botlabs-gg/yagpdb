// Code generated by "esc -o assets_gen.go -pkg youtube -ignore .go assets/"; DO NOT EDIT.

package youtube

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/help-page.md": {
		local:   "assets/help-page.md",
		size:    547,
		modtime: 1521566048,
		compressed: `
H4sIAAAAAAAC/2yRvY7TQBSF+3mKs0oDCJyCn2I7lAW0aIXAIkUUUUw81/ZVxvda8+Pgt1/FcYpEbo/m
fufTmdVqhd8aU4Ro4porm1glgmtYCJ0wsCNFHbRDagkNDySoWitCHhyRe6/WkSuM+atoKN2BpkuLUXPK
B7pevkfkrvcjWPqcQJxaClPB8xM0YFu+gGUKavVeTywNaibv4qMx77CbcZtZ5PnJPOzvOsDu35s2pf5x
veaCuyaHotJu3dpSfn5yRS/N2yXWtnxZgOXgF2mbj99+/ZEfM22nGZW9DNTQ5H8FpNamKbjdxwZCrzGR
Q1IMbKc3Lmjv9CQfOpJszMP+Giw6fP9Sbuznr3cO1kdFR3LuAQ0URhXCYUTluTqeB73oUXU86H9kcfMX
3JQX5jUAAP//vwYksiMCAAA=
`,
	},

	"/assets/youtube.html": {
		local:   "assets/youtube.html",
		size:    5468,
		modtime: 1521566048,
		compressed: `
H4sIAAAAAAAC/8xYUW/bthN/96e4P/8FZgORtLbAHlrbQJB0QzBs6doF254GSjxb7ChSJSknhqDvPpCi
bMeWZadrt+bBVcW74+9+d7w7sa4ZLrhEIFn551pVtkqRNM1oVNcWi1JQ2y7lSBmBuGlGU8ZXkAlqzIxo
dU/mIwCA3beZEpFYRs9fhDW/nj/vlku6xMjZQ03mf7RbQlUKRRksEJmZJvnzHc1y/h4lM0ChQGPoEoFL
YNxkSjO4z1ECBVOlJtM8RQZZTqVEESw6NYn3sOIM1TQpA9qE8VV4/F8UQRJvMEMUzUdhfY8DKlBbE1ho
1bS6bxU+jZSd9ZI60P43YriglbA7kr3SnkQul3ty7u+SMef2Y/2t08dNpoqte+x5d6fl/NccHdcaGeMW
FhwFA27gQ2Us2BxB0gJBLfzzVm4sFSQ6cXFbaCWtk+B2cgH4QItSoHkFZEkLNOQCSFEJyzNVWtTEc3uA
ZaF00aF2z9EKteUZFQQKtLliM1IqYwnQzHIlZyQpqKRLTOo6vswsX+EPFRcsvrlumqTL+cN9QvJN0/lb
rVz+AHKbo95k2M013L6DyqB2bsfTJJ3DrRRrULIjobgAqSykyubxNNX9m/zmcnitKlgqsMpz123hzsoF
8JZQyphGYyClGnJqYKF0xyBMM8VwHpyJM1UkDleSv8xfvtWKVZ4JM028mLMmvckOvAvivuwxuNwF7xvT
s2VAndxd2ejNu/T36MX68rvs8uOC/Xgr7u5/Odie++xpDZ1QOgrne6WByjV8rNB44PBBcRkysCyVtmBQ
r1ADTdUKNzXgINQ7Z8Fn1VKrqjySF15B0BSFi8KMrG0UnI8421a1q02mTBMvPWBtZ3suy8qe3N9rmZLK
HrWIMqYk6Y3ONHFKJ+x6W2DXJc6IxQdLHlGTKWm1EgQ42/fdl4AZCQwEAm6uh3g8rEvnLH2mcLkTsA3Y
XTgPX0G4/Pn9grHyjvdG685T8jXFK2Am8+vQ9gPS02EyKDCz3vfOSD87LRHB/lUnyqilkcaPFddYoi5M
ZFCy4Xi4qeHBBhO3ZVuTHjWesGaaZoDkFvk/4jnLMfsrVQ8nWX5Cgm1sBsZ+Quk8fLNCvVYSyRzCG8Dw
asDHgc2HXEwra5UMgEyVFnyb86mVkFq5naEuGZsmrUbPLJG4LJgPzUn7//1iM9tVpTVK2zPLms82x9X1
s6VLQXg1g4NZqE+6Q3CgMJDDda2pXCLE76u0b30X7T0KAe4nMsWxGexg3uNScImnp73W1+2Q5wZAP/RV
JaMWh47F0Zqac8ZQQl/xcN1vRUWFMxI2Iuc1kLPqYTuO9hWvyFhqeUbcqFrX8eNi/jMtsGncbHp08jlx
3L4U2gOojrF/H+TnaDP/Vas52m625zbeIXcY/2DHeSL9Z3Sec7vPkzsQ1DVfQLz3umnAKyKDukbJmuYJ
nepktzqHnnO6lqmyDI0hvr58QkF7T90XzrFu97QG6mq4fjIShgIdkmv/7zCWvu47wGSI21OadXtL0/bp
7i7hzMuf/Rse15NLOx89Gy8q6fkYT2pvZUU1cHbjU3QGz8bk/48/iSavN2Ju6D4i6OfxyeuRl93IxUqO
2y8FcgGbjalehr3DB/l4q7CiYjyJBcqlzWEO306gfsRYQBpTa/WYMG5oKpCRC7C6wgDV/TUoDJ6puqDC
PNL1T81k1HrT6Z3pSyd+ypOtz5/gy4DyUW+ayWiadHmwdzm4UMrfWMVNMwqJ+ncAAAD//4fcqF5cFQAA
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
