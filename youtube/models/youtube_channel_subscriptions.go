// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// YoutubeChannelSubscription is an object representing the database table.
type YoutubeChannelSubscription struct {
	ID                 int              `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt          time.Time        `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time        `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	GuildID            string           `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	ChannelID          string           `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	YoutubeChannelID   string           `boil:"youtube_channel_id" json:"youtube_channel_id" toml:"youtube_channel_id" yaml:"youtube_channel_id"`
	YoutubeChannelName string           `boil:"youtube_channel_name" json:"youtube_channel_name" toml:"youtube_channel_name" yaml:"youtube_channel_name"`
	MentionEveryone    bool             `boil:"mention_everyone" json:"mention_everyone" toml:"mention_everyone" yaml:"mention_everyone"`
	MentionRoles       types.Int64Array `boil:"mention_roles" json:"mention_roles,omitempty" toml:"mention_roles" yaml:"mention_roles,omitempty"`
	PublishLivestream  bool             `boil:"publish_livestream" json:"publish_livestream" toml:"publish_livestream" yaml:"publish_livestream"`
	PublishShorts      bool             `boil:"publish_shorts" json:"publish_shorts" toml:"publish_shorts" yaml:"publish_shorts"`
	Enabled            bool             `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`

	R *youtubeChannelSubscriptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L youtubeChannelSubscriptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var YoutubeChannelSubscriptionColumns = struct {
	ID                 string
	CreatedAt          string
	UpdatedAt          string
	GuildID            string
	ChannelID          string
	YoutubeChannelID   string
	YoutubeChannelName string
	MentionEveryone    string
	MentionRoles       string
	PublishLivestream  string
	PublishShorts      string
	Enabled            string
}{
	ID:                 "id",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	GuildID:            "guild_id",
	ChannelID:          "channel_id",
	YoutubeChannelID:   "youtube_channel_id",
	YoutubeChannelName: "youtube_channel_name",
	MentionEveryone:    "mention_everyone",
	MentionRoles:       "mention_roles",
	PublishLivestream:  "publish_livestream",
	PublishShorts:      "publish_shorts",
	Enabled:            "enabled",
}

var YoutubeChannelSubscriptionTableColumns = struct {
	ID                 string
	CreatedAt          string
	UpdatedAt          string
	GuildID            string
	ChannelID          string
	YoutubeChannelID   string
	YoutubeChannelName string
	MentionEveryone    string
	MentionRoles       string
	PublishLivestream  string
	PublishShorts      string
	Enabled            string
}{
	ID:                 "youtube_channel_subscriptions.id",
	CreatedAt:          "youtube_channel_subscriptions.created_at",
	UpdatedAt:          "youtube_channel_subscriptions.updated_at",
	GuildID:            "youtube_channel_subscriptions.guild_id",
	ChannelID:          "youtube_channel_subscriptions.channel_id",
	YoutubeChannelID:   "youtube_channel_subscriptions.youtube_channel_id",
	YoutubeChannelName: "youtube_channel_subscriptions.youtube_channel_name",
	MentionEveryone:    "youtube_channel_subscriptions.mention_everyone",
	MentionRoles:       "youtube_channel_subscriptions.mention_roles",
	PublishLivestream:  "youtube_channel_subscriptions.publish_livestream",
	PublishShorts:      "youtube_channel_subscriptions.publish_shorts",
	Enabled:            "youtube_channel_subscriptions.enabled",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_Int64Array struct{ field string }

func (w whereHelpertypes_Int64Array) EQ(x types.Int64Array) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_Int64Array) NEQ(x types.Int64Array) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_Int64Array) LT(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Int64Array) LTE(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Int64Array) GT(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Int64Array) GTE(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_Int64Array) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_Int64Array) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var YoutubeChannelSubscriptionWhere = struct {
	ID                 whereHelperint
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	GuildID            whereHelperstring
	ChannelID          whereHelperstring
	YoutubeChannelID   whereHelperstring
	YoutubeChannelName whereHelperstring
	MentionEveryone    whereHelperbool
	MentionRoles       whereHelpertypes_Int64Array
	PublishLivestream  whereHelperbool
	PublishShorts      whereHelperbool
	Enabled            whereHelperbool
}{
	ID:                 whereHelperint{field: "\"youtube_channel_subscriptions\".\"id\""},
	CreatedAt:          whereHelpertime_Time{field: "\"youtube_channel_subscriptions\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"youtube_channel_subscriptions\".\"updated_at\""},
	GuildID:            whereHelperstring{field: "\"youtube_channel_subscriptions\".\"guild_id\""},
	ChannelID:          whereHelperstring{field: "\"youtube_channel_subscriptions\".\"channel_id\""},
	YoutubeChannelID:   whereHelperstring{field: "\"youtube_channel_subscriptions\".\"youtube_channel_id\""},
	YoutubeChannelName: whereHelperstring{field: "\"youtube_channel_subscriptions\".\"youtube_channel_name\""},
	MentionEveryone:    whereHelperbool{field: "\"youtube_channel_subscriptions\".\"mention_everyone\""},
	MentionRoles:       whereHelpertypes_Int64Array{field: "\"youtube_channel_subscriptions\".\"mention_roles\""},
	PublishLivestream:  whereHelperbool{field: "\"youtube_channel_subscriptions\".\"publish_livestream\""},
	PublishShorts:      whereHelperbool{field: "\"youtube_channel_subscriptions\".\"publish_shorts\""},
	Enabled:            whereHelperbool{field: "\"youtube_channel_subscriptions\".\"enabled\""},
}

// YoutubeChannelSubscriptionRels is where relationship names are stored.
var YoutubeChannelSubscriptionRels = struct {
}{}

// youtubeChannelSubscriptionR is where relationships are stored.
type youtubeChannelSubscriptionR struct {
}

// NewStruct creates a new relationship struct
func (*youtubeChannelSubscriptionR) NewStruct() *youtubeChannelSubscriptionR {
	return &youtubeChannelSubscriptionR{}
}

// youtubeChannelSubscriptionL is where Load methods for each relationship are stored.
type youtubeChannelSubscriptionL struct{}

var (
	youtubeChannelSubscriptionAllColumns            = []string{"id", "created_at", "updated_at", "guild_id", "channel_id", "youtube_channel_id", "youtube_channel_name", "mention_everyone", "mention_roles", "publish_livestream", "publish_shorts", "enabled"}
	youtubeChannelSubscriptionColumnsWithoutDefault = []string{"created_at", "updated_at", "guild_id", "channel_id", "youtube_channel_id", "youtube_channel_name", "mention_everyone"}
	youtubeChannelSubscriptionColumnsWithDefault    = []string{"id", "mention_roles", "publish_livestream", "publish_shorts", "enabled"}
	youtubeChannelSubscriptionPrimaryKeyColumns     = []string{"id"}
	youtubeChannelSubscriptionGeneratedColumns      = []string{}
)

type (
	// YoutubeChannelSubscriptionSlice is an alias for a slice of pointers to YoutubeChannelSubscription.
	// This should almost always be used instead of []YoutubeChannelSubscription.
	YoutubeChannelSubscriptionSlice []*YoutubeChannelSubscription

	youtubeChannelSubscriptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	youtubeChannelSubscriptionType                 = reflect.TypeOf(&YoutubeChannelSubscription{})
	youtubeChannelSubscriptionMapping              = queries.MakeStructMapping(youtubeChannelSubscriptionType)
	youtubeChannelSubscriptionPrimaryKeyMapping, _ = queries.BindMapping(youtubeChannelSubscriptionType, youtubeChannelSubscriptionMapping, youtubeChannelSubscriptionPrimaryKeyColumns)
	youtubeChannelSubscriptionInsertCacheMut       sync.RWMutex
	youtubeChannelSubscriptionInsertCache          = make(map[string]insertCache)
	youtubeChannelSubscriptionUpdateCacheMut       sync.RWMutex
	youtubeChannelSubscriptionUpdateCache          = make(map[string]updateCache)
	youtubeChannelSubscriptionUpsertCacheMut       sync.RWMutex
	youtubeChannelSubscriptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single youtubeChannelSubscription record from the query using the global executor.
func (q youtubeChannelSubscriptionQuery) OneG(ctx context.Context) (*YoutubeChannelSubscription, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single youtubeChannelSubscription record from the query.
func (q youtubeChannelSubscriptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*YoutubeChannelSubscription, error) {
	o := &YoutubeChannelSubscription{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for youtube_channel_subscriptions")
	}

	return o, nil
}

// AllG returns all YoutubeChannelSubscription records from the query using the global executor.
func (q youtubeChannelSubscriptionQuery) AllG(ctx context.Context) (YoutubeChannelSubscriptionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all YoutubeChannelSubscription records from the query.
func (q youtubeChannelSubscriptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (YoutubeChannelSubscriptionSlice, error) {
	var o []*YoutubeChannelSubscription

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to YoutubeChannelSubscription slice")
	}

	return o, nil
}

// CountG returns the count of all YoutubeChannelSubscription records in the query using the global executor
func (q youtubeChannelSubscriptionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all YoutubeChannelSubscription records in the query.
func (q youtubeChannelSubscriptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count youtube_channel_subscriptions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q youtubeChannelSubscriptionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q youtubeChannelSubscriptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if youtube_channel_subscriptions exists")
	}

	return count > 0, nil
}

// YoutubeChannelSubscriptions retrieves all the records using an executor.
func YoutubeChannelSubscriptions(mods ...qm.QueryMod) youtubeChannelSubscriptionQuery {
	mods = append(mods, qm.From("\"youtube_channel_subscriptions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"youtube_channel_subscriptions\".*"})
	}

	return youtubeChannelSubscriptionQuery{q}
}

// FindYoutubeChannelSubscriptionG retrieves a single record by ID.
func FindYoutubeChannelSubscriptionG(ctx context.Context, iD int, selectCols ...string) (*YoutubeChannelSubscription, error) {
	return FindYoutubeChannelSubscription(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindYoutubeChannelSubscription retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindYoutubeChannelSubscription(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*YoutubeChannelSubscription, error) {
	youtubeChannelSubscriptionObj := &YoutubeChannelSubscription{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"youtube_channel_subscriptions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, youtubeChannelSubscriptionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from youtube_channel_subscriptions")
	}

	return youtubeChannelSubscriptionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *YoutubeChannelSubscription) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *YoutubeChannelSubscription) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no youtube_channel_subscriptions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(youtubeChannelSubscriptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	youtubeChannelSubscriptionInsertCacheMut.RLock()
	cache, cached := youtubeChannelSubscriptionInsertCache[key]
	youtubeChannelSubscriptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			youtubeChannelSubscriptionAllColumns,
			youtubeChannelSubscriptionColumnsWithDefault,
			youtubeChannelSubscriptionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(youtubeChannelSubscriptionType, youtubeChannelSubscriptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(youtubeChannelSubscriptionType, youtubeChannelSubscriptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"youtube_channel_subscriptions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"youtube_channel_subscriptions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into youtube_channel_subscriptions")
	}

	if !cached {
		youtubeChannelSubscriptionInsertCacheMut.Lock()
		youtubeChannelSubscriptionInsertCache[key] = cache
		youtubeChannelSubscriptionInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single YoutubeChannelSubscription record using the global executor.
// See Update for more documentation.
func (o *YoutubeChannelSubscription) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the YoutubeChannelSubscription.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *YoutubeChannelSubscription) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	youtubeChannelSubscriptionUpdateCacheMut.RLock()
	cache, cached := youtubeChannelSubscriptionUpdateCache[key]
	youtubeChannelSubscriptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			youtubeChannelSubscriptionAllColumns,
			youtubeChannelSubscriptionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update youtube_channel_subscriptions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"youtube_channel_subscriptions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, youtubeChannelSubscriptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(youtubeChannelSubscriptionType, youtubeChannelSubscriptionMapping, append(wl, youtubeChannelSubscriptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update youtube_channel_subscriptions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for youtube_channel_subscriptions")
	}

	if !cached {
		youtubeChannelSubscriptionUpdateCacheMut.Lock()
		youtubeChannelSubscriptionUpdateCache[key] = cache
		youtubeChannelSubscriptionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q youtubeChannelSubscriptionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q youtubeChannelSubscriptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for youtube_channel_subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for youtube_channel_subscriptions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o YoutubeChannelSubscriptionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o YoutubeChannelSubscriptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), youtubeChannelSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"youtube_channel_subscriptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, youtubeChannelSubscriptionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in youtubeChannelSubscription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all youtubeChannelSubscription")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *YoutubeChannelSubscription) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *YoutubeChannelSubscription) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no youtube_channel_subscriptions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(youtubeChannelSubscriptionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	youtubeChannelSubscriptionUpsertCacheMut.RLock()
	cache, cached := youtubeChannelSubscriptionUpsertCache[key]
	youtubeChannelSubscriptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			youtubeChannelSubscriptionAllColumns,
			youtubeChannelSubscriptionColumnsWithDefault,
			youtubeChannelSubscriptionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			youtubeChannelSubscriptionAllColumns,
			youtubeChannelSubscriptionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert youtube_channel_subscriptions, could not build update column list")
		}

		ret := strmangle.SetComplement(youtubeChannelSubscriptionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(youtubeChannelSubscriptionPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert youtube_channel_subscriptions, could not build conflict column list")
			}

			conflict = make([]string, len(youtubeChannelSubscriptionPrimaryKeyColumns))
			copy(conflict, youtubeChannelSubscriptionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"youtube_channel_subscriptions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(youtubeChannelSubscriptionType, youtubeChannelSubscriptionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(youtubeChannelSubscriptionType, youtubeChannelSubscriptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert youtube_channel_subscriptions")
	}

	if !cached {
		youtubeChannelSubscriptionUpsertCacheMut.Lock()
		youtubeChannelSubscriptionUpsertCache[key] = cache
		youtubeChannelSubscriptionUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single YoutubeChannelSubscription record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *YoutubeChannelSubscription) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single YoutubeChannelSubscription record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *YoutubeChannelSubscription) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no YoutubeChannelSubscription provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), youtubeChannelSubscriptionPrimaryKeyMapping)
	sql := "DELETE FROM \"youtube_channel_subscriptions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from youtube_channel_subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for youtube_channel_subscriptions")
	}

	return rowsAff, nil
}

func (q youtubeChannelSubscriptionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q youtubeChannelSubscriptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no youtubeChannelSubscriptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from youtube_channel_subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for youtube_channel_subscriptions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o YoutubeChannelSubscriptionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o YoutubeChannelSubscriptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), youtubeChannelSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"youtube_channel_subscriptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, youtubeChannelSubscriptionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from youtubeChannelSubscription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for youtube_channel_subscriptions")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *YoutubeChannelSubscription) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no YoutubeChannelSubscription provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *YoutubeChannelSubscription) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindYoutubeChannelSubscription(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *YoutubeChannelSubscriptionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty YoutubeChannelSubscriptionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *YoutubeChannelSubscriptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := YoutubeChannelSubscriptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), youtubeChannelSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"youtube_channel_subscriptions\".* FROM \"youtube_channel_subscriptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, youtubeChannelSubscriptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in YoutubeChannelSubscriptionSlice")
	}

	*o = slice

	return nil
}

// YoutubeChannelSubscriptionExistsG checks if the YoutubeChannelSubscription row exists.
func YoutubeChannelSubscriptionExistsG(ctx context.Context, iD int) (bool, error) {
	return YoutubeChannelSubscriptionExists(ctx, boil.GetContextDB(), iD)
}

// YoutubeChannelSubscriptionExists checks if the YoutubeChannelSubscription row exists.
func YoutubeChannelSubscriptionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"youtube_channel_subscriptions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if youtube_channel_subscriptions exists")
	}

	return exists, nil
}

// Exists checks if the YoutubeChannelSubscription row exists.
func (o *YoutubeChannelSubscription) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return YoutubeChannelSubscriptionExists(ctx, exec, o.ID)
}
