// Code generated by "esc -o assets_gen.go -pkg moderation -ignore .go assets/"; DO NOT EDIT.

package moderation

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/help-page.md": {
		local:   "assets/help-page.md",
		size:    996,
		modtime: 1521566047,
		compressed: `
H4sIAAAAAAAC/3RTTW/TQBC991e8I6gpLdeeqJDggLggJIQQUifesb3qesfamU3if49m7USkgks+7J33
NW+/j4xJAheyKBk9k9XCioWGOewxFznEwAoq/Hhzgzt8lZBkgI1kSDIoKCXYNQp1/qXt8V4MRi+suAGA
W9gYFRMt2DMKT3LggJjb2b46uf/r6SAF0oNqiI0IUyxFSszDbR+Tsf9yPZ85Oy0HTKxKA6+qXEVeXNSm
ZmP/JAV8omlO/IjYY5GKqtzon+/2lPFBZWLJjD3HPECtzjE8o5Npohz8YL4YO8aUQEkFayaMRGp4//Bw
VqNnb91IOfMa1RnrSAo+cVeNww584IyYu1SDEwdO/JctdbNfYvcCn3ShG4o2Z7jFU7JR6jDunEO5Zdy0
/S/oHaQgi7UBDP8Osi8yXRmICjX3XZX7mtK71opqfNGhGodt+1M1RpHE6KWAYDzNUqgsCHUty3nqp1SM
dGCYQNlQ51cAi9SinHqn+5iY8r1/lvP8t+ZQ1wWcLqntcGkL9otrLr52nbmLfeTgaD+o5JgHvTaAcw+O
22scx9iNfhNghboXDo64VWHNkKrJdg+kOJmudXfzpSZWHKMvyVo555qjjhNn0xbir6cMPhlnjYdXWCt8
kG7F2t41LUm6trWRC/9+c+9n7q9m3/4JAAD//xYSEVLkAwAA
`,
	},

	"/assets/moderation.html": {
		local:   "assets/moderation.html",
		size:    13841,
		modtime: 1525833877,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
