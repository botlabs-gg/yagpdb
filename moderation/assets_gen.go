// Code generated by "esc -o assets_gen.go -pkg moderation -ignore .go assets/"; DO NOT EDIT.

package moderation

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/help-page.md": {
		local:   "assets/help-page.md",
		size:    996,
		modtime: 1515404254,
		compressed: `
H4sIAAAAAAAC/3RTTW/TQBC991e8I6gpLdeeqJDggLggJIQQUifesb3qesfamU3if49m7USkgks+7J33
NW+/j4xJAheyKBk9k9XCioWGOewxFznEwAoq/Hhzgzt8lZBkgI1kSDIoKCXYNQp1/qXt8V4MRi+suAGA
W9gYFRMt2DMKT3LggJjb2b46uf/r6SAF0oNqiI0IUyxFSszDbR+Tsf9yPZ85Oy0HTKxKA6+qXEVeXNSm
ZmP/JAV8omlO/IjYY5GKqtzon+/2lPFBZWLJjD3HPECtzjE8o5Npohz8YL4YO8aUQEkFayaMRGp4//Bw
VqNnb91IOfMa1RnrSAo+cVeNww584IyYu1SDEwdO/JctdbNfYvcCn3ShG4o2Z7jFU7JR6jDunEO5Zdy0
/S/oHaQgi7UBDP8Osi8yXRmICjX3XZX7mtK71opqfNGhGodt+1M1RpHE6KWAYDzNUqgsCHUty3nqp1SM
dGCYQNlQ51cAi9SinHqn+5iY8r1/lvP8t+ZQ1wWcLqntcGkL9otrLr52nbmLfeTgaD+o5JgHvTaAcw+O
22scx9iNfhNghboXDo64VWHNkKrJdg+kOJmudXfzpSZWHKMvyVo555qjjhNn0xbir6cMPhlnjYdXWCt8
kG7F2t41LUm6trWRC/9+c+9n7q9m3/4JAAD//xYSEVLkAwAA
`,
	},

	"/assets/moderation.html": {
		local:   "assets/moderation.html",
		size:    11919,
		modtime: 1518879672,
		compressed: `
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
vwEAAP//vJusDo8uAAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
