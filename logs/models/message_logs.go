// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"emperror.dev/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// MessageLog is an object representing the database table.
type MessageLog struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt   null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	ChannelName null.String `boil:"channel_name" json:"channel_name,omitempty" toml:"channel_name" yaml:"channel_name,omitempty"`
	ChannelID   null.String `boil:"channel_id" json:"channel_id,omitempty" toml:"channel_id" yaml:"channel_id,omitempty"`
	GuildID     null.String `boil:"guild_id" json:"guild_id,omitempty" toml:"guild_id" yaml:"guild_id,omitempty"`
	Author      null.String `boil:"author" json:"author,omitempty" toml:"author" yaml:"author,omitempty"`
	AuthorID    null.String `boil:"author_id" json:"author_id,omitempty" toml:"author_id" yaml:"author_id,omitempty"`

	R *messageLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L messageLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MessageLogColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
	ChannelName string
	ChannelID   string
	GuildID     string
	Author      string
	AuthorID    string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
	ChannelName: "channel_name",
	ChannelID:   "channel_id",
	GuildID:     "guild_id",
	Author:      "author",
	AuthorID:    "author_id",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var MessageLogWhere = struct {
	ID          whereHelperint
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
	DeletedAt   whereHelpernull_Time
	ChannelName whereHelpernull_String
	ChannelID   whereHelpernull_String
	GuildID     whereHelpernull_String
	Author      whereHelpernull_String
	AuthorID    whereHelpernull_String
}{
	ID:          whereHelperint{field: "\"message_logs\".\"id\""},
	CreatedAt:   whereHelpernull_Time{field: "\"message_logs\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"message_logs\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"message_logs\".\"deleted_at\""},
	ChannelName: whereHelpernull_String{field: "\"message_logs\".\"channel_name\""},
	ChannelID:   whereHelpernull_String{field: "\"message_logs\".\"channel_id\""},
	GuildID:     whereHelpernull_String{field: "\"message_logs\".\"guild_id\""},
	Author:      whereHelpernull_String{field: "\"message_logs\".\"author\""},
	AuthorID:    whereHelpernull_String{field: "\"message_logs\".\"author_id\""},
}

// MessageLogRels is where relationship names are stored.
var MessageLogRels = struct {
	Messages string
}{
	Messages: "Messages",
}

// messageLogR is where relationships are stored.
type messageLogR struct {
	Messages MessageSlice
}

// NewStruct creates a new relationship struct
func (*messageLogR) NewStruct() *messageLogR {
	return &messageLogR{}
}

// messageLogL is where Load methods for each relationship are stored.
type messageLogL struct{}

var (
	messageLogAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "channel_name", "channel_id", "guild_id", "author", "author_id"}
	messageLogColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "channel_name", "channel_id", "guild_id", "author", "author_id"}
	messageLogColumnsWithDefault    = []string{"id"}
	messageLogPrimaryKeyColumns     = []string{"id"}
)

type (
	// MessageLogSlice is an alias for a slice of pointers to MessageLog.
	// This should generally be used opposed to []MessageLog.
	MessageLogSlice []*MessageLog

	messageLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	messageLogType                 = reflect.TypeOf(&MessageLog{})
	messageLogMapping              = queries.MakeStructMapping(messageLogType)
	messageLogPrimaryKeyMapping, _ = queries.BindMapping(messageLogType, messageLogMapping, messageLogPrimaryKeyColumns)
	messageLogInsertCacheMut       sync.RWMutex
	messageLogInsertCache          = make(map[string]insertCache)
	messageLogUpdateCacheMut       sync.RWMutex
	messageLogUpdateCache          = make(map[string]updateCache)
	messageLogUpsertCacheMut       sync.RWMutex
	messageLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single messageLog record from the query using the global executor.
func (q messageLogQuery) OneG(ctx context.Context) (*MessageLog, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single messageLog record from the query.
func (q messageLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MessageLog, error) {
	o := &MessageLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.WrapIf(err, "models: failed to execute a one query for message_logs")
	}

	return o, nil
}

// AllG returns all MessageLog records from the query using the global executor.
func (q messageLogQuery) AllG(ctx context.Context) (MessageLogSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MessageLog records from the query.
func (q messageLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (MessageLogSlice, error) {
	var o []*MessageLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.WrapIf(err, "models: failed to assign all query results to MessageLog slice")
	}

	return o, nil
}

// CountG returns the count of all MessageLog records in the query, and panics on error.
func (q messageLogQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MessageLog records in the query.
func (q messageLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to count message_logs rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q messageLogQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q messageLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.WrapIf(err, "models: failed to check if message_logs exists")
	}

	return count > 0, nil
}

// Messages retrieves all the message's Messages with an executor.
func (o *MessageLog) Messages(mods ...qm.QueryMod) messageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"messages\".\"message_log_id\"=?", o.ID),
	)

	query := Messages(queryMods...)
	queries.SetFrom(query.Query, "\"messages\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"messages\".*"})
	}

	return query
}

// LoadMessages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (messageLogL) LoadMessages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMessageLog interface{}, mods queries.Applicator) error {
	var slice []*MessageLog
	var object *MessageLog

	if singular {
		object = maybeMessageLog.(*MessageLog)
	} else {
		slice = *maybeMessageLog.(*[]*MessageLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &messageLogR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &messageLogR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`messages`), qm.WhereIn(`message_log_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.WrapIf(err, "failed to eager load messages")
	}

	var resultSlice []*Message
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.WrapIf(err, "failed to bind eager loaded slice messages")
	}

	if err = results.Close(); err != nil {
		return errors.WrapIf(err, "failed to close results in eager load on messages")
	}
	if err = results.Err(); err != nil {
		return errors.WrapIf(err, "error occurred during iteration of eager loaded relations for messages")
	}

	if singular {
		object.R.Messages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &messageR{}
			}
			foreign.R.MessageLog = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.MessageLogID) {
				local.R.Messages = append(local.R.Messages, foreign)
				if foreign.R == nil {
					foreign.R = &messageR{}
				}
				foreign.R.MessageLog = local
				break
			}
		}
	}

	return nil
}

// AddMessagesG adds the given related objects to the existing relationships
// of the message_log, optionally inserting them as new records.
// Appends related to o.R.Messages.
// Sets related.R.MessageLog appropriately.
// Uses the global database handle.
func (o *MessageLog) AddMessagesG(ctx context.Context, insert bool, related ...*Message) error {
	return o.AddMessages(ctx, boil.GetContextDB(), insert, related...)
}

// AddMessages adds the given related objects to the existing relationships
// of the message_log, optionally inserting them as new records.
// Appends related to o.R.Messages.
// Sets related.R.MessageLog appropriately.
func (o *MessageLog) AddMessages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Message) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MessageLogID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.WrapIf(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"messages\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"message_log_id"}),
				strmangle.WhereClause("\"", "\"", 2, messagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.WrapIf(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MessageLogID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &messageLogR{
			Messages: related,
		}
	} else {
		o.R.Messages = append(o.R.Messages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &messageR{
				MessageLog: o,
			}
		} else {
			rel.R.MessageLog = o
		}
	}
	return nil
}

// SetMessagesG removes all previously related items of the
// message_log replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MessageLog's Messages accordingly.
// Replaces o.R.Messages with related.
// Sets related.R.MessageLog's Messages accordingly.
// Uses the global database handle.
func (o *MessageLog) SetMessagesG(ctx context.Context, insert bool, related ...*Message) error {
	return o.SetMessages(ctx, boil.GetContextDB(), insert, related...)
}

// SetMessages removes all previously related items of the
// message_log replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MessageLog's Messages accordingly.
// Replaces o.R.Messages with related.
// Sets related.R.MessageLog's Messages accordingly.
func (o *MessageLog) SetMessages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Message) error {
	query := "update \"messages\" set \"message_log_id\" = null where \"message_log_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.WrapIf(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Messages {
			queries.SetScanner(&rel.MessageLogID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.MessageLog = nil
		}

		o.R.Messages = nil
	}
	return o.AddMessages(ctx, exec, insert, related...)
}

// RemoveMessagesG relationships from objects passed in.
// Removes related items from R.Messages (uses pointer comparison, removal does not keep order)
// Sets related.R.MessageLog.
// Uses the global database handle.
func (o *MessageLog) RemoveMessagesG(ctx context.Context, related ...*Message) error {
	return o.RemoveMessages(ctx, boil.GetContextDB(), related...)
}

// RemoveMessages relationships from objects passed in.
// Removes related items from R.Messages (uses pointer comparison, removal does not keep order)
// Sets related.R.MessageLog.
func (o *MessageLog) RemoveMessages(ctx context.Context, exec boil.ContextExecutor, related ...*Message) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MessageLogID, nil)
		if rel.R != nil {
			rel.R.MessageLog = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("message_log_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Messages {
			if rel != ri {
				continue
			}

			ln := len(o.R.Messages)
			if ln > 1 && i < ln-1 {
				o.R.Messages[i] = o.R.Messages[ln-1]
			}
			o.R.Messages = o.R.Messages[:ln-1]
			break
		}
	}

	return nil
}

// MessageLogs retrieves all the records using an executor.
func MessageLogs(mods ...qm.QueryMod) messageLogQuery {
	mods = append(mods, qm.From("\"message_logs\""))
	return messageLogQuery{NewQuery(mods...)}
}

// FindMessageLogG retrieves a single record by ID.
func FindMessageLogG(ctx context.Context, iD int, selectCols ...string) (*MessageLog, error) {
	return FindMessageLog(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindMessageLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMessageLog(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MessageLog, error) {
	messageLogObj := &MessageLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"message_logs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, messageLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.WrapIf(err, "models: unable to select from message_logs")
	}

	return messageLogObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MessageLog) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MessageLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no message_logs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(messageLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	messageLogInsertCacheMut.RLock()
	cache, cached := messageLogInsertCache[key]
	messageLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			messageLogAllColumns,
			messageLogColumnsWithDefault,
			messageLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(messageLogType, messageLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(messageLogType, messageLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"message_logs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"message_logs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.WrapIf(err, "models: unable to insert into message_logs")
	}

	if !cached {
		messageLogInsertCacheMut.Lock()
		messageLogInsertCache[key] = cache
		messageLogInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single MessageLog record using the global executor.
// See Update for more documentation.
func (o *MessageLog) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MessageLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MessageLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	messageLogUpdateCacheMut.RLock()
	cache, cached := messageLogUpdateCache[key]
	messageLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			messageLogAllColumns,
			messageLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update message_logs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"message_logs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, messageLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(messageLogType, messageLogMapping, append(wl, messageLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to update message_logs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to get rows affected by update for message_logs")
	}

	if !cached {
		messageLogUpdateCacheMut.Lock()
		messageLogUpdateCache[key] = cache
		messageLogUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q messageLogQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q messageLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to update all for message_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to retrieve rows affected for message_logs")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MessageLogSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MessageLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), messageLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"message_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, messageLogPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to update all in messageLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to retrieve rows affected all in update all messageLog")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MessageLog) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MessageLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no message_logs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(messageLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	messageLogUpsertCacheMut.RLock()
	cache, cached := messageLogUpsertCache[key]
	messageLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			messageLogAllColumns,
			messageLogColumnsWithDefault,
			messageLogColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			messageLogAllColumns,
			messageLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert message_logs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(messageLogPrimaryKeyColumns))
			copy(conflict, messageLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"message_logs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(messageLogType, messageLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(messageLogType, messageLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.WrapIf(err, "models: unable to upsert message_logs")
	}

	if !cached {
		messageLogUpsertCacheMut.Lock()
		messageLogUpsertCache[key] = cache
		messageLogUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single MessageLog record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MessageLog) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MessageLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MessageLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MessageLog provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), messageLogPrimaryKeyMapping)
	sql := "DELETE FROM \"message_logs\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to delete from message_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to get rows affected by delete for message_logs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q messageLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no messageLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to delete all from message_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to get rows affected by deleteall for message_logs")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MessageLogSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MessageLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), messageLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"message_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, messageLogPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.WrapIf(err, "models: unable to delete all from messageLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.WrapIf(err, "models: failed to get rows affected by deleteall for message_logs")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MessageLog) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no MessageLog provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MessageLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMessageLog(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MessageLogSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MessageLogSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MessageLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MessageLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), messageLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"message_logs\".* FROM \"message_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, messageLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.WrapIf(err, "models: unable to reload all in MessageLogSlice")
	}

	*o = slice

	return nil
}

// MessageLogExistsG checks if the MessageLog row exists.
func MessageLogExistsG(ctx context.Context, iD int) (bool, error) {
	return MessageLogExists(ctx, boil.GetContextDB(), iD)
}

// MessageLogExists checks if the MessageLog row exists.
func MessageLogExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"message_logs\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.WrapIf(err, "models: unable to check if message_logs exists")
	}

	return exists, nil
}
